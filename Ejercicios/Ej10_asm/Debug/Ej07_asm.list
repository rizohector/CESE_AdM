
Ej07_asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052ac  080052ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b4  080052b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080052bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004038  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040ac  200040ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000e2c8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000fa1d  00000000  00000000  0002e36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002615  00000000  00000000  0003dd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c88  00000000  00000000  000403a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e4522  00000000  00000000  00041028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b80  00000000  00000000  00125550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002591c  00000000  00000000  001260d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b9ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035c0  00000000  00000000  0014ba3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050cc 	.word	0x080050cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080050cc 	.word	0x080050cc

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_max>:
    asm_max:
        @ Registros usados
        @   r2: maximo temporal
        @   r3: posicion del maximo
        @   r5: indice del vector
        push {r4, r5}
 80001f8:	b430      	push	{r4, r5}
        ldr r2, [r0]            @ inicializo el maximo con el valor de la primera posicion del vector
 80001fa:	6802      	ldr	r2, [r0, #0]
        mov r3, 0               @ inicializo en 0
 80001fc:	f04f 0300 	mov.w	r3, #0
        mov r5, 0               @ inicializo en 0
 8000200:	f04f 0500 	mov.w	r5, #0

08000204 <.ej7_loop>:
        .ej7_loop:
            ldr r4, [r0], 4     @ guardo el valor del vector de entrada
 8000204:	f850 4b04 	ldr.w	r4, [r0], #4
            cmp r4, r2          @ comparo si el valor leido es mayor al maximo temporal
 8000208:	4294      	cmp	r4, r2
            blt .is_less
 800020a:	db01      	blt.n	8000210 <.is_less>
            mov r2, r4          @ si es mayor guardo el nuevo maximo
 800020c:	4622      	mov	r2, r4
            mov r3, r5          @ actualizo la posicion del maximo
 800020e:	462b      	mov	r3, r5

08000210 <.is_less>:
        .is_less:
            add r5, 1           @ incremento el indice del vector
 8000210:	f105 0501 	add.w	r5, r5, #1
            subs r1, 1          @ decremento el contador del loop
 8000214:	3901      	subs	r1, #1
            bne .ej7_loop
 8000216:	d1f5      	bne.n	8000204 <.ej7_loop>
        mov r0, r3            @ return max pos
 8000218:	4618      	mov	r0, r3
        pop {r4, r5}
 800021a:	bc30      	pop	{r4, r5}
        bx lr
 800021c:	4770      	bx	lr

0800021e <strlen>:
 800021e:	4603      	mov	r3, r0
 8000220:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000224:	2a00      	cmp	r2, #0
 8000226:	d1fb      	bne.n	8000220 <strlen+0x2>
 8000228:	1a18      	subs	r0, r3, r0
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <vApplicationGetIdleTaskMemory+0x30>)
 80005ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000090 	.word	0x20000090
 8000604:	200000e4 	.word	0x200000e4

08000608 <vPrintString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vPrintString( const char *pcString )
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000610:	f003 fdf0 	bl	80041f4 <vPortEnterCritical>

		HAL_UART_Transmit(&huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff fe02 	bl	800021e <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	230a      	movs	r3, #10
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <vPrintString+0x2c>)
 8000624:	f001 fc41 	bl	8001eaa <HAL_UART_Transmit>

	taskEXIT_CRITICAL();
 8000628:	f003 fe14 	bl	8004254 <vPortExitCritical>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200002f8 	.word	0x200002f8

08000638 <get_diff>:


TickType_t get_diff( void )
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
    TickType_t tiempo;

    tiempo = keys_data.time_diff;
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <get_diff+0x1c>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	607b      	str	r3, [r7, #4]

    return tiempo;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200002e4 	.word	0x200002e4

08000658 <clear_diff>:


void clear_diff( void )
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
    keys_data.time_diff = KEYS_INVALID_TIME;
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <clear_diff+0x18>)
 800065e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000662:	60da      	str	r2, [r3, #12]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200002e4 	.word	0x200002e4

08000674 <task_tecla_led>:



// Implementacion de funcion de la tarea
void task_tecla_led( void* taskParmPtr )
{
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b09a      	sub	sp, #104	; 0x68
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    // ---------- CONFIGURACIONES ------------------------------
	char buffer [50];
	int32_t vectorIn[] = {5000, -5000, 10, 10000, -10};
 800067c:	4b8e      	ldr	r3, [pc, #568]	; (80008b8 <task_tecla_led+0x244>)
 800067e:	f107 040c 	add.w	r4, r7, #12
 8000682:	461d      	mov	r5, r3
 8000684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000688:	682b      	ldr	r3, [r5, #0]
 800068a:	6023      	str	r3, [r4, #0]
	    uint32_t longitud = 5;
 800068c:	2305      	movs	r3, #5
 800068e:	65bb      	str	r3, [r7, #88]	; 0x58
	    int32_t maxPos;
	int index=0;
 8000690:	2300      	movs	r3, #0
 8000692:	667b      	str	r3, [r7, #100]	; 0x64



		  //muestra el vector con los valores originales
		    while(index<longitud)
 8000694:	e022      	b.n	80006dc <task_tecla_led+0x68>
		{
		  if(index==0) vPrintString( "VALORES ORIGINALES DEL VECTOR \r\n" );
 8000696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <task_tecla_led+0x2e>
 800069c:	4887      	ldr	r0, [pc, #540]	; (80008bc <task_tecla_led+0x248>)
 800069e:	f7ff ffb3 	bl	8000608 <vPrintString>

		  sprintf( buffer, "Vector [%d] = %ld \r\n", index,vectorIn[index]);
 80006a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	3368      	adds	r3, #104	; 0x68
 80006a8:	443b      	add	r3, r7
 80006aa:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80006ae:	f107 0020 	add.w	r0, r7, #32
 80006b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80006b4:	4982      	ldr	r1, [pc, #520]	; (80008c0 <task_tecla_led+0x24c>)
 80006b6:	f004 f8a9 	bl	800480c <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fdad 	bl	800021e <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	f107 0120 	add.w	r1, r7, #32
 80006cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d0:	487c      	ldr	r0, [pc, #496]	; (80008c4 <task_tecla_led+0x250>)
 80006d2:	f001 fbea 	bl	8001eaa <HAL_UART_Transmit>
		  index++;
 80006d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006d8:	3301      	adds	r3, #1
 80006da:	667b      	str	r3, [r7, #100]	; 0x64
		    while(index<longitud)
 80006dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d8d8      	bhi.n	8000696 <task_tecla_led+0x22>

		}
		 vPrintString( "Presionar boton para realizar FUNCION _MAX \r\n" );
 80006e4:	4878      	ldr	r0, [pc, #480]	; (80008c8 <task_tecla_led+0x254>)
 80006e6:	f7ff ff8f 	bl	8000608 <vPrintString>
        // zeros (vector,longitud);

	tecla_led_state_t tecla_led_state = TECLA;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	TickType_t dif;

	keys_data.state          = STATE_BUTTON_UP;  		// Set initial state
 80006f0:	4b76      	ldr	r3, [pc, #472]	; (80008cc <task_tecla_led+0x258>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
    keys_data.time_down      = KEYS_INVALID_TIME;
 80006f6:	4b75      	ldr	r3, [pc, #468]	; (80008cc <task_tecla_led+0x258>)
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006fc:	605a      	str	r2, [r3, #4]
    keys_data.time_up        = KEYS_INVALID_TIME;
 80006fe:	4b73      	ldr	r3, [pc, #460]	; (80008cc <task_tecla_led+0x258>)
 8000700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000704:	609a      	str	r2, [r3, #8]
    keys_data.time_diff      = KEYS_INVALID_TIME;
 8000706:	4b71      	ldr	r3, [pc, #452]	; (80008cc <task_tecla_led+0x258>)
 8000708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800070c:	60da      	str	r2, [r3, #12]
    //vPrintString( "      Task: task_tecla_led\r\n" );

	// ---------- REPETIR POR SIEMPRE --------------------------
    while( 1 )
    {
    	if( tecla_led_state == TECLA)
 800070e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000712:	2b00      	cmp	r3, #0
 8000714:	d171      	bne.n	80007fa <task_tecla_led+0x186>
    	{
    		switch( keys_data.state )
 8000716:	4b6d      	ldr	r3, [pc, #436]	; (80008cc <task_tecla_led+0x258>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d861      	bhi.n	80007e2 <task_tecla_led+0x16e>
 800071e:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <task_tecla_led+0xb0>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	08000735 	.word	0x08000735
 8000728:	08000777 	.word	0x08000777
 800072c:	0800074d 	.word	0x0800074d
 8000730:	0800078f 	.word	0x0800078f
    		{
            	case STATE_BUTTON_UP:
            		/* CHECK TRANSITION CONDITIONS */
            		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000738:	4865      	ldr	r0, [pc, #404]	; (80008d0 <task_tecla_led+0x25c>)
 800073a:	f000 fe9f 	bl	800147c <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d052      	beq.n	80007ea <task_tecla_led+0x176>
            		{
            			keys_data.state = STATE_BUTTON_FALLING;
 8000744:	4b61      	ldr	r3, [pc, #388]	; (80008cc <task_tecla_led+0x258>)
 8000746:	2202      	movs	r2, #2
 8000748:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_FALLING\r\n" );
            		}
            		break;
 800074a:	e04e      	b.n	80007ea <task_tecla_led+0x176>

            	case STATE_BUTTON_FALLING:
            		/* ENTRY */

            		/* CHECK TRANSITION CONDITIONS */
            		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 800074c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000750:	485f      	ldr	r0, [pc, #380]	; (80008d0 <task_tecla_led+0x25c>)
 8000752:	f000 fe93 	bl	800147c <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d008      	beq.n	800076e <task_tecla_led+0xfa>
            		{
            			keys_data.state = STATE_BUTTON_DOWN;
 800075c:	4b5b      	ldr	r3, [pc, #364]	; (80008cc <task_tecla_led+0x258>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );

            			/* ACCION DEL EVENTO !*/
            			keys_data.time_down = xTaskGetTickCount();
 8000762:	f002 fef3 	bl	800354c <xTaskGetTickCount>
 8000766:	4603      	mov	r3, r0
 8000768:	4a58      	ldr	r2, [pc, #352]	; (80008cc <task_tecla_led+0x258>)
 800076a:	6053      	str	r3, [r2, #4]
            			keys_data.state = STATE_BUTTON_UP;
                    	//vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
            		}

            		/* LEAVE */
            		break;
 800076c:	e042      	b.n	80007f4 <task_tecla_led+0x180>
            			keys_data.state = STATE_BUTTON_UP;
 800076e:	4b57      	ldr	r3, [pc, #348]	; (80008cc <task_tecla_led+0x258>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
            		break;
 8000774:	e03e      	b.n	80007f4 <task_tecla_led+0x180>

            	case STATE_BUTTON_DOWN:
            		/* CHECK TRANSITION CONDITIONS */
            		if (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077a:	4855      	ldr	r0, [pc, #340]	; (80008d0 <task_tecla_led+0x25c>)
 800077c:	f000 fe7e 	bl	800147c <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d133      	bne.n	80007ee <task_tecla_led+0x17a>
            		{
            			keys_data.state = STATE_BUTTON_RISING;
 8000786:	4b51      	ldr	r3, [pc, #324]	; (80008cc <task_tecla_led+0x258>)
 8000788:	2203      	movs	r2, #3
 800078a:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_RISING\r\n" );
            		}
            		break;
 800078c:	e02f      	b.n	80007ee <task_tecla_led+0x17a>
            	case STATE_BUTTON_RISING:
            		/* ENTRY */

            		/* CHECK TRANSITION CONDITIONS */

            		if (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	484f      	ldr	r0, [pc, #316]	; (80008d0 <task_tecla_led+0x25c>)
 8000794:	f000 fe72 	bl	800147c <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d11d      	bne.n	80007da <task_tecla_led+0x166>
            		{
            			tecla_led_state = LED;
 800079e:	2301      	movs	r3, #1
 80007a0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

            			keys_data.state = STATE_BUTTON_UP;
 80007a4:	4b49      	ldr	r3, [pc, #292]	; (80008cc <task_tecla_led+0x258>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );

            			/* ACCION DEL EVENTO ! */
            			keys_data.time_up    = xTaskGetTickCount();
 80007aa:	f002 fecf 	bl	800354c <xTaskGetTickCount>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a46      	ldr	r2, [pc, #280]	; (80008cc <task_tecla_led+0x258>)
 80007b2:	6093      	str	r3, [r2, #8]
            			keys_data.time_diff  = keys_data.time_up - keys_data.time_down;
 80007b4:	4b45      	ldr	r3, [pc, #276]	; (80008cc <task_tecla_led+0x258>)
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	4b44      	ldr	r3, [pc, #272]	; (80008cc <task_tecla_led+0x258>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4a43      	ldr	r2, [pc, #268]	; (80008cc <task_tecla_led+0x258>)
 80007c0:	60d3      	str	r3, [r2, #12]
            			 if ( keys_data.time_diff  > 0 ) xSemaphoreGive( sem_btn );
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <task_tecla_led+0x258>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d013      	beq.n	80007f2 <task_tecla_led+0x17e>
 80007ca:	4b42      	ldr	r3, [pc, #264]	; (80008d4 <task_tecla_led+0x260>)
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	2300      	movs	r3, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	f002 f8d4 	bl	8002980 <xQueueGenericSend>
            			keys_data.state = STATE_BUTTON_DOWN;
            			//vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );
            		}

            		/* LEAVE */
            		break;
 80007d8:	e00b      	b.n	80007f2 <task_tecla_led+0x17e>
            			keys_data.state = STATE_BUTTON_DOWN;
 80007da:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <task_tecla_led+0x258>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
            		break;
 80007e0:	e007      	b.n	80007f2 <task_tecla_led+0x17e>

            	default:
            		keys_data.state = STATE_BUTTON_UP;
 80007e2:	4b3a      	ldr	r3, [pc, #232]	; (80008cc <task_tecla_led+0x258>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
            		//vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );

            		break;
 80007e8:	e004      	b.n	80007f4 <task_tecla_led+0x180>
            		break;
 80007ea:	bf00      	nop
 80007ec:	e002      	b.n	80007f4 <task_tecla_led+0x180>
            		break;
 80007ee:	bf00      	nop
 80007f0:	e000      	b.n	80007f4 <task_tecla_led+0x180>
            		break;
 80007f2:	bf00      	nop
    		}
    		// Envia la tarea al estado bloqueado durante DEBOUNCE_TIME_MS
    		vTaskDelay( DEBOUNCE_TIME_MS / portTICK_RATE_MS );
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f002 fd6b 	bl	80032d0 <vTaskDelay>
    	}

    	if( tecla_led_state == LED)
 80007fa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d185      	bne.n	800070e <task_tecla_led+0x9a>
    	{

    		        //vPrintString( "Presionar boton para inicializar FUNCION_MAX\r\n" );
    		        xSemaphoreTake( sem_btn, portMAX_DELAY );			// Esperamos tecla
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <task_tecla_led+0x260>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800080a:	4618      	mov	r0, r3
 800080c:	f002 f9b6 	bl	8002b7c <xQueueSemaphoreTake>
    		        maxPos = asm_max(vectorIn, longitud);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcee 	bl	80001f8 <asm_max>
 800081c:	6578      	str	r0, [r7, #84]	; 0x54
    		        vPrintString( "INGRESO A LA FUNCION ASM_MAX \r\n" );
 800081e:	482e      	ldr	r0, [pc, #184]	; (80008d8 <task_tecla_led+0x264>)
 8000820:	f7ff fef2 	bl	8000608 <vPrintString>
    		        sprintf( buffer, "La posición del maximo es: %ld \r\n", maxPos);
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800082a:	492c      	ldr	r1, [pc, #176]	; (80008dc <task_tecla_led+0x268>)
 800082c:	4618      	mov	r0, r3
 800082e:	f003 ffed 	bl	800480c <siprintf>
    		        HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fcf1 	bl	800021e <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	f107 0120 	add.w	r1, r7, #32
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	481e      	ldr	r0, [pc, #120]	; (80008c4 <task_tecla_led+0x250>)
 800084a:	f001 fb2e 	bl	8001eaa <HAL_UART_Transmit>
    		      //  HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
    		      //  index++;
    		      //  }


            dif = get_diff();
 800084e:	f7ff fef3 	bl	8000638 <get_diff>
 8000852:	65f8      	str	r0, [r7, #92]	; 0x5c

            if( dif != KEYS_INVALID_TIME )
 8000854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800085a:	d028      	beq.n	80008ae <task_tecla_led+0x23a>
            {
                if( dif > LED_RATE_MS )
 800085c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800085e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000862:	d902      	bls.n	800086a <task_tecla_led+0x1f6>
                {
                    dif = LED_RATE_MS;
 8000864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000868:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
    			tecla_led_state = TECLA;
 800086a:	2300      	movs	r3, #0
 800086c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        		sprintf( buffer, "            led_state: Encendido - dif %u\r\n", (unsigned int)dif );
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000876:	491a      	ldr	r1, [pc, #104]	; (80008e0 <task_tecla_led+0x26c>)
 8000878:	4618      	mov	r0, r3
 800087a:	f003 ffc7 	bl	800480c <siprintf>
        		vPrintString( buffer );
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fec0 	bl	8000608 <vPrintString>
            	HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET );
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <task_tecla_led+0x270>)
 800088e:	f000 fe0d 	bl	80014ac <HAL_GPIO_WritePin>

                // Envia la tarea al estado bloqueado durante dif
                vTaskDelay( dif / portTICK_RATE_MS );
 8000892:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000894:	f002 fd1c 	bl	80032d0 <vTaskDelay>

            	vPrintString( "            led_state: Apagado\r\n" );
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <task_tecla_led+0x274>)
 800089a:	f7ff feb5 	bl	8000608 <vPrintString>
            	HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET );
 800089e:	2200      	movs	r2, #0
 80008a0:	2101      	movs	r1, #1
 80008a2:	4810      	ldr	r0, [pc, #64]	; (80008e4 <task_tecla_led+0x270>)
 80008a4:	f000 fe02 	bl	80014ac <HAL_GPIO_WritePin>

                clear_diff();
 80008a8:	f7ff fed6 	bl	8000658 <clear_diff>
 80008ac:	e72f      	b.n	800070e <task_tecla_led+0x9a>
            }
            else
            {
                // Envia la tarea al estado bloqueado durante LED_RATE_MS
                vTaskDelay( LED_RATE_MS / portTICK_RATE_MS );
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f002 fd0d 	bl	80032d0 <vTaskDelay>
    	if( tecla_led_state == TECLA)
 80008b6:	e72a      	b.n	800070e <task_tecla_led+0x9a>
 80008b8:	080051f0 	.word	0x080051f0
 80008bc:	080050f0 	.word	0x080050f0
 80008c0:	08005114 	.word	0x08005114
 80008c4:	200002f8 	.word	0x200002f8
 80008c8:	0800512c 	.word	0x0800512c
 80008cc:	200002e4 	.word	0x200002e4
 80008d0:	40020800 	.word	0x40020800
 80008d4:	200002f4 	.word	0x200002f4
 80008d8:	0800515c 	.word	0x0800515c
 80008dc:	0800517c 	.word	0x0800517c
 80008e0:	080051a0 	.word	0x080051a0
 80008e4:	40020400 	.word	0x40020400
 80008e8:	080051cc 	.word	0x080051cc

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main( void )
{
 80008ec:	b5b0      	push	{r4, r5, r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f000 fabf 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f863 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f000 f8f5 	bl	8000ae8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008fe:	f000 f8c9 	bl	8000a94 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
	vPrintString( "Main: Ejercicio 07 -Language C - AdM.\r\n" );
 8000902:	4829      	ldr	r0, [pc, #164]	; (80009a8 <main+0xbc>)
 8000904:	f7ff fe80 	bl	8000608 <vPrintString>

  /* USER CODE END 2 */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <main+0xc0>)
 800090a:	1d3c      	adds	r4, r7, #4
 800090c:	461d      	mov	r5, r3
 800090e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000912:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fe57 	bl	80025d2 <osThreadCreate>
 8000924:	4603      	mov	r3, r0
 8000926:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <main+0xc4>)
 8000928:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

    // Crear tareas en freeRTOS
    BaseType_t res =
    	xTaskCreate (
 800092a:	2300      	movs	r3, #0
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	2301      	movs	r3, #1
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2300      	movs	r3, #0
 8000934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000938:	491e      	ldr	r1, [pc, #120]	; (80009b4 <main+0xc8>)
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <main+0xcc>)
 800093c:	f002 fb89 	bl	8003052 <xTaskCreate>
 8000940:	62f8      	str	r0, [r7, #44]	; 0x2c
    //{
    //	gpioWrite( LEDR, ON );
    //	vPrintString( "Error al crear las tareas.\r\n" );
    //	while(TRUE);						// VER ESTE LINK: https://pbs.twimg.com/media/BafQje7CcAAN5en.jpg
    //}
    configASSERT( res == pdPASS);	// gestion de errores
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	2b01      	cmp	r3, #1
 8000946:	d00a      	beq.n	800095e <main+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800094c:	f383 8811 	msr	BASEPRI, r3
 8000950:	f3bf 8f6f 	isb	sy
 8000954:	f3bf 8f4f 	dsb	sy
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800095a:	bf00      	nop
 800095c:	e7fe      	b.n	800095c <main+0x70>

  /* USER CODE END RTOS_THREADS */
    // Crear semaforo
    	sem_btn = xSemaphoreCreateBinary();
 800095e:	2203      	movs	r2, #3
 8000960:	2100      	movs	r1, #0
 8000962:	2001      	movs	r0, #1
 8000964:	f001 ffb2 	bl	80028cc <xQueueGenericCreate>
 8000968:	4603      	mov	r3, r0
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <main+0xd0>)
 800096c:	6013      	str	r3, [r2, #0]

    	// Gestion de errores de semaforos
    	configASSERT( sem_btn !=  NULL  );
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <main+0xd0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10a      	bne.n	800098c <main+0xa0>
	__asm volatile
 8000976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800097a:	f383 8811 	msr	BASEPRI, r3
 800097e:	f3bf 8f6f 	isb	sy
 8000982:	f3bf 8f4f 	dsb	sy
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000988:	bf00      	nop
 800098a:	e7fe      	b.n	800098a <main+0x9e>

  /* Start scheduler */
  osKernelStart();
 800098c:	f001 fe1a 	bl	80025c4 <osKernelStart>
	__asm volatile
 8000990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000994:	f383 8811 	msr	BASEPRI, r3
 8000998:	f3bf 8f6f 	isb	sy
 800099c:	f3bf 8f4f 	dsb	sy
 80009a0:	623b      	str	r3, [r7, #32]
}
 80009a2:	bf00      	nop
  // ---------- REPETIR POR SIEMPRE --------------------------
  //while( TRUE )
  //{
  // Si cae en este while 1 significa que no pudo iniciar el scheduler
  //}
  configASSERT( 0 );
 80009a4:	e7fe      	b.n	80009a4 <main+0xb8>
 80009a6:	bf00      	nop
 80009a8:	08005204 	.word	0x08005204
 80009ac:	0800523c 	.word	0x0800523c
 80009b0:	2000033c 	.word	0x2000033c
 80009b4:	0800522c 	.word	0x0800522c
 80009b8:	08000675 	.word	0x08000675
 80009bc:	200002f4 	.word	0x200002f4

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 ff14 	bl	80047fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a34:	23a8      	movs	r3, #168	; 0xa8
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fd4b 	bl	80014e0 <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a50:	f000 f900 	bl	8000c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2105      	movs	r1, #5
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 ffac 	bl	80019d0 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a7e:	f000 f8e9 	bl	8000c54 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART3_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART3_UART_Init+0x4c>)
 8000acc:	f001 f9a0 	bl	8001e10 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f8bd 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200002f8 	.word	0x200002f8
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b4c      	ldr	r3, [pc, #304]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a4b      	ldr	r2, [pc, #300]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b45      	ldr	r3, [pc, #276]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a44      	ldr	r2, [pc, #272]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a3d      	ldr	r2, [pc, #244]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a36      	ldr	r2, [pc, #216]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bac:	4822      	ldr	r0, [pc, #136]	; (8000c38 <MX_GPIO_Init+0x150>)
 8000bae:	f000 fc7d 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	4821      	ldr	r0, [pc, #132]	; (8000c3c <MX_GPIO_Init+0x154>)
 8000bb8:	f000 fc78 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481b      	ldr	r0, [pc, #108]	; (8000c40 <MX_GPIO_Init+0x158>)
 8000bd4:	f000 faa6 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bd8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_GPIO_Init+0x150>)
 8000bf2:	f000 fa97 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <MX_GPIO_Init+0x154>)
 8000c0e:	f000 fa89 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_GPIO_Init+0x154>)
 8000c26:	f000 fa7d 	bl	8001124 <HAL_GPIO_Init>

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	40020800 	.word	0x40020800

08000c44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f001 fd0c 	bl	800266a <osDelay>
 8000c52:	e7fb      	b.n	8000c4c <StartDefaultTask+0x8>

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	f06f 0001 	mvn.w	r0, #1
 8000ca6:	f000 fa14 	bl	80010d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_UART_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12c      	bne.n	8000d34 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_UART_MspInit+0x88>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_UART_MspInit+0x88>)
 8000ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0x88>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_UART_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <HAL_UART_MspInit+0x88>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_UART_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d24:	2307      	movs	r3, #7
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_UART_MspInit+0x8c>)
 8000d30:	f000 f9f8 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40004800 	.word	0x40004800
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020c00 	.word	0x40020c00

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f8ce 	bl	8000f18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d7c:	f002 feea 	bl	8003b54 <xTaskGetSchedulerState>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d001      	beq.n	8000d8a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d86:	f003 fac7 	bl	8004318 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f003 fce4 	bl	800478c <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20030000 	.word	0x20030000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	20000340 	.word	0x20000340
 8000df8:	200040b0 	.word	0x200040b0

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4a:	f7ff ffd7 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f003 fca3 	bl	8004798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fd4b 	bl	80008ec <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e58:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e64:	080052bc 	.word	0x080052bc
  ldr r2, =_sbss
 8000e68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e6c:	200040ac 	.word	0x200040ac

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f90d 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff feda 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f917 	bl	800110a <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef4:	f000 f8ed 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000344 	.word	0x20000344

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000344 	.word	0x20000344

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff47 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff5c 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffb0 	bl	8001078 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e177      	b.n	8001430 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8166 	bne.w	800142a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80c0 	beq.w	800142a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b66      	ldr	r3, [pc, #408]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a65      	ldr	r2, [pc, #404]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a61      	ldr	r2, [pc, #388]	; (800144c <HAL_GPIO_Init+0x328>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a58      	ldr	r2, [pc, #352]	; (8001450 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d037      	beq.n	8001362 <HAL_GPIO_Init+0x23e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d031      	beq.n	800135e <HAL_GPIO_Init+0x23a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a56      	ldr	r2, [pc, #344]	; (8001458 <HAL_GPIO_Init+0x334>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d02b      	beq.n	800135a <HAL_GPIO_Init+0x236>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a55      	ldr	r2, [pc, #340]	; (800145c <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d025      	beq.n	8001356 <HAL_GPIO_Init+0x232>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01f      	beq.n	8001352 <HAL_GPIO_Init+0x22e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d019      	beq.n	800134e <HAL_GPIO_Init+0x22a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x21a>
 800133a:	2309      	movs	r3, #9
 800133c:	e012      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800133e:	230a      	movs	r3, #10
 8001340:	e010      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001342:	2308      	movs	r3, #8
 8001344:	e00e      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001346:	2307      	movs	r3, #7
 8001348:	e00c      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800134a:	2306      	movs	r3, #6
 800134c:	e00a      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800134e:	2305      	movs	r3, #5
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001352:	2304      	movs	r3, #4
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x328>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a6:	4a34      	ldr	r2, [pc, #208]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d0:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fa:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f ae84 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40021400 	.word	0x40021400
 8001468:	40021800 	.word	0x40021800
 800146c:	40021c00 	.word	0x40021c00
 8001470:	40022000 	.word	0x40022000
 8001474:	40022400 	.word	0x40022400
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e267      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d075      	beq.n	80015ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fe:	4b88      	ldr	r3, [pc, #544]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b04      	cmp	r3, #4
 8001508:	d00c      	beq.n	8001524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150a:	4b85      	ldr	r3, [pc, #532]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001512:	2b08      	cmp	r3, #8
 8001514:	d112      	bne.n	800153c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001516:	4b82      	ldr	r3, [pc, #520]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001522:	d10b      	bne.n	800153c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	4b7e      	ldr	r3, [pc, #504]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d05b      	beq.n	80015e8 <HAL_RCC_OscConfig+0x108>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d157      	bne.n	80015e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e242      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001544:	d106      	bne.n	8001554 <HAL_RCC_OscConfig+0x74>
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a75      	ldr	r2, [pc, #468]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e01d      	b.n	8001590 <HAL_RCC_OscConfig+0xb0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x98>
 800155e:	4b70      	ldr	r3, [pc, #448]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6f      	ldr	r2, [pc, #444]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b6d      	ldr	r3, [pc, #436]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6c      	ldr	r2, [pc, #432]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e00b      	b.n	8001590 <HAL_RCC_OscConfig+0xb0>
 8001578:	4b69      	ldr	r3, [pc, #420]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a68      	ldr	r2, [pc, #416]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b66      	ldr	r3, [pc, #408]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a65      	ldr	r2, [pc, #404]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800158a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fcd2 	bl	8000f40 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fcce 	bl	8000f40 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e207      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b5b      	ldr	r3, [pc, #364]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0xc0>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fcbe 	bl	8000f40 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fcba 	bl	8000f40 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1f3      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	4b51      	ldr	r3, [pc, #324]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0xe8>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d063      	beq.n	80016be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00b      	beq.n	800161a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800160a:	2b08      	cmp	r3, #8
 800160c:	d11c      	bne.n	8001648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d116      	bne.n	8001648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <HAL_RCC_OscConfig+0x152>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d001      	beq.n	8001632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e1c7      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4937      	ldr	r1, [pc, #220]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	e03a      	b.n	80016be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_RCC_OscConfig+0x244>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff fc73 	bl	8000f40 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff fc6f 	bl	8000f40 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1a8      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4925      	ldr	r1, [pc, #148]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
 8001690:	e015      	b.n	80016be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_RCC_OscConfig+0x244>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fc52 	bl	8000f40 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff fc4e 	bl	8000f40 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e187      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d036      	beq.n	8001738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d016      	beq.n	8001700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_RCC_OscConfig+0x248>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff fc32 	bl	8000f40 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff fc2e 	bl	8000f40 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e167      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80016f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x200>
 80016fe:	e01b      	b.n	8001738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_OscConfig+0x248>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff fc1b 	bl	8000f40 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	e00e      	b.n	800172c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff fc17 	bl	8000f40 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d907      	bls.n	800172c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e150      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
 8001720:	40023800 	.word	0x40023800
 8001724:	42470000 	.word	0x42470000
 8001728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ea      	bne.n	800170e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 8097 	beq.w	8001874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174a:	4b81      	ldr	r3, [pc, #516]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b7d      	ldr	r3, [pc, #500]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a7c      	ldr	r2, [pc, #496]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001772:	2301      	movs	r3, #1
 8001774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001776:	4b77      	ldr	r3, [pc, #476]	; (8001954 <HAL_RCC_OscConfig+0x474>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d118      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001782:	4b74      	ldr	r3, [pc, #464]	; (8001954 <HAL_RCC_OscConfig+0x474>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a73      	ldr	r2, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x474>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178e:	f7ff fbd7 	bl	8000f40 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001796:	f7ff fbd3 	bl	8000f40 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e10c      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a8:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x474>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x2ea>
 80017bc:	4b64      	ldr	r3, [pc, #400]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a63      	ldr	r2, [pc, #396]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	e01c      	b.n	8001804 <HAL_RCC_OscConfig+0x324>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x30c>
 80017d2:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	4a5e      	ldr	r2, [pc, #376]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6713      	str	r3, [r2, #112]	; 0x70
 80017de:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	4a5b      	ldr	r2, [pc, #364]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0x324>
 80017ec:	4b58      	ldr	r3, [pc, #352]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	4a57      	ldr	r2, [pc, #348]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6713      	str	r3, [r2, #112]	; 0x70
 80017f8:	4b55      	ldr	r3, [pc, #340]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	4a54      	ldr	r2, [pc, #336]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 0304 	bic.w	r3, r3, #4
 8001802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d015      	beq.n	8001838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fb98 	bl	8000f40 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fb94 	bl	8000f40 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0cb      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182a:	4b49      	ldr	r3, [pc, #292]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0ee      	beq.n	8001814 <HAL_RCC_OscConfig+0x334>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff fb82 	bl	8000f40 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183e:	e00a      	b.n	8001856 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7ff fb7e 	bl	8000f40 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	; 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0b5      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001856:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1ee      	bne.n	8001840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a38      	ldr	r2, [pc, #224]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800186e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80a1 	beq.w	80019c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	d05c      	beq.n	8001944 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d141      	bne.n	8001916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b31      	ldr	r3, [pc, #196]	; (8001958 <HAL_RCC_OscConfig+0x478>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fb52 	bl	8000f40 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff fb4e 	bl	8000f40 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e087      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	3b01      	subs	r3, #1
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	061b      	lsls	r3, r3, #24
 80018e2:	491b      	ldr	r1, [pc, #108]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_RCC_OscConfig+0x478>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb27 	bl	8000f40 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f6:	f7ff fb23 	bl	8000f40 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e05c      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x416>
 8001914:	e054      	b.n	80019c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_RCC_OscConfig+0x478>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb10 	bl	8000f40 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff fb0c 	bl	8000f40 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e045      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x444>
 8001942:	e03d      	b.n	80019c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d107      	bne.n	800195c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e038      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
 8001950:	40023800 	.word	0x40023800
 8001954:	40007000 	.word	0x40007000
 8001958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_RCC_OscConfig+0x4ec>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d028      	beq.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d121      	bne.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d11a      	bne.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800198c:	4013      	ands	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001994:	4293      	cmp	r3, r2
 8001996:	d111      	bne.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	3b01      	subs	r3, #1
 80019a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0cc      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b68      	ldr	r3, [pc, #416]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d90c      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b8      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	494d      	ldr	r1, [pc, #308]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d044      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d119      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e06f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e067      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f023 0203 	bic.w	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4934      	ldr	r1, [pc, #208]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac0:	f7ff fa3e 	bl	8000f40 <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac8:	f7ff fa3a 	bl	8000f40 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e04f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 020c 	and.w	r2, r3, #12
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1eb      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d20c      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e032      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4916      	ldr	r1, [pc, #88]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	490e      	ldr	r1, [pc, #56]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b56:	f000 f821 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	490a      	ldr	r1, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f99e 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023c00 	.word	0x40023c00
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08005260 	.word	0x08005260
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba0:	b094      	sub	sp, #80	; 0x50
 8001ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ba8:	2300      	movs	r3, #0
 8001baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bac:	2300      	movs	r3, #0
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bb4:	4b79      	ldr	r3, [pc, #484]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d00d      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x40>
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	f200 80e1 	bhi.w	8001d88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d003      	beq.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bce:	e0db      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bd0:	4b73      	ldr	r3, [pc, #460]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bd4:	e0db      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bd6:	4b73      	ldr	r3, [pc, #460]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bda:	e0d8      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001be4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be6:	4b6d      	ldr	r3, [pc, #436]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d063      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf2:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	099b      	lsrs	r3, r3, #6
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c04:	633b      	str	r3, [r7, #48]	; 0x30
 8001c06:	2300      	movs	r3, #0
 8001c08:	637b      	str	r3, [r7, #52]	; 0x34
 8001c0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c0e:	4622      	mov	r2, r4
 8001c10:	462b      	mov	r3, r5
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	0159      	lsls	r1, r3, #5
 8001c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c20:	0150      	lsls	r0, r2, #5
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4621      	mov	r1, r4
 8001c28:	1a51      	subs	r1, r2, r1
 8001c2a:	6139      	str	r1, [r7, #16]
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c40:	4659      	mov	r1, fp
 8001c42:	018b      	lsls	r3, r1, #6
 8001c44:	4651      	mov	r1, sl
 8001c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c4a:	4651      	mov	r1, sl
 8001c4c:	018a      	lsls	r2, r1, #6
 8001c4e:	4651      	mov	r1, sl
 8001c50:	ebb2 0801 	subs.w	r8, r2, r1
 8001c54:	4659      	mov	r1, fp
 8001c56:	eb63 0901 	sbc.w	r9, r3, r1
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c6e:	4690      	mov	r8, r2
 8001c70:	4699      	mov	r9, r3
 8001c72:	4623      	mov	r3, r4
 8001c74:	eb18 0303 	adds.w	r3, r8, r3
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	eb49 0303 	adc.w	r3, r9, r3
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c8e:	4629      	mov	r1, r5
 8001c90:	024b      	lsls	r3, r1, #9
 8001c92:	4621      	mov	r1, r4
 8001c94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c98:	4621      	mov	r1, r4
 8001c9a:	024a      	lsls	r2, r1, #9
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cac:	f7fe fb10 	bl	80002d0 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cb8:	e058      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	099b      	lsrs	r3, r3, #6
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cd4:	4642      	mov	r2, r8
 8001cd6:	464b      	mov	r3, r9
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	0159      	lsls	r1, r3, #5
 8001ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce6:	0150      	lsls	r0, r2, #5
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4641      	mov	r1, r8
 8001cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d10:	eb63 050b 	sbc.w	r5, r3, fp
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	00eb      	lsls	r3, r5, #3
 8001d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d22:	00e2      	lsls	r2, r4, #3
 8001d24:	4614      	mov	r4, r2
 8001d26:	461d      	mov	r5, r3
 8001d28:	4643      	mov	r3, r8
 8001d2a:	18e3      	adds	r3, r4, r3
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	464b      	mov	r3, r9
 8001d30:	eb45 0303 	adc.w	r3, r5, r3
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d42:	4629      	mov	r1, r5
 8001d44:	028b      	lsls	r3, r1, #10
 8001d46:	4621      	mov	r1, r4
 8001d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	028a      	lsls	r2, r1, #10
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d56:	2200      	movs	r2, #0
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	61fa      	str	r2, [r7, #28]
 8001d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d60:	f7fe fab6 	bl	80002d0 <__aeabi_uldivmod>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4613      	mov	r3, r2
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	3301      	adds	r3, #1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d86:	e002      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3750      	adds	r7, #80	; 0x50
 8001d94:	46bd      	mov	sp, r7
 8001d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	00f42400 	.word	0x00f42400
 8001da4:	007a1200 	.word	0x007a1200

08001da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dc4:	f7ff fff0 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0a9b      	lsrs	r3, r3, #10
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4903      	ldr	r1, [pc, #12]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	08005270 	.word	0x08005270

08001de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dec:	f7ff ffdc 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0b5b      	lsrs	r3, r3, #13
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4903      	ldr	r1, [pc, #12]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	08005270 	.word	0x08005270

08001e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e03f      	b.n	8001ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe ff3e 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2224      	movs	r2, #36	; 0x24
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f929 	bl	80020ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b08a      	sub	sp, #40	; 0x28
 8001eae:	af02      	add	r7, sp, #8
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d17c      	bne.n	8001fc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_UART_Transmit+0x2c>
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e075      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_UART_Transmit+0x3e>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e06e      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2221      	movs	r2, #33	; 0x21
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001efe:	f7ff f81f 	bl	8000f40 <HAL_GetTick>
 8001f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	88fa      	ldrh	r2, [r7, #6]
 8001f08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	88fa      	ldrh	r2, [r7, #6]
 8001f0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f18:	d108      	bne.n	8001f2c <HAL_UART_Transmit+0x82>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d104      	bne.n	8001f2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	e003      	b.n	8001f34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f3c:	e02a      	b.n	8001f94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f840 	bl	8001fce <UART_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e036      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10b      	bne.n	8001f76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	3302      	adds	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	e007      	b.n	8001f86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	3301      	adds	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1cf      	bne.n	8001f3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2140      	movs	r1, #64	; 0x40
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f810 	bl	8001fce <UART_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e006      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b090      	sub	sp, #64	; 0x40
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fde:	e050      	b.n	8002082 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fe6:	d04c      	beq.n	8002082 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <UART_WaitOnFlagUntilTimeout+0x30>
 8001fee:	f7fe ffa7 	bl	8000f40 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d241      	bcs.n	8002082 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	330c      	adds	r3, #12
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	e853 3f00 	ldrex	r3, [r3]
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	330c      	adds	r3, #12
 800201c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800201e:	637a      	str	r2, [r7, #52]	; 0x34
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002026:	e841 2300 	strex	r3, r2, [r1]
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e5      	bne.n	8001ffe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3314      	adds	r3, #20
 8002038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	e853 3f00 	ldrex	r3, [r3]
 8002040:	613b      	str	r3, [r7, #16]
   return(result);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	63bb      	str	r3, [r7, #56]	; 0x38
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3314      	adds	r3, #20
 8002050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002052:	623a      	str	r2, [r7, #32]
 8002054:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002056:	69f9      	ldr	r1, [r7, #28]
 8002058:	6a3a      	ldr	r2, [r7, #32]
 800205a:	e841 2300 	strex	r3, r2, [r1]
 800205e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1e5      	bne.n	8002032 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e00f      	b.n	80020a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4013      	ands	r3, r2
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	429a      	cmp	r2, r3
 8002090:	bf0c      	ite	eq
 8002092:	2301      	moveq	r3, #1
 8002094:	2300      	movne	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	429a      	cmp	r2, r3
 800209e:	d09f      	beq.n	8001fe0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3740      	adds	r7, #64	; 0x40
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b0:	b0c0      	sub	sp, #256	; 0x100
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	68d9      	ldr	r1, [r3, #12]
 80020ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	ea40 0301 	orr.w	r3, r0, r1
 80020d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002104:	f021 010c 	bic.w	r1, r1, #12
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002112:	430b      	orrs	r3, r1
 8002114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002126:	6999      	ldr	r1, [r3, #24]
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	ea40 0301 	orr.w	r3, r0, r1
 8002132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b8f      	ldr	r3, [pc, #572]	; (8002378 <UART_SetConfig+0x2cc>)
 800213c:	429a      	cmp	r2, r3
 800213e:	d005      	beq.n	800214c <UART_SetConfig+0xa0>
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b8d      	ldr	r3, [pc, #564]	; (800237c <UART_SetConfig+0x2d0>)
 8002148:	429a      	cmp	r2, r3
 800214a:	d104      	bne.n	8002156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800214c:	f7ff fe4c 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 8002150:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002154:	e003      	b.n	800215e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002156:	f7ff fe33 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 800215a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800215e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002168:	f040 810c 	bne.w	8002384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800216c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002170:	2200      	movs	r2, #0
 8002172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002176:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800217a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800217e:	4622      	mov	r2, r4
 8002180:	462b      	mov	r3, r5
 8002182:	1891      	adds	r1, r2, r2
 8002184:	65b9      	str	r1, [r7, #88]	; 0x58
 8002186:	415b      	adcs	r3, r3
 8002188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800218a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800218e:	4621      	mov	r1, r4
 8002190:	eb12 0801 	adds.w	r8, r2, r1
 8002194:	4629      	mov	r1, r5
 8002196:	eb43 0901 	adc.w	r9, r3, r1
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ae:	4690      	mov	r8, r2
 80021b0:	4699      	mov	r9, r3
 80021b2:	4623      	mov	r3, r4
 80021b4:	eb18 0303 	adds.w	r3, r8, r3
 80021b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021bc:	462b      	mov	r3, r5
 80021be:	eb49 0303 	adc.w	r3, r9, r3
 80021c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021da:	460b      	mov	r3, r1
 80021dc:	18db      	adds	r3, r3, r3
 80021de:	653b      	str	r3, [r7, #80]	; 0x50
 80021e0:	4613      	mov	r3, r2
 80021e2:	eb42 0303 	adc.w	r3, r2, r3
 80021e6:	657b      	str	r3, [r7, #84]	; 0x54
 80021e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021f0:	f7fe f86e 	bl	80002d0 <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <UART_SetConfig+0x2d4>)
 80021fa:	fba3 2302 	umull	r2, r3, r3, r2
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	011c      	lsls	r4, r3, #4
 8002202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002206:	2200      	movs	r2, #0
 8002208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800220c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002214:	4642      	mov	r2, r8
 8002216:	464b      	mov	r3, r9
 8002218:	1891      	adds	r1, r2, r2
 800221a:	64b9      	str	r1, [r7, #72]	; 0x48
 800221c:	415b      	adcs	r3, r3
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002224:	4641      	mov	r1, r8
 8002226:	eb12 0a01 	adds.w	sl, r2, r1
 800222a:	4649      	mov	r1, r9
 800222c:	eb43 0b01 	adc.w	fp, r3, r1
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800223c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002244:	4692      	mov	sl, r2
 8002246:	469b      	mov	fp, r3
 8002248:	4643      	mov	r3, r8
 800224a:	eb1a 0303 	adds.w	r3, sl, r3
 800224e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002252:	464b      	mov	r3, r9
 8002254:	eb4b 0303 	adc.w	r3, fp, r3
 8002258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002268:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800226c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002270:	460b      	mov	r3, r1
 8002272:	18db      	adds	r3, r3, r3
 8002274:	643b      	str	r3, [r7, #64]	; 0x40
 8002276:	4613      	mov	r3, r2
 8002278:	eb42 0303 	adc.w	r3, r2, r3
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
 800227e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002286:	f7fe f823 	bl	80002d0 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4611      	mov	r1, r2
 8002290:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <UART_SetConfig+0x2d4>)
 8002292:	fba3 2301 	umull	r2, r3, r3, r1
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2264      	movs	r2, #100	; 0x64
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	1acb      	subs	r3, r1, r3
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <UART_SetConfig+0x2d4>)
 80022a8:	fba3 2302 	umull	r2, r3, r3, r2
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022b4:	441c      	add	r4, r3
 80022b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ba:	2200      	movs	r2, #0
 80022bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022c8:	4642      	mov	r2, r8
 80022ca:	464b      	mov	r3, r9
 80022cc:	1891      	adds	r1, r2, r2
 80022ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80022d0:	415b      	adcs	r3, r3
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022d8:	4641      	mov	r1, r8
 80022da:	1851      	adds	r1, r2, r1
 80022dc:	6339      	str	r1, [r7, #48]	; 0x30
 80022de:	4649      	mov	r1, r9
 80022e0:	414b      	adcs	r3, r1
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022f0:	4659      	mov	r1, fp
 80022f2:	00cb      	lsls	r3, r1, #3
 80022f4:	4651      	mov	r1, sl
 80022f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fa:	4651      	mov	r1, sl
 80022fc:	00ca      	lsls	r2, r1, #3
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	4603      	mov	r3, r0
 8002304:	4642      	mov	r2, r8
 8002306:	189b      	adds	r3, r3, r2
 8002308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800230c:	464b      	mov	r3, r9
 800230e:	460a      	mov	r2, r1
 8002310:	eb42 0303 	adc.w	r3, r2, r3
 8002314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002324:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800232c:	460b      	mov	r3, r1
 800232e:	18db      	adds	r3, r3, r3
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
 8002332:	4613      	mov	r3, r2
 8002334:	eb42 0303 	adc.w	r3, r2, r3
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800233e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002342:	f7fd ffc5 	bl	80002d0 <__aeabi_uldivmod>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <UART_SetConfig+0x2d4>)
 800234c:	fba3 1302 	umull	r1, r3, r3, r2
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	2164      	movs	r1, #100	; 0x64
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	3332      	adds	r3, #50	; 0x32
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <UART_SetConfig+0x2d4>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	f003 0207 	and.w	r2, r3, #7
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4422      	add	r2, r4
 8002372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002374:	e105      	b.n	8002582 <UART_SetConfig+0x4d6>
 8002376:	bf00      	nop
 8002378:	40011000 	.word	0x40011000
 800237c:	40011400 	.word	0x40011400
 8002380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002388:	2200      	movs	r2, #0
 800238a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800238e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002396:	4642      	mov	r2, r8
 8002398:	464b      	mov	r3, r9
 800239a:	1891      	adds	r1, r2, r2
 800239c:	6239      	str	r1, [r7, #32]
 800239e:	415b      	adcs	r3, r3
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023a6:	4641      	mov	r1, r8
 80023a8:	1854      	adds	r4, r2, r1
 80023aa:	4649      	mov	r1, r9
 80023ac:	eb43 0501 	adc.w	r5, r3, r1
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	00eb      	lsls	r3, r5, #3
 80023ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023be:	00e2      	lsls	r2, r4, #3
 80023c0:	4614      	mov	r4, r2
 80023c2:	461d      	mov	r5, r3
 80023c4:	4643      	mov	r3, r8
 80023c6:	18e3      	adds	r3, r4, r3
 80023c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023cc:	464b      	mov	r3, r9
 80023ce:	eb45 0303 	adc.w	r3, r5, r3
 80023d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023f2:	4629      	mov	r1, r5
 80023f4:	008b      	lsls	r3, r1, #2
 80023f6:	4621      	mov	r1, r4
 80023f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023fc:	4621      	mov	r1, r4
 80023fe:	008a      	lsls	r2, r1, #2
 8002400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002404:	f7fd ff64 	bl	80002d0 <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4b60      	ldr	r3, [pc, #384]	; (8002590 <UART_SetConfig+0x4e4>)
 800240e:	fba3 2302 	umull	r2, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	011c      	lsls	r4, r3, #4
 8002416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002420:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002428:	4642      	mov	r2, r8
 800242a:	464b      	mov	r3, r9
 800242c:	1891      	adds	r1, r2, r2
 800242e:	61b9      	str	r1, [r7, #24]
 8002430:	415b      	adcs	r3, r3
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002438:	4641      	mov	r1, r8
 800243a:	1851      	adds	r1, r2, r1
 800243c:	6139      	str	r1, [r7, #16]
 800243e:	4649      	mov	r1, r9
 8002440:	414b      	adcs	r3, r1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002450:	4659      	mov	r1, fp
 8002452:	00cb      	lsls	r3, r1, #3
 8002454:	4651      	mov	r1, sl
 8002456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245a:	4651      	mov	r1, sl
 800245c:	00ca      	lsls	r2, r1, #3
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	4603      	mov	r3, r0
 8002464:	4642      	mov	r2, r8
 8002466:	189b      	adds	r3, r3, r2
 8002468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800246c:	464b      	mov	r3, r9
 800246e:	460a      	mov	r2, r1
 8002470:	eb42 0303 	adc.w	r3, r2, r3
 8002474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	67bb      	str	r3, [r7, #120]	; 0x78
 8002482:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002490:	4649      	mov	r1, r9
 8002492:	008b      	lsls	r3, r1, #2
 8002494:	4641      	mov	r1, r8
 8002496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800249a:	4641      	mov	r1, r8
 800249c:	008a      	lsls	r2, r1, #2
 800249e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024a2:	f7fd ff15 	bl	80002d0 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4b39      	ldr	r3, [pc, #228]	; (8002590 <UART_SetConfig+0x4e4>)
 80024ac:	fba3 1302 	umull	r1, r3, r3, r2
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	2164      	movs	r1, #100	; 0x64
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	3332      	adds	r3, #50	; 0x32
 80024be:	4a34      	ldr	r2, [pc, #208]	; (8002590 <UART_SetConfig+0x4e4>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ca:	441c      	add	r4, r3
 80024cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024d0:	2200      	movs	r2, #0
 80024d2:	673b      	str	r3, [r7, #112]	; 0x70
 80024d4:	677a      	str	r2, [r7, #116]	; 0x74
 80024d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024da:	4642      	mov	r2, r8
 80024dc:	464b      	mov	r3, r9
 80024de:	1891      	adds	r1, r2, r2
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	415b      	adcs	r3, r3
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ea:	4641      	mov	r1, r8
 80024ec:	1851      	adds	r1, r2, r1
 80024ee:	6039      	str	r1, [r7, #0]
 80024f0:	4649      	mov	r1, r9
 80024f2:	414b      	adcs	r3, r1
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002502:	4659      	mov	r1, fp
 8002504:	00cb      	lsls	r3, r1, #3
 8002506:	4651      	mov	r1, sl
 8002508:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800250c:	4651      	mov	r1, sl
 800250e:	00ca      	lsls	r2, r1, #3
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	4603      	mov	r3, r0
 8002516:	4642      	mov	r2, r8
 8002518:	189b      	adds	r3, r3, r2
 800251a:	66bb      	str	r3, [r7, #104]	; 0x68
 800251c:	464b      	mov	r3, r9
 800251e:	460a      	mov	r2, r1
 8002520:	eb42 0303 	adc.w	r3, r2, r3
 8002524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	663b      	str	r3, [r7, #96]	; 0x60
 8002530:	667a      	str	r2, [r7, #100]	; 0x64
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800253e:	4649      	mov	r1, r9
 8002540:	008b      	lsls	r3, r1, #2
 8002542:	4641      	mov	r1, r8
 8002544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002548:	4641      	mov	r1, r8
 800254a:	008a      	lsls	r2, r1, #2
 800254c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002550:	f7fd febe 	bl	80002d0 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <UART_SetConfig+0x4e4>)
 800255a:	fba3 1302 	umull	r1, r3, r3, r2
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2164      	movs	r1, #100	; 0x64
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	3332      	adds	r3, #50	; 0x32
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <UART_SetConfig+0x4e4>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4422      	add	r2, r4
 8002580:	609a      	str	r2, [r3, #8]
}
 8002582:	bf00      	nop
 8002584:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002588:	46bd      	mov	sp, r7
 800258a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258e:	bf00      	nop
 8002590:	51eb851f 	.word	0x51eb851f

08002594 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80025a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a6:	2b84      	cmp	r3, #132	; 0x84
 80025a8:	d005      	beq.n	80025b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80025aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4413      	add	r3, r2
 80025b2:	3303      	adds	r3, #3
 80025b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80025c8:	f000 feb6 	bl	8003338 <vTaskStartScheduler>
  
  return osOK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d4:	b089      	sub	sp, #36	; 0x24
 80025d6:	af04      	add	r7, sp, #16
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <osThreadCreate+0x54>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01c      	beq.n	8002626 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685c      	ldr	r4, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681d      	ldr	r5, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691e      	ldr	r6, [r3, #16]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ffc8 	bl	8002594 <makeFreeRtosPriority>
 8002604:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800260e:	9202      	str	r2, [sp, #8]
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	9100      	str	r1, [sp, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4632      	mov	r2, r6
 8002618:	4629      	mov	r1, r5
 800261a:	4620      	mov	r0, r4
 800261c:	f000 fcbc 	bl	8002f98 <xTaskCreateStatic>
 8002620:	4603      	mov	r3, r0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e01c      	b.n	8002660 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685c      	ldr	r4, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002632:	b29e      	uxth	r6, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ffaa 	bl	8002594 <makeFreeRtosPriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	9200      	str	r2, [sp, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	4632      	mov	r2, r6
 800264e:	4629      	mov	r1, r5
 8002650:	4620      	mov	r0, r4
 8002652:	f000 fcfe 	bl	8003052 <xTaskCreate>
 8002656:	4603      	mov	r3, r0
 8002658:	2b01      	cmp	r3, #1
 800265a:	d001      	beq.n	8002660 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002660:	68fb      	ldr	r3, [r7, #12]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800266a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <osDelay+0x16>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	e000      	b.n	8002682 <osDelay+0x18>
 8002680:	2301      	movs	r3, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fe24 	bl	80032d0 <vTaskDelay>
  
  return osOK;
 8002688:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f103 0208 	add.w	r2, r3, #8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f103 0208 	add.w	r2, r3, #8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f103 0208 	add.w	r2, r3, #8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	601a      	str	r2, [r3, #0]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274a:	d103      	bne.n	8002754 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	e00c      	b.n	800276e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3308      	adds	r3, #8
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	e002      	b.n	8002762 <vListInsert+0x2e>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d2f6      	bcs.n	800275c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	601a      	str	r2, [r3, #0]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6892      	ldr	r2, [r2, #8]
 80027bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6852      	ldr	r2, [r2, #4]
 80027c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d103      	bne.n	80027da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1e5a      	subs	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002826:	f001 fce5 	bl	80041f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	68f9      	ldr	r1, [r7, #12]
 8002834:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	441a      	add	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	3b01      	subs	r3, #1
 8002858:	68f9      	ldr	r1, [r7, #12]
 800285a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	441a      	add	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	22ff      	movs	r2, #255	; 0xff
 800286a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	22ff      	movs	r2, #255	; 0xff
 8002872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d114      	bne.n	80028a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01a      	beq.n	80028ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3310      	adds	r3, #16
 8002888:	4618      	mov	r0, r3
 800288a:	f000 ffa7 	bl	80037dc <xTaskRemoveFromEventList>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d012      	beq.n	80028ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <xQueueGenericReset+0xcc>)
 8002896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	e009      	b.n	80028ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3310      	adds	r3, #16
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fef1 	bl	8002692 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3324      	adds	r3, #36	; 0x24
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff feec 	bl	8002692 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028ba:	f001 fccb 	bl	8004254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028be:	2301      	movs	r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	4613      	mov	r3, r2
 80028d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	613b      	str	r3, [r7, #16]
}
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3348      	adds	r3, #72	; 0x48
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fd57 	bl	80043b8 <pvPortMalloc>
 800290a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d011      	beq.n	8002936 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3348      	adds	r3, #72	; 0x48
 800291a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002924:	79fa      	ldrb	r2, [r7, #7]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f805 	bl	8002940 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002936:	69bb      	ldr	r3, [r7, #24]
	}
 8002938:	4618      	mov	r0, r3
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e002      	b.n	8002962 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800296e:	2101      	movs	r1, #1
 8002970:	69b8      	ldr	r0, [r7, #24]
 8002972:	f7ff ff43 	bl	80027fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08e      	sub	sp, #56	; 0x38
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800298e:	2300      	movs	r3, #0
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericSend+0x32>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <xQueueGenericSend+0x40>
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <xQueueGenericSend+0x44>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <xQueueGenericSend+0x46>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <xQueueGenericSend+0x60>
	__asm volatile
 80029ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029dc:	bf00      	nop
 80029de:	e7fe      	b.n	80029de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d103      	bne.n	80029ee <xQueueGenericSend+0x6e>
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <xQueueGenericSend+0x72>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <xQueueGenericSend+0x74>
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <xQueueGenericSend+0x8e>
	__asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	623b      	str	r3, [r7, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	e7fe      	b.n	8002a0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a0e:	f001 f8a1 	bl	8003b54 <xTaskGetSchedulerState>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <xQueueGenericSend+0x9e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <xQueueGenericSend+0xa2>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <xQueueGenericSend+0xa4>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <xQueueGenericSend+0xbe>
	__asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	61fb      	str	r3, [r7, #28]
}
 8002a3a:	bf00      	nop
 8002a3c:	e7fe      	b.n	8002a3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a3e:	f001 fbd9 	bl	80041f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <xQueueGenericSend+0xd4>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d129      	bne.n	8002aa8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a5a:	f000 f9b3 	bl	8002dc4 <prvCopyDataToQueue>
 8002a5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d010      	beq.n	8002a8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	3324      	adds	r3, #36	; 0x24
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 feb5 	bl	80037dc <xTaskRemoveFromEventList>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <xQueueGenericSend+0x1f8>)
 8002a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	e00a      	b.n	8002aa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a90:	4b39      	ldr	r3, [pc, #228]	; (8002b78 <xQueueGenericSend+0x1f8>)
 8002a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002aa0:	f001 fbd8 	bl	8004254 <vPortExitCritical>
				return pdPASS;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e063      	b.n	8002b70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aae:	f001 fbd1 	bl	8004254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e05c      	b.n	8002b70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 feed 	bl	80038a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aca:	f001 fbc3 	bl	8004254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ace:	f000 fc93 	bl	80033f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ad2:	f001 fb8f 	bl	80041f4 <vPortEnterCritical>
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae2:	d103      	bne.n	8002aec <xQueueGenericSend+0x16c>
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af8:	d103      	bne.n	8002b02 <xQueueGenericSend+0x182>
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b02:	f001 fba7 	bl	8004254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b06:	1d3a      	adds	r2, r7, #4
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fedc 	bl	80038cc <xTaskCheckForTimeOut>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d124      	bne.n	8002b64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b1c:	f000 fa24 	bl	8002f68 <prvIsQueueFull>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d018      	beq.n	8002b58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	3310      	adds	r3, #16
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fe30 	bl	8003794 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b36:	f000 f9af 	bl	8002e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b3a:	f000 fc6b 	bl	8003414 <xTaskResumeAll>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f47f af7c 	bne.w	8002a3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <xQueueGenericSend+0x1f8>)
 8002b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	e772      	b.n	8002a3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b5a:	f000 f99d 	bl	8002e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b5e:	f000 fc59 	bl	8003414 <xTaskResumeAll>
 8002b62:	e76c      	b.n	8002a3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b66:	f000 f997 	bl	8002e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b6a:	f000 fc53 	bl	8003414 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3738      	adds	r7, #56	; 0x38
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08e      	sub	sp, #56	; 0x38
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	623b      	str	r3, [r7, #32]
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	61fb      	str	r3, [r7, #28]
}
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bcc:	f000 ffc2 	bl	8003b54 <xTaskGetSchedulerState>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <xQueueSemaphoreTake+0x60>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <xQueueSemaphoreTake+0x64>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <xQueueSemaphoreTake+0x66>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	61bb      	str	r3, [r7, #24]
}
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bfc:	f001 fafa 	bl	80041f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d024      	beq.n	8002c56 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002c1c:	f001 f942 	bl	8003ea4 <pvTaskIncrementMutexHeldCount>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00f      	beq.n	8002c4e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	3310      	adds	r3, #16
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fdd2 	bl	80037dc <xTaskRemoveFromEventList>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c3e:	4b54      	ldr	r3, [pc, #336]	; (8002d90 <xQueueSemaphoreTake+0x214>)
 8002c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c4e:	f001 fb01 	bl	8004254 <vPortExitCritical>
				return pdPASS;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e097      	b.n	8002d86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d111      	bne.n	8002c80 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	617b      	str	r3, [r7, #20]
}
 8002c74:	bf00      	nop
 8002c76:	e7fe      	b.n	8002c76 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002c78:	f001 faec 	bl	8004254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e082      	b.n	8002d86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fe08 	bl	80038a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c94:	f001 fade 	bl	8004254 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c98:	f000 fbae 	bl	80033f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c9c:	f001 faaa 	bl	80041f4 <vPortEnterCritical>
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cac:	d103      	bne.n	8002cb6 <xQueueSemaphoreTake+0x13a>
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc2:	d103      	bne.n	8002ccc <xQueueSemaphoreTake+0x150>
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ccc:	f001 fac2 	bl	8004254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cd0:	463a      	mov	r2, r7
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fdf7 	bl	80038cc <xTaskCheckForTimeOut>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d132      	bne.n	8002d4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ce6:	f000 f929 	bl	8002f3c <prvIsQueueEmpty>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d026      	beq.n	8002d3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002cf8:	f001 fa7c 	bl	80041f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 ff45 	bl	8003b90 <xTaskPriorityInherit>
 8002d06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002d08:	f001 faa4 	bl	8004254 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	3324      	adds	r3, #36	; 0x24
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fd3d 	bl	8003794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d1c:	f000 f8bc 	bl	8002e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d20:	f000 fb78 	bl	8003414 <xTaskResumeAll>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f47f af68 	bne.w	8002bfc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <xQueueSemaphoreTake+0x214>)
 8002d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	e75e      	b.n	8002bfc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002d3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d40:	f000 f8aa 	bl	8002e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d44:	f000 fb66 	bl	8003414 <xTaskResumeAll>
 8002d48:	e758      	b.n	8002bfc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002d4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d4c:	f000 f8a4 	bl	8002e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d50:	f000 fb60 	bl	8003414 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d56:	f000 f8f1 	bl	8002f3c <prvIsQueueEmpty>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f43f af4d 	beq.w	8002bfc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002d68:	f001 fa44 	bl	80041f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d6e:	f000 f811 	bl	8002d94 <prvGetDisinheritPriorityAfterTimeout>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 f804 	bl	8003d88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002d80:	f001 fa68 	bl	8004254 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3738      	adds	r7, #56	; 0x38
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000ed04 	.word	0xe000ed04

08002d94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e001      	b.n	8002db6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002db6:	68fb      	ldr	r3, [r7, #12]
	}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d14d      	bne.n	8002e86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 ff44 	bl	8003c7c <xTaskPriorityDisinherit>
 8002df4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	e043      	b.n	8002e86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d119      	bne.n	8002e38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6858      	ldr	r0, [r3, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	f001 fce6 	bl	80047e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	441a      	add	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d32b      	bcc.n	8002e86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	e026      	b.n	8002e86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68d8      	ldr	r0, [r3, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	461a      	mov	r2, r3
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	f001 fccc 	bl	80047e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	425b      	negs	r3, r3
 8002e52:	441a      	add	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d207      	bcs.n	8002e74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	425b      	negs	r3, r3
 8002e6e:	441a      	add	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d105      	bne.n	8002e86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e8e:	697b      	ldr	r3, [r7, #20]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ea0:	f001 f9a8 	bl	80041f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eac:	e011      	b.n	8002ed2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d012      	beq.n	8002edc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3324      	adds	r3, #36	; 0x24
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fc8e 	bl	80037dc <xTaskRemoveFromEventList>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ec6:	f000 fd63 	bl	8003990 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	dce9      	bgt.n	8002eae <prvUnlockQueue+0x16>
 8002eda:	e000      	b.n	8002ede <prvUnlockQueue+0x46>
					break;
 8002edc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	22ff      	movs	r2, #255	; 0xff
 8002ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ee6:	f001 f9b5 	bl	8004254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002eea:	f001 f983 	bl	80041f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ef6:	e011      	b.n	8002f1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d012      	beq.n	8002f26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3310      	adds	r3, #16
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fc69 	bl	80037dc <xTaskRemoveFromEventList>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f10:	f000 fd3e 	bl	8003990 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f14:	7bbb      	ldrb	r3, [r7, #14]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	dce9      	bgt.n	8002ef8 <prvUnlockQueue+0x60>
 8002f24:	e000      	b.n	8002f28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	22ff      	movs	r2, #255	; 0xff
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f30:	f001 f990 	bl	8004254 <vPortExitCritical>
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f44:	f001 f956 	bl	80041f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e001      	b.n	8002f5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f5a:	f001 f97b 	bl	8004254 <vPortExitCritical>

	return xReturn;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f70:	f001 f940 	bl	80041f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d102      	bne.n	8002f86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e001      	b.n	8002f8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f8a:	f001 f963 	bl	8004254 <vPortExitCritical>

	return xReturn;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08e      	sub	sp, #56	; 0x38
 8002f9c:	af04      	add	r7, sp, #16
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	623b      	str	r3, [r7, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <xTaskCreateStatic+0x46>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61fb      	str	r3, [r7, #28]
}
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fde:	2354      	movs	r3, #84	; 0x54
 8002fe0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b54      	cmp	r3, #84	; 0x54
 8002fe6:	d00a      	beq.n	8002ffe <xTaskCreateStatic+0x66>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	61bb      	str	r3, [r7, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ffe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01e      	beq.n	8003044 <xTaskCreateStatic+0xac>
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003014:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	2202      	movs	r2, #2
 800301a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800301e:	2300      	movs	r3, #0
 8003020:	9303      	str	r3, [sp, #12]
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	9302      	str	r3, [sp, #8]
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f850 	bl	80030dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800303c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800303e:	f000 f8dd 	bl	80031fc <prvAddNewTaskToReadyList>
 8003042:	e001      	b.n	8003048 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003048:	697b      	ldr	r3, [r7, #20]
	}
 800304a:	4618      	mov	r0, r3
 800304c:	3728      	adds	r7, #40	; 0x28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003052:	b580      	push	{r7, lr}
 8003054:	b08c      	sub	sp, #48	; 0x30
 8003056:	af04      	add	r7, sp, #16
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f001 f9a6 	bl	80043b8 <pvPortMalloc>
 800306c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00e      	beq.n	8003092 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003074:	2054      	movs	r0, #84	; 0x54
 8003076:	f001 f99f 	bl	80043b8 <pvPortMalloc>
 800307a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
 8003088:	e005      	b.n	8003096 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800308a:	6978      	ldr	r0, [r7, #20]
 800308c:	f001 fa60 	bl	8004550 <vPortFree>
 8003090:	e001      	b.n	8003096 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d017      	beq.n	80030cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	2300      	movs	r3, #0
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f80e 	bl	80030dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030c0:	69f8      	ldr	r0, [r7, #28]
 80030c2:	f000 f89b 	bl	80031fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e002      	b.n	80030d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030d2:	69bb      	ldr	r3, [r7, #24]
	}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	461a      	mov	r2, r3
 80030f4:	21a5      	movs	r1, #165	; 0xa5
 80030f6:	f001 fb81 	bl	80047fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003104:	3b01      	subs	r3, #1
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f023 0307 	bic.w	r3, r3, #7
 8003112:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <prvInitialiseNewTask+0x58>
	__asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	617b      	str	r3, [r7, #20]
}
 8003130:	bf00      	nop
 8003132:	e7fe      	b.n	8003132 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01f      	beq.n	800317a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e012      	b.n	8003166 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	7819      	ldrb	r1, [r3, #0]
 8003148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	3334      	adds	r3, #52	; 0x34
 8003150:	460a      	mov	r2, r1
 8003152:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d9e9      	bls.n	8003140 <prvInitialiseNewTask+0x64>
 800316c:	e000      	b.n	8003170 <prvInitialiseNewTask+0x94>
			{
				break;
 800316e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003178:	e003      	b.n	8003182 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2b06      	cmp	r3, #6
 8003186:	d901      	bls.n	800318c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003188:	2306      	movs	r3, #6
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003196:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	2200      	movs	r2, #0
 800319c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	3304      	adds	r3, #4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fa95 	bl	80026d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	3318      	adds	r3, #24
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fa90 	bl	80026d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	f1c3 0207 	rsb	r2, r3, #7
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	2200      	movs	r2, #0
 80031cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	69b8      	ldr	r0, [r7, #24]
 80031dc:	f000 fedc 	bl	8003f98 <pxPortInitialiseStack>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031f2:	bf00      	nop
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003204:	f000 fff6 	bl	80041f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003208:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <prvAddNewTaskToReadyList+0xb8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	4a29      	ldr	r2, [pc, #164]	; (80032b4 <prvAddNewTaskToReadyList+0xb8>)
 8003210:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003212:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800321a:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003220:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <prvAddNewTaskToReadyList+0xb8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d110      	bne.n	800324a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003228:	f000 fbd6 	bl	80039d8 <prvInitialiseTaskLists>
 800322c:	e00d      	b.n	800324a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <prvAddNewTaskToReadyList+0xc0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	429a      	cmp	r2, r3
 8003242:	d802      	bhi.n	800324a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <prvAddNewTaskToReadyList+0xc4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <prvAddNewTaskToReadyList+0xc4>)
 8003252:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2201      	movs	r2, #1
 800325a:	409a      	lsls	r2, r3
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <prvAddNewTaskToReadyList+0xc8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4313      	orrs	r3, r2
 8003262:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <prvAddNewTaskToReadyList+0xc8>)
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <prvAddNewTaskToReadyList+0xcc>)
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	4619      	mov	r1, r3
 800327c:	4610      	mov	r0, r2
 800327e:	f7ff fa35 	bl	80026ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003282:	f000 ffe7 	bl	8004254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <prvAddNewTaskToReadyList+0xc0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	429a      	cmp	r2, r3
 800329a:	d207      	bcs.n	80032ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <prvAddNewTaskToReadyList+0xd0>)
 800329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000448 	.word	0x20000448
 80032b8:	20000348 	.word	0x20000348
 80032bc:	20000454 	.word	0x20000454
 80032c0:	20000464 	.word	0x20000464
 80032c4:	20000450 	.word	0x20000450
 80032c8:	2000034c 	.word	0x2000034c
 80032cc:	e000ed04 	.word	0xe000ed04

080032d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d017      	beq.n	8003312 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <vTaskDelay+0x60>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <vTaskDelay+0x30>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	60bb      	str	r3, [r7, #8]
}
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003300:	f000 f87a 	bl	80033f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003304:	2100      	movs	r1, #0
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fde0 	bl	8003ecc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800330c:	f000 f882 	bl	8003414 <xTaskResumeAll>
 8003310:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <vTaskDelay+0x64>)
 800331a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000470 	.word	0x20000470
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003346:	463a      	mov	r2, r7
 8003348:	1d39      	adds	r1, r7, #4
 800334a:	f107 0308 	add.w	r3, r7, #8
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f940 	bl	80005d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	9202      	str	r2, [sp, #8]
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	2300      	movs	r3, #0
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	460a      	mov	r2, r1
 8003366:	491e      	ldr	r1, [pc, #120]	; (80033e0 <vTaskStartScheduler+0xa8>)
 8003368:	481e      	ldr	r0, [pc, #120]	; (80033e4 <vTaskStartScheduler+0xac>)
 800336a:	f7ff fe15 	bl	8002f98 <xTaskCreateStatic>
 800336e:	4603      	mov	r3, r0
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <vTaskStartScheduler+0xb0>)
 8003372:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003374:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <vTaskStartScheduler+0xb0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800337c:	2301      	movs	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e001      	b.n	8003386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d116      	bne.n	80033ba <vTaskStartScheduler+0x82>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	613b      	str	r3, [r7, #16]
}
 800339e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <vTaskStartScheduler+0xb4>)
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <vTaskStartScheduler+0xb8>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <vTaskStartScheduler+0xbc>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033b4:	f000 fe7c 	bl	80040b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033b8:	e00e      	b.n	80033d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c0:	d10a      	bne.n	80033d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60fb      	str	r3, [r7, #12]
}
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <vTaskStartScheduler+0x9e>
}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	08005258 	.word	0x08005258
 80033e4:	080039a9 	.word	0x080039a9
 80033e8:	2000046c 	.word	0x2000046c
 80033ec:	20000468 	.word	0x20000468
 80033f0:	20000454 	.word	0x20000454
 80033f4:	2000044c 	.word	0x2000044c

080033f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <vTaskSuspendAll+0x18>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	4a03      	ldr	r2, [pc, #12]	; (8003410 <vTaskSuspendAll+0x18>)
 8003404:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	20000470 	.word	0x20000470

08003414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003422:	4b41      	ldr	r3, [pc, #260]	; (8003528 <xTaskResumeAll+0x114>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <xTaskResumeAll+0x2c>
	__asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	603b      	str	r3, [r7, #0]
}
 800343c:	bf00      	nop
 800343e:	e7fe      	b.n	800343e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003440:	f000 fed8 	bl	80041f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003444:	4b38      	ldr	r3, [pc, #224]	; (8003528 <xTaskResumeAll+0x114>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3b01      	subs	r3, #1
 800344a:	4a37      	ldr	r2, [pc, #220]	; (8003528 <xTaskResumeAll+0x114>)
 800344c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344e:	4b36      	ldr	r3, [pc, #216]	; (8003528 <xTaskResumeAll+0x114>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d161      	bne.n	800351a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003456:	4b35      	ldr	r3, [pc, #212]	; (800352c <xTaskResumeAll+0x118>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d05d      	beq.n	800351a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800345e:	e02e      	b.n	80034be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003460:	4b33      	ldr	r3, [pc, #204]	; (8003530 <xTaskResumeAll+0x11c>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3318      	adds	r3, #24
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f99a 	bl	80027a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3304      	adds	r3, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff f995 	bl	80027a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <xTaskResumeAll+0x120>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	4a2a      	ldr	r2, [pc, #168]	; (8003534 <xTaskResumeAll+0x120>)
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4a27      	ldr	r2, [pc, #156]	; (8003538 <xTaskResumeAll+0x124>)
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7ff f921 	bl	80026ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ae:	4b23      	ldr	r3, [pc, #140]	; (800353c <xTaskResumeAll+0x128>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80034b8:	4b21      	ldr	r3, [pc, #132]	; (8003540 <xTaskResumeAll+0x12c>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034be:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <xTaskResumeAll+0x11c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cc      	bne.n	8003460 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034cc:	f000 fb22 	bl	8003b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <xTaskResumeAll+0x130>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d010      	beq.n	80034fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034dc:	f000 f846 	bl	800356c <xTaskIncrementTick>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <xTaskResumeAll+0x12c>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f1      	bne.n	80034dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <xTaskResumeAll+0x130>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <xTaskResumeAll+0x12c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <xTaskResumeAll+0x134>)
 800350c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800351a:	f000 fe9b 	bl	8004254 <vPortExitCritical>

	return xAlreadyYielded;
 800351e:	68bb      	ldr	r3, [r7, #8]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000470 	.word	0x20000470
 800352c:	20000448 	.word	0x20000448
 8003530:	20000408 	.word	0x20000408
 8003534:	20000450 	.word	0x20000450
 8003538:	2000034c 	.word	0x2000034c
 800353c:	20000348 	.word	0x20000348
 8003540:	2000045c 	.word	0x2000045c
 8003544:	20000458 	.word	0x20000458
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <xTaskGetTickCount+0x1c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003558:	687b      	ldr	r3, [r7, #4]
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	2000044c 	.word	0x2000044c

0800356c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003576:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <xTaskIncrementTick+0x144>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 808e 	bne.w	800369c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003580:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <xTaskIncrementTick+0x148>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3301      	adds	r3, #1
 8003586:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003588:	4a4a      	ldr	r2, [pc, #296]	; (80036b4 <xTaskIncrementTick+0x148>)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d120      	bne.n	80035d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003594:	4b48      	ldr	r3, [pc, #288]	; (80036b8 <xTaskIncrementTick+0x14c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	603b      	str	r3, [r7, #0]
}
 80035b0:	bf00      	nop
 80035b2:	e7fe      	b.n	80035b2 <xTaskIncrementTick+0x46>
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <xTaskIncrementTick+0x14c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b40      	ldr	r3, [pc, #256]	; (80036bc <xTaskIncrementTick+0x150>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a3e      	ldr	r2, [pc, #248]	; (80036b8 <xTaskIncrementTick+0x14c>)
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4a3e      	ldr	r2, [pc, #248]	; (80036bc <xTaskIncrementTick+0x150>)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <xTaskIncrementTick+0x154>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	4a3c      	ldr	r2, [pc, #240]	; (80036c0 <xTaskIncrementTick+0x154>)
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	f000 fa9f 	bl	8003b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <xTaskIncrementTick+0x158>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d348      	bcc.n	8003672 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035e0:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <xTaskIncrementTick+0x14c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <xTaskIncrementTick+0x158>)
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035f0:	601a      	str	r2, [r3, #0]
					break;
 80035f2:	e03e      	b.n	8003672 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f4:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <xTaskIncrementTick+0x14c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	429a      	cmp	r2, r3
 800360a:	d203      	bcs.n	8003614 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800360c:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <xTaskIncrementTick+0x158>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003612:	e02e      	b.n	8003672 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	3304      	adds	r3, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff f8c4 	bl	80027a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	2b00      	cmp	r3, #0
 8003624:	d004      	beq.n	8003630 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3318      	adds	r3, #24
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff f8bb 	bl	80027a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <xTaskIncrementTick+0x15c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	4a22      	ldr	r2, [pc, #136]	; (80036c8 <xTaskIncrementTick+0x15c>)
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <xTaskIncrementTick+0x160>)
 8003650:	441a      	add	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7ff f847 	bl	80026ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <xTaskIncrementTick+0x164>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	429a      	cmp	r2, r3
 800366a:	d3b9      	bcc.n	80035e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800366c:	2301      	movs	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003670:	e7b6      	b.n	80035e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <xTaskIncrementTick+0x164>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	4914      	ldr	r1, [pc, #80]	; (80036cc <xTaskIncrementTick+0x160>)
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d901      	bls.n	800368e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800368a:	2301      	movs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <xTaskIncrementTick+0x168>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003696:	2301      	movs	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	e004      	b.n	80036a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <xTaskIncrementTick+0x16c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <xTaskIncrementTick+0x16c>)
 80036a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80036a6:	697b      	ldr	r3, [r7, #20]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000470 	.word	0x20000470
 80036b4:	2000044c 	.word	0x2000044c
 80036b8:	20000400 	.word	0x20000400
 80036bc:	20000404 	.word	0x20000404
 80036c0:	20000460 	.word	0x20000460
 80036c4:	20000468 	.word	0x20000468
 80036c8:	20000450 	.word	0x20000450
 80036cc:	2000034c 	.word	0x2000034c
 80036d0:	20000348 	.word	0x20000348
 80036d4:	2000045c 	.word	0x2000045c
 80036d8:	20000458 	.word	0x20000458

080036dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036e2:	4b27      	ldr	r3, [pc, #156]	; (8003780 <vTaskSwitchContext+0xa4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036ea:	4b26      	ldr	r3, [pc, #152]	; (8003784 <vTaskSwitchContext+0xa8>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036f0:	e03f      	b.n	8003772 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80036f2:	4b24      	ldr	r3, [pc, #144]	; (8003784 <vTaskSwitchContext+0xa8>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f8:	4b23      	ldr	r3, [pc, #140]	; (8003788 <vTaskSwitchContext+0xac>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003706:	7afb      	ldrb	r3, [r7, #11]
 8003708:	f1c3 031f 	rsb	r3, r3, #31
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	491f      	ldr	r1, [pc, #124]	; (800378c <vTaskSwitchContext+0xb0>)
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	607b      	str	r3, [r7, #4]
}
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <vTaskSwitchContext+0x5a>
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4a12      	ldr	r2, [pc, #72]	; (800378c <vTaskSwitchContext+0xb0>)
 8003744:	4413      	add	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	3308      	adds	r3, #8
 800375a:	429a      	cmp	r2, r3
 800375c:	d104      	bne.n	8003768 <vTaskSwitchContext+0x8c>
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4a08      	ldr	r2, [pc, #32]	; (8003790 <vTaskSwitchContext+0xb4>)
 8003770:	6013      	str	r3, [r2, #0]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000470 	.word	0x20000470
 8003784:	2000045c 	.word	0x2000045c
 8003788:	20000450 	.word	0x20000450
 800378c:	2000034c 	.word	0x2000034c
 8003790:	20000348 	.word	0x20000348

08003794 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	60fb      	str	r3, [r7, #12]
}
 80037b6:	bf00      	nop
 80037b8:	e7fe      	b.n	80037b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <vTaskPlaceOnEventList+0x44>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3318      	adds	r3, #24
 80037c0:	4619      	mov	r1, r3
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fe ffb6 	bl	8002734 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037c8:	2101      	movs	r1, #1
 80037ca:	6838      	ldr	r0, [r7, #0]
 80037cc:	f000 fb7e 	bl	8003ecc <prvAddCurrentTaskToDelayedList>
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000348 	.word	0x20000348

080037dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60fb      	str	r3, [r7, #12]
}
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	3318      	adds	r3, #24
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe ffca 	bl	80027a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <xTaskRemoveFromEventList+0xac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11c      	bne.n	8003854 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3304      	adds	r3, #4
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe ffc1 	bl	80027a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <xTaskRemoveFromEventList+0xb0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <xTaskRemoveFromEventList+0xb0>)
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <xTaskRemoveFromEventList+0xb4>)
 8003844:	441a      	add	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	3304      	adds	r3, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7fe ff4d 	bl	80026ec <vListInsertEnd>
 8003852:	e005      	b.n	8003860 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	3318      	adds	r3, #24
 8003858:	4619      	mov	r1, r3
 800385a:	480e      	ldr	r0, [pc, #56]	; (8003894 <xTaskRemoveFromEventList+0xb8>)
 800385c:	f7fe ff46 	bl	80026ec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <xTaskRemoveFromEventList+0xbc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	429a      	cmp	r2, r3
 800386c:	d905      	bls.n	800387a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800386e:	2301      	movs	r3, #1
 8003870:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <xTaskRemoveFromEventList+0xc0>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e001      	b.n	800387e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800387e:	697b      	ldr	r3, [r7, #20]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000470 	.word	0x20000470
 800388c:	20000450 	.word	0x20000450
 8003890:	2000034c 	.word	0x2000034c
 8003894:	20000408 	.word	0x20000408
 8003898:	20000348 	.word	0x20000348
 800389c:	2000045c 	.word	0x2000045c

080038a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <vTaskInternalSetTimeOutState+0x24>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <vTaskInternalSetTimeOutState+0x28>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	605a      	str	r2, [r3, #4]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	20000460 	.word	0x20000460
 80038c8:	2000044c 	.word	0x2000044c

080038cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	613b      	str	r3, [r7, #16]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60fb      	str	r3, [r7, #12]
}
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800390e:	f000 fc71 	bl	80041f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003912:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <xTaskCheckForTimeOut+0xbc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800392a:	d102      	bne.n	8003932 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e023      	b.n	800397a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <xTaskCheckForTimeOut+0xc0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d007      	beq.n	800394e <xTaskCheckForTimeOut+0x82>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	e015      	b.n	800397a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	429a      	cmp	r2, r3
 8003956:	d20b      	bcs.n	8003970 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff9b 	bl	80038a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	e004      	b.n	800397a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003976:	2301      	movs	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800397a:	f000 fc6b 	bl	8004254 <vPortExitCritical>

	return xReturn;
 800397e:	69fb      	ldr	r3, [r7, #28]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2000044c 	.word	0x2000044c
 800398c:	20000460 	.word	0x20000460

08003990 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <vTaskMissedYield+0x14>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	2000045c 	.word	0x2000045c

080039a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039b0:	f000 f852 	bl	8003a58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <prvIdleTask+0x28>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d9f9      	bls.n	80039b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <prvIdleTask+0x2c>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039cc:	e7f0      	b.n	80039b0 <prvIdleTask+0x8>
 80039ce:	bf00      	nop
 80039d0:	2000034c 	.word	0x2000034c
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	e00c      	b.n	80039fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <prvInitialiseTaskLists+0x60>)
 80039f0:	4413      	add	r3, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fe4d 	bl	8002692 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3301      	adds	r3, #1
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b06      	cmp	r3, #6
 8003a02:	d9ef      	bls.n	80039e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a04:	480d      	ldr	r0, [pc, #52]	; (8003a3c <prvInitialiseTaskLists+0x64>)
 8003a06:	f7fe fe44 	bl	8002692 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a0a:	480d      	ldr	r0, [pc, #52]	; (8003a40 <prvInitialiseTaskLists+0x68>)
 8003a0c:	f7fe fe41 	bl	8002692 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a10:	480c      	ldr	r0, [pc, #48]	; (8003a44 <prvInitialiseTaskLists+0x6c>)
 8003a12:	f7fe fe3e 	bl	8002692 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a16:	480c      	ldr	r0, [pc, #48]	; (8003a48 <prvInitialiseTaskLists+0x70>)
 8003a18:	f7fe fe3b 	bl	8002692 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a1c:	480b      	ldr	r0, [pc, #44]	; (8003a4c <prvInitialiseTaskLists+0x74>)
 8003a1e:	f7fe fe38 	bl	8002692 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <prvInitialiseTaskLists+0x78>)
 8003a24:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <prvInitialiseTaskLists+0x64>)
 8003a26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <prvInitialiseTaskLists+0x7c>)
 8003a2a:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <prvInitialiseTaskLists+0x68>)
 8003a2c:	601a      	str	r2, [r3, #0]
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	2000034c 	.word	0x2000034c
 8003a3c:	200003d8 	.word	0x200003d8
 8003a40:	200003ec 	.word	0x200003ec
 8003a44:	20000408 	.word	0x20000408
 8003a48:	2000041c 	.word	0x2000041c
 8003a4c:	20000434 	.word	0x20000434
 8003a50:	20000400 	.word	0x20000400
 8003a54:	20000404 	.word	0x20000404

08003a58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a5e:	e019      	b.n	8003a94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a60:	f000 fbc8 	bl	80041f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <prvCheckTasksWaitingTermination+0x50>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fe98 	bl	80027a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <prvCheckTasksWaitingTermination+0x54>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <prvCheckTasksWaitingTermination+0x54>)
 8003a7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <prvCheckTasksWaitingTermination+0x58>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <prvCheckTasksWaitingTermination+0x58>)
 8003a88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a8a:	f000 fbe3 	bl	8004254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f810 	bl	8003ab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <prvCheckTasksWaitingTermination+0x58>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e1      	bne.n	8003a60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000041c 	.word	0x2000041c
 8003aac:	20000448 	.word	0x20000448
 8003ab0:	20000430 	.word	0x20000430

08003ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fd40 	bl	8004550 <vPortFree>
				vPortFree( pxTCB );
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fd3d 	bl	8004550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ad6:	e018      	b.n	8003b0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d103      	bne.n	8003aea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fd34 	bl	8004550 <vPortFree>
	}
 8003ae8:	e00f      	b.n	8003b0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d00a      	beq.n	8003b0a <prvDeleteTCB+0x56>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <prvDeleteTCB+0x54>
	}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <prvResetNextTaskUnblockTime+0x38>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <prvResetNextTaskUnblockTime+0x3c>)
 8003b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b2c:	e008      	b.n	8003b40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <prvResetNextTaskUnblockTime+0x38>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <prvResetNextTaskUnblockTime+0x3c>)
 8003b3e:	6013      	str	r3, [r2, #0]
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	20000400 	.word	0x20000400
 8003b50:	20000468 	.word	0x20000468

08003b54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <xTaskGetSchedulerState+0x34>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b62:	2301      	movs	r3, #1
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	e008      	b.n	8003b7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <xTaskGetSchedulerState+0x38>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b70:	2302      	movs	r3, #2
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	e001      	b.n	8003b7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b7a:	687b      	ldr	r3, [r7, #4]
	}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	20000454 	.word	0x20000454
 8003b8c:	20000470 	.word	0x20000470

08003b90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d05e      	beq.n	8003c64 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003baa:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <xTaskPriorityInherit+0xe0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d24e      	bcs.n	8003c52 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	db06      	blt.n	8003bca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bbc:	4b2c      	ldr	r3, [pc, #176]	; (8003c70 <xTaskPriorityInherit+0xe0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	f1c3 0207 	rsb	r2, r3, #7
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6959      	ldr	r1, [r3, #20]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <xTaskPriorityInherit+0xe4>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	4299      	cmp	r1, r3
 8003be0:	d12f      	bne.n	8003c42 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fddd 	bl	80027a6 <uxListRemove>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <xTaskPriorityInherit+0xe8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4013      	ands	r3, r2
 8003c04:	4a1c      	ldr	r2, [pc, #112]	; (8003c78 <xTaskPriorityInherit+0xe8>)
 8003c06:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <xTaskPriorityInherit+0xe0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	2201      	movs	r2, #1
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <xTaskPriorityInherit+0xe8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <xTaskPriorityInherit+0xe8>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4a10      	ldr	r2, [pc, #64]	; (8003c74 <xTaskPriorityInherit+0xe4>)
 8003c32:	441a      	add	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f7fe fd56 	bl	80026ec <vListInsertEnd>
 8003c40:	e004      	b.n	8003c4c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <xTaskPriorityInherit+0xe0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e008      	b.n	8003c64 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <xTaskPriorityInherit+0xe0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d201      	bcs.n	8003c64 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c64:	68fb      	ldr	r3, [r7, #12]
	}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000348 	.word	0x20000348
 8003c74:	2000034c 	.word	0x2000034c
 8003c78:	20000450 	.word	0x20000450

08003c7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d06e      	beq.n	8003d70 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c92:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <xTaskPriorityDisinherit+0x100>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d00a      	beq.n	8003cb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60bb      	str	r3, [r7, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd4:	1e5a      	subs	r2, r3, #1
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d044      	beq.n	8003d70 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d140      	bne.n	8003d70 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fd57 	bl	80027a6 <uxListRemove>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d115      	bne.n	8003d2a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d02:	491f      	ldr	r1, [pc, #124]	; (8003d80 <xTaskPriorityDisinherit+0x104>)
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <xTaskPriorityDisinherit+0xae>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2201      	movs	r2, #1
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <xTaskPriorityDisinherit+0x108>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4013      	ands	r3, r2
 8003d26:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <xTaskPriorityDisinherit+0x108>)
 8003d28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	f1c3 0207 	rsb	r2, r3, #7
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	2201      	movs	r2, #1
 8003d44:	409a      	lsls	r2, r3
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <xTaskPriorityDisinherit+0x108>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	; (8003d84 <xTaskPriorityDisinherit+0x108>)
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <xTaskPriorityDisinherit+0x104>)
 8003d5e:	441a      	add	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f7fe fcc0 	bl	80026ec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d70:	697b      	ldr	r3, [r7, #20]
	}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000348 	.word	0x20000348
 8003d80:	2000034c 	.word	0x2000034c
 8003d84:	20000450 	.word	0x20000450

08003d88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d077      	beq.n	8003e90 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d902      	bls.n	8003dce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	e002      	b.n	8003dd4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d058      	beq.n	8003e90 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d153      	bne.n	8003e90 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10a      	bne.n	8003e08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60bb      	str	r3, [r7, #8]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	db04      	blt.n	8003e26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f1c3 0207 	rsb	r2, r3, #7
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	6959      	ldr	r1, [r3, #20]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003e36:	4413      	add	r3, r2
 8003e38:	4299      	cmp	r1, r3
 8003e3a:	d129      	bne.n	8003e90 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fcb0 	bl	80027a6 <uxListRemove>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	2201      	movs	r2, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003e60:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	2201      	movs	r2, #1
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003e82:	441a      	add	r2, r3
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7fe fc2e 	bl	80026ec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e90:	bf00      	nop
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000348 	.word	0x20000348
 8003e9c:	2000034c 	.word	0x2000034c
 8003ea0:	20000450 	.word	0x20000450

08003ea4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb6:	3201      	adds	r2, #1
 8003eb8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003eba:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
	}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	20000348 	.word	0x20000348

08003ecc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ed6:	4b29      	ldr	r3, [pc, #164]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003edc:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fc5f 	bl	80027a6 <uxListRemove>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43da      	mvns	r2, r3
 8003efc:	4b21      	ldr	r3, [pc, #132]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4013      	ands	r3, r2
 8003f02:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f0c:	d10a      	bne.n	8003f24 <prvAddCurrentTaskToDelayedList+0x58>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	481a      	ldr	r0, [pc, #104]	; (8003f88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f1e:	f7fe fbe5 	bl	80026ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f22:	e026      	b.n	8003f72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d209      	bcs.n	8003f50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f3c:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7fe fbf3 	bl	8002734 <vListInsert>
}
 8003f4e:	e010      	b.n	8003f72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f7fe fbe9 	bl	8002734 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d202      	bcs.n	8003f72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f6c:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6013      	str	r3, [r2, #0]
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000044c 	.word	0x2000044c
 8003f80:	20000348 	.word	0x20000348
 8003f84:	20000450 	.word	0x20000450
 8003f88:	20000434 	.word	0x20000434
 8003f8c:	20000404 	.word	0x20000404
 8003f90:	20000400 	.word	0x20000400
 8003f94:	20000468 	.word	0x20000468

08003f98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3b04      	subs	r3, #4
 8003fa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3b04      	subs	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f023 0201 	bic.w	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3b04      	subs	r3, #4
 8003fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fc8:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <pxPortInitialiseStack+0x64>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3b14      	subs	r3, #20
 8003fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3b04      	subs	r3, #4
 8003fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f06f 0202 	mvn.w	r2, #2
 8003fe6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b20      	subs	r3, #32
 8003fec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fee:	68fb      	ldr	r3, [r7, #12]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	08004001 	.word	0x08004001

08004000 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <prvTaskExitError+0x54>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004012:	d00a      	beq.n	800402a <prvTaskExitError+0x2a>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60fb      	str	r3, [r7, #12]
}
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <prvTaskExitError+0x28>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	60bb      	str	r3, [r7, #8]
}
 800403c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800403e:	bf00      	nop
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0fc      	beq.n	8004040 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004046:	bf00      	nop
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	2000000c 	.word	0x2000000c
	...

08004060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <pxCurrentTCBConst2>)
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	6808      	ldr	r0, [r1, #0]
 8004066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406a:	f380 8809 	msr	PSP, r0
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f380 8811 	msr	BASEPRI, r0
 800407a:	4770      	bx	lr
 800407c:	f3af 8000 	nop.w

08004080 <pxCurrentTCBConst2>:
 8004080:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop

08004088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004088:	4808      	ldr	r0, [pc, #32]	; (80040ac <prvPortStartFirstTask+0x24>)
 800408a:	6800      	ldr	r0, [r0, #0]
 800408c:	6800      	ldr	r0, [r0, #0]
 800408e:	f380 8808 	msr	MSP, r0
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f380 8814 	msr	CONTROL, r0
 800409a:	b662      	cpsie	i
 800409c:	b661      	cpsie	f
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	df00      	svc	0
 80040a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040aa:	bf00      	nop
 80040ac:	e000ed08 	.word	0xe000ed08

080040b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040b6:	4b46      	ldr	r3, [pc, #280]	; (80041d0 <xPortStartScheduler+0x120>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a46      	ldr	r2, [pc, #280]	; (80041d4 <xPortStartScheduler+0x124>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d10a      	bne.n	80040d6 <xPortStartScheduler+0x26>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	613b      	str	r3, [r7, #16]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040d6:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <xPortStartScheduler+0x120>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3f      	ldr	r2, [pc, #252]	; (80041d8 <xPortStartScheduler+0x128>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10a      	bne.n	80040f6 <xPortStartScheduler+0x46>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	60fb      	str	r3, [r7, #12]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040f6:	4b39      	ldr	r3, [pc, #228]	; (80041dc <xPortStartScheduler+0x12c>)
 80040f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	22ff      	movs	r2, #255	; 0xff
 8004106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <xPortStartScheduler+0x130>)
 800411c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800411e:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <xPortStartScheduler+0x134>)
 8004120:	2207      	movs	r2, #7
 8004122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004124:	e009      	b.n	800413a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004126:	4b2f      	ldr	r3, [pc, #188]	; (80041e4 <xPortStartScheduler+0x134>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3b01      	subs	r3, #1
 800412c:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <xPortStartScheduler+0x134>)
 800412e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004142:	2b80      	cmp	r3, #128	; 0x80
 8004144:	d0ef      	beq.n	8004126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004146:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <xPortStartScheduler+0x134>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1c3 0307 	rsb	r3, r3, #7
 800414e:	2b04      	cmp	r3, #4
 8004150:	d00a      	beq.n	8004168 <xPortStartScheduler+0xb8>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	60bb      	str	r3, [r7, #8]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <xPortStartScheduler+0x134>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <xPortStartScheduler+0x134>)
 8004170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <xPortStartScheduler+0x134>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800417a:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <xPortStartScheduler+0x134>)
 800417c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <xPortStartScheduler+0x138>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <xPortStartScheduler+0x138>)
 800418c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <xPortStartScheduler+0x138>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <xPortStartScheduler+0x138>)
 8004198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800419c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800419e:	f000 f8dd 	bl	800435c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <xPortStartScheduler+0x13c>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041a8:	f000 f8fc 	bl	80043a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <xPortStartScheduler+0x140>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0f      	ldr	r2, [pc, #60]	; (80041f0 <xPortStartScheduler+0x140>)
 80041b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041b8:	f7ff ff66 	bl	8004088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041bc:	f7ff fa8e 	bl	80036dc <vTaskSwitchContext>
	prvTaskExitError();
 80041c0:	f7ff ff1e 	bl	8004000 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	e000ed00 	.word	0xe000ed00
 80041d4:	410fc271 	.word	0x410fc271
 80041d8:	410fc270 	.word	0x410fc270
 80041dc:	e000e400 	.word	0xe000e400
 80041e0:	20000474 	.word	0x20000474
 80041e4:	20000478 	.word	0x20000478
 80041e8:	e000ed20 	.word	0xe000ed20
 80041ec:	2000000c 	.word	0x2000000c
 80041f0:	e000ef34 	.word	0xe000ef34

080041f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	607b      	str	r3, [r7, #4]
}
 800420c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <vPortEnterCritical+0x58>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <vPortEnterCritical+0x58>)
 8004216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <vPortEnterCritical+0x58>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10f      	bne.n	8004240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <vPortEnterCritical+0x5c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <vPortEnterCritical+0x4c>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	603b      	str	r3, [r7, #0]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vPortEnterCritical+0x4a>
	}
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	2000000c 	.word	0x2000000c
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <vPortExitCritical+0x50>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <vPortExitCritical+0x24>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	607b      	str	r3, [r7, #4]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <vPortExitCritical+0x50>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <vPortExitCritical+0x50>)
 8004280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <vPortExitCritical+0x50>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <vPortExitCritical+0x42>
 800428a:	2300      	movs	r3, #0
 800428c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000000c 	.word	0x2000000c
	...

080042b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042b0:	f3ef 8009 	mrs	r0, PSP
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <pxCurrentTCBConst>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	f01e 0f10 	tst.w	lr, #16
 80042c0:	bf08      	it	eq
 80042c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ca:	6010      	str	r0, [r2, #0]
 80042cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042d4:	f380 8811 	msr	BASEPRI, r0
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f7ff f9fc 	bl	80036dc <vTaskSwitchContext>
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	f380 8811 	msr	BASEPRI, r0
 80042ec:	bc09      	pop	{r0, r3}
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f6:	f01e 0f10 	tst.w	lr, #16
 80042fa:	bf08      	it	eq
 80042fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004300:	f380 8809 	msr	PSP, r0
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	f3af 8000 	nop.w

08004310 <pxCurrentTCBConst>:
 8004310:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop

08004318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	607b      	str	r3, [r7, #4]
}
 8004330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004332:	f7ff f91b 	bl	800356c <xTaskIncrementTick>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <xPortSysTickHandler+0x40>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	2300      	movs	r3, #0
 8004346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	f383 8811 	msr	BASEPRI, r3
}
 800434e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <vPortSetupTimerInterrupt+0x34>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <vPortSetupTimerInterrupt+0x38>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <vPortSetupTimerInterrupt+0x3c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0a      	ldr	r2, [pc, #40]	; (800439c <vPortSetupTimerInterrupt+0x40>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <vPortSetupTimerInterrupt+0x44>)
 800437a:	3b01      	subs	r3, #1
 800437c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800437e:	4b04      	ldr	r3, [pc, #16]	; (8004390 <vPortSetupTimerInterrupt+0x34>)
 8004380:	2207      	movs	r2, #7
 8004382:	601a      	str	r2, [r3, #0]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000e010 	.word	0xe000e010
 8004394:	e000e018 	.word	0xe000e018
 8004398:	20000000 	.word	0x20000000
 800439c:	10624dd3 	.word	0x10624dd3
 80043a0:	e000e014 	.word	0xe000e014

080043a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043b4 <vPortEnableVFP+0x10>
 80043a8:	6801      	ldr	r1, [r0, #0]
 80043aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043ae:	6001      	str	r1, [r0, #0]
 80043b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043b2:	bf00      	nop
 80043b4:	e000ed88 	.word	0xe000ed88

080043b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043c4:	f7ff f818 	bl	80033f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043c8:	4b5b      	ldr	r3, [pc, #364]	; (8004538 <pvPortMalloc+0x180>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043d0:	f000 f920 	bl	8004614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043d4:	4b59      	ldr	r3, [pc, #356]	; (800453c <pvPortMalloc+0x184>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 8093 	bne.w	8004508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01d      	beq.n	8004424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80043e8:	2208      	movs	r2, #8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d014      	beq.n	8004424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f023 0307 	bic.w	r3, r3, #7
 8004400:	3308      	adds	r3, #8
 8004402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <pvPortMalloc+0x6c>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	617b      	str	r3, [r7, #20]
}
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d06e      	beq.n	8004508 <pvPortMalloc+0x150>
 800442a:	4b45      	ldr	r3, [pc, #276]	; (8004540 <pvPortMalloc+0x188>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d869      	bhi.n	8004508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <pvPortMalloc+0x18c>)
 8004436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <pvPortMalloc+0x18c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800443e:	e004      	b.n	800444a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	429a      	cmp	r2, r3
 8004452:	d903      	bls.n	800445c <pvPortMalloc+0xa4>
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f1      	bne.n	8004440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <pvPortMalloc+0x180>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004462:	429a      	cmp	r2, r3
 8004464:	d050      	beq.n	8004508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2208      	movs	r2, #8
 800446c:	4413      	add	r3, r2
 800446e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	1ad2      	subs	r2, r2, r3
 8004480:	2308      	movs	r3, #8
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	429a      	cmp	r2, r3
 8004486:	d91f      	bls.n	80044c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4413      	add	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <pvPortMalloc+0xf8>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	613b      	str	r3, [r7, #16]
}
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	1ad2      	subs	r2, r2, r3
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044c2:	69b8      	ldr	r0, [r7, #24]
 80044c4:	f000 f908 	bl	80046d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <pvPortMalloc+0x188>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	4a1b      	ldr	r2, [pc, #108]	; (8004540 <pvPortMalloc+0x188>)
 80044d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044d6:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <pvPortMalloc+0x188>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <pvPortMalloc+0x190>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d203      	bcs.n	80044ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044e2:	4b17      	ldr	r3, [pc, #92]	; (8004540 <pvPortMalloc+0x188>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a18      	ldr	r2, [pc, #96]	; (8004548 <pvPortMalloc+0x190>)
 80044e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <pvPortMalloc+0x184>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80044fe:	4b13      	ldr	r3, [pc, #76]	; (800454c <pvPortMalloc+0x194>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3301      	adds	r3, #1
 8004504:	4a11      	ldr	r2, [pc, #68]	; (800454c <pvPortMalloc+0x194>)
 8004506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004508:	f7fe ff84 	bl	8003414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <pvPortMalloc+0x174>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	60fb      	str	r3, [r7, #12]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <pvPortMalloc+0x172>
	return pvReturn;
 800452c:	69fb      	ldr	r3, [r7, #28]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3728      	adds	r7, #40	; 0x28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20004084 	.word	0x20004084
 800453c:	20004098 	.word	0x20004098
 8004540:	20004088 	.word	0x20004088
 8004544:	2000407c 	.word	0x2000407c
 8004548:	2000408c 	.word	0x2000408c
 800454c:	20004090 	.word	0x20004090

08004550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04d      	beq.n	80045fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004562:	2308      	movs	r3, #8
 8004564:	425b      	negs	r3, r3
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4413      	add	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	4b24      	ldr	r3, [pc, #144]	; (8004608 <vPortFree+0xb8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <vPortFree+0x44>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	60fb      	str	r3, [r7, #12]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <vPortFree+0x62>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	60bb      	str	r3, [r7, #8]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <vPortFree+0xb8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01e      	beq.n	80045fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d11a      	bne.n	80045fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <vPortFree+0xb8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	401a      	ands	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045d8:	f7fe ff0e 	bl	80033f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <vPortFree+0xbc>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4413      	add	r3, r2
 80045e6:	4a09      	ldr	r2, [pc, #36]	; (800460c <vPortFree+0xbc>)
 80045e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045ea:	6938      	ldr	r0, [r7, #16]
 80045ec:	f000 f874 	bl	80046d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <vPortFree+0xc0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	4a06      	ldr	r2, [pc, #24]	; (8004610 <vPortFree+0xc0>)
 80045f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80045fa:	f7fe ff0b 	bl	8003414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045fe:	bf00      	nop
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20004098 	.word	0x20004098
 800460c:	20004088 	.word	0x20004088
 8004610:	20004094 	.word	0x20004094

08004614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800461a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800461e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004620:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <prvHeapInit+0xac>)
 8004622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3307      	adds	r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0307 	bic.w	r3, r3, #7
 800463a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <prvHeapInit+0xac>)
 8004644:	4413      	add	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800464c:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <prvHeapInit+0xb0>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004652:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <prvHeapInit+0xb0>)
 8004654:	2200      	movs	r2, #0
 8004656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4413      	add	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004660:	2208      	movs	r2, #8
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <prvHeapInit+0xb4>)
 8004674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004676:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <prvHeapInit+0xb4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <prvHeapInit+0xb4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	1ad2      	subs	r2, r2, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <prvHeapInit+0xb4>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <prvHeapInit+0xb8>)
 80046a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <prvHeapInit+0xbc>)
 80046aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046ac:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <prvHeapInit+0xc0>)
 80046ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046b2:	601a      	str	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	2000047c 	.word	0x2000047c
 80046c4:	2000407c 	.word	0x2000407c
 80046c8:	20004084 	.word	0x20004084
 80046cc:	2000408c 	.word	0x2000408c
 80046d0:	20004088 	.word	0x20004088
 80046d4:	20004098 	.word	0x20004098

080046d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <prvInsertBlockIntoFreeList+0xac>)
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e002      	b.n	80046ec <prvInsertBlockIntoFreeList+0x14>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d8f7      	bhi.n	80046e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4413      	add	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d108      	bne.n	800471a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	441a      	add	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	441a      	add	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d118      	bne.n	8004760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <prvInsertBlockIntoFreeList+0xb0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d00d      	beq.n	8004756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	441a      	add	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e008      	b.n	8004768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <prvInsertBlockIntoFreeList+0xb0>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e003      	b.n	8004768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	429a      	cmp	r2, r3
 800476e:	d002      	beq.n	8004776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004776:	bf00      	nop
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	2000407c 	.word	0x2000407c
 8004788:	20004084 	.word	0x20004084

0800478c <__errno>:
 800478c:	4b01      	ldr	r3, [pc, #4]	; (8004794 <__errno+0x8>)
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000010 	.word	0x20000010

08004798 <__libc_init_array>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	4d0d      	ldr	r5, [pc, #52]	; (80047d0 <__libc_init_array+0x38>)
 800479c:	4c0d      	ldr	r4, [pc, #52]	; (80047d4 <__libc_init_array+0x3c>)
 800479e:	1b64      	subs	r4, r4, r5
 80047a0:	10a4      	asrs	r4, r4, #2
 80047a2:	2600      	movs	r6, #0
 80047a4:	42a6      	cmp	r6, r4
 80047a6:	d109      	bne.n	80047bc <__libc_init_array+0x24>
 80047a8:	4d0b      	ldr	r5, [pc, #44]	; (80047d8 <__libc_init_array+0x40>)
 80047aa:	4c0c      	ldr	r4, [pc, #48]	; (80047dc <__libc_init_array+0x44>)
 80047ac:	f000 fc8e 	bl	80050cc <_init>
 80047b0:	1b64      	subs	r4, r4, r5
 80047b2:	10a4      	asrs	r4, r4, #2
 80047b4:	2600      	movs	r6, #0
 80047b6:	42a6      	cmp	r6, r4
 80047b8:	d105      	bne.n	80047c6 <__libc_init_array+0x2e>
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c0:	4798      	blx	r3
 80047c2:	3601      	adds	r6, #1
 80047c4:	e7ee      	b.n	80047a4 <__libc_init_array+0xc>
 80047c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ca:	4798      	blx	r3
 80047cc:	3601      	adds	r6, #1
 80047ce:	e7f2      	b.n	80047b6 <__libc_init_array+0x1e>
 80047d0:	080052b4 	.word	0x080052b4
 80047d4:	080052b4 	.word	0x080052b4
 80047d8:	080052b4 	.word	0x080052b4
 80047dc:	080052b8 	.word	0x080052b8

080047e0 <memcpy>:
 80047e0:	440a      	add	r2, r1
 80047e2:	4291      	cmp	r1, r2
 80047e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80047e8:	d100      	bne.n	80047ec <memcpy+0xc>
 80047ea:	4770      	bx	lr
 80047ec:	b510      	push	{r4, lr}
 80047ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047f6:	4291      	cmp	r1, r2
 80047f8:	d1f9      	bne.n	80047ee <memcpy+0xe>
 80047fa:	bd10      	pop	{r4, pc}

080047fc <memset>:
 80047fc:	4402      	add	r2, r0
 80047fe:	4603      	mov	r3, r0
 8004800:	4293      	cmp	r3, r2
 8004802:	d100      	bne.n	8004806 <memset+0xa>
 8004804:	4770      	bx	lr
 8004806:	f803 1b01 	strb.w	r1, [r3], #1
 800480a:	e7f9      	b.n	8004800 <memset+0x4>

0800480c <siprintf>:
 800480c:	b40e      	push	{r1, r2, r3}
 800480e:	b500      	push	{lr}
 8004810:	b09c      	sub	sp, #112	; 0x70
 8004812:	ab1d      	add	r3, sp, #116	; 0x74
 8004814:	9002      	str	r0, [sp, #8]
 8004816:	9006      	str	r0, [sp, #24]
 8004818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800481c:	4809      	ldr	r0, [pc, #36]	; (8004844 <siprintf+0x38>)
 800481e:	9107      	str	r1, [sp, #28]
 8004820:	9104      	str	r1, [sp, #16]
 8004822:	4909      	ldr	r1, [pc, #36]	; (8004848 <siprintf+0x3c>)
 8004824:	f853 2b04 	ldr.w	r2, [r3], #4
 8004828:	9105      	str	r1, [sp, #20]
 800482a:	6800      	ldr	r0, [r0, #0]
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	a902      	add	r1, sp, #8
 8004830:	f000 f868 	bl	8004904 <_svfiprintf_r>
 8004834:	9b02      	ldr	r3, [sp, #8]
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	b01c      	add	sp, #112	; 0x70
 800483c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004840:	b003      	add	sp, #12
 8004842:	4770      	bx	lr
 8004844:	20000010 	.word	0x20000010
 8004848:	ffff0208 	.word	0xffff0208

0800484c <__ssputs_r>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	688e      	ldr	r6, [r1, #8]
 8004852:	429e      	cmp	r6, r3
 8004854:	4682      	mov	sl, r0
 8004856:	460c      	mov	r4, r1
 8004858:	4690      	mov	r8, r2
 800485a:	461f      	mov	r7, r3
 800485c:	d838      	bhi.n	80048d0 <__ssputs_r+0x84>
 800485e:	898a      	ldrh	r2, [r1, #12]
 8004860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004864:	d032      	beq.n	80048cc <__ssputs_r+0x80>
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	6909      	ldr	r1, [r1, #16]
 800486a:	eba5 0901 	sub.w	r9, r5, r1
 800486e:	6965      	ldr	r5, [r4, #20]
 8004870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004878:	3301      	adds	r3, #1
 800487a:	444b      	add	r3, r9
 800487c:	106d      	asrs	r5, r5, #1
 800487e:	429d      	cmp	r5, r3
 8004880:	bf38      	it	cc
 8004882:	461d      	movcc	r5, r3
 8004884:	0553      	lsls	r3, r2, #21
 8004886:	d531      	bpl.n	80048ec <__ssputs_r+0xa0>
 8004888:	4629      	mov	r1, r5
 800488a:	f000 fb55 	bl	8004f38 <_malloc_r>
 800488e:	4606      	mov	r6, r0
 8004890:	b950      	cbnz	r0, 80048a8 <__ssputs_r+0x5c>
 8004892:	230c      	movs	r3, #12
 8004894:	f8ca 3000 	str.w	r3, [sl]
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	6921      	ldr	r1, [r4, #16]
 80048aa:	464a      	mov	r2, r9
 80048ac:	f7ff ff98 	bl	80047e0 <memcpy>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	6126      	str	r6, [r4, #16]
 80048be:	6165      	str	r5, [r4, #20]
 80048c0:	444e      	add	r6, r9
 80048c2:	eba5 0509 	sub.w	r5, r5, r9
 80048c6:	6026      	str	r6, [r4, #0]
 80048c8:	60a5      	str	r5, [r4, #8]
 80048ca:	463e      	mov	r6, r7
 80048cc:	42be      	cmp	r6, r7
 80048ce:	d900      	bls.n	80048d2 <__ssputs_r+0x86>
 80048d0:	463e      	mov	r6, r7
 80048d2:	6820      	ldr	r0, [r4, #0]
 80048d4:	4632      	mov	r2, r6
 80048d6:	4641      	mov	r1, r8
 80048d8:	f000 faa8 	bl	8004e2c <memmove>
 80048dc:	68a3      	ldr	r3, [r4, #8]
 80048de:	1b9b      	subs	r3, r3, r6
 80048e0:	60a3      	str	r3, [r4, #8]
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	4433      	add	r3, r6
 80048e6:	6023      	str	r3, [r4, #0]
 80048e8:	2000      	movs	r0, #0
 80048ea:	e7db      	b.n	80048a4 <__ssputs_r+0x58>
 80048ec:	462a      	mov	r2, r5
 80048ee:	f000 fb97 	bl	8005020 <_realloc_r>
 80048f2:	4606      	mov	r6, r0
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d1e1      	bne.n	80048bc <__ssputs_r+0x70>
 80048f8:	6921      	ldr	r1, [r4, #16]
 80048fa:	4650      	mov	r0, sl
 80048fc:	f000 fab0 	bl	8004e60 <_free_r>
 8004900:	e7c7      	b.n	8004892 <__ssputs_r+0x46>
	...

08004904 <_svfiprintf_r>:
 8004904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	4698      	mov	r8, r3
 800490a:	898b      	ldrh	r3, [r1, #12]
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	b09d      	sub	sp, #116	; 0x74
 8004910:	4607      	mov	r7, r0
 8004912:	460d      	mov	r5, r1
 8004914:	4614      	mov	r4, r2
 8004916:	d50e      	bpl.n	8004936 <_svfiprintf_r+0x32>
 8004918:	690b      	ldr	r3, [r1, #16]
 800491a:	b963      	cbnz	r3, 8004936 <_svfiprintf_r+0x32>
 800491c:	2140      	movs	r1, #64	; 0x40
 800491e:	f000 fb0b 	bl	8004f38 <_malloc_r>
 8004922:	6028      	str	r0, [r5, #0]
 8004924:	6128      	str	r0, [r5, #16]
 8004926:	b920      	cbnz	r0, 8004932 <_svfiprintf_r+0x2e>
 8004928:	230c      	movs	r3, #12
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004930:	e0d1      	b.n	8004ad6 <_svfiprintf_r+0x1d2>
 8004932:	2340      	movs	r3, #64	; 0x40
 8004934:	616b      	str	r3, [r5, #20]
 8004936:	2300      	movs	r3, #0
 8004938:	9309      	str	r3, [sp, #36]	; 0x24
 800493a:	2320      	movs	r3, #32
 800493c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004940:	f8cd 800c 	str.w	r8, [sp, #12]
 8004944:	2330      	movs	r3, #48	; 0x30
 8004946:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004af0 <_svfiprintf_r+0x1ec>
 800494a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800494e:	f04f 0901 	mov.w	r9, #1
 8004952:	4623      	mov	r3, r4
 8004954:	469a      	mov	sl, r3
 8004956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495a:	b10a      	cbz	r2, 8004960 <_svfiprintf_r+0x5c>
 800495c:	2a25      	cmp	r2, #37	; 0x25
 800495e:	d1f9      	bne.n	8004954 <_svfiprintf_r+0x50>
 8004960:	ebba 0b04 	subs.w	fp, sl, r4
 8004964:	d00b      	beq.n	800497e <_svfiprintf_r+0x7a>
 8004966:	465b      	mov	r3, fp
 8004968:	4622      	mov	r2, r4
 800496a:	4629      	mov	r1, r5
 800496c:	4638      	mov	r0, r7
 800496e:	f7ff ff6d 	bl	800484c <__ssputs_r>
 8004972:	3001      	adds	r0, #1
 8004974:	f000 80aa 	beq.w	8004acc <_svfiprintf_r+0x1c8>
 8004978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800497a:	445a      	add	r2, fp
 800497c:	9209      	str	r2, [sp, #36]	; 0x24
 800497e:	f89a 3000 	ldrb.w	r3, [sl]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80a2 	beq.w	8004acc <_svfiprintf_r+0x1c8>
 8004988:	2300      	movs	r3, #0
 800498a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800498e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004992:	f10a 0a01 	add.w	sl, sl, #1
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	9307      	str	r3, [sp, #28]
 800499a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800499e:	931a      	str	r3, [sp, #104]	; 0x68
 80049a0:	4654      	mov	r4, sl
 80049a2:	2205      	movs	r2, #5
 80049a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a8:	4851      	ldr	r0, [pc, #324]	; (8004af0 <_svfiprintf_r+0x1ec>)
 80049aa:	f7fb fc41 	bl	8000230 <memchr>
 80049ae:	9a04      	ldr	r2, [sp, #16]
 80049b0:	b9d8      	cbnz	r0, 80049ea <_svfiprintf_r+0xe6>
 80049b2:	06d0      	lsls	r0, r2, #27
 80049b4:	bf44      	itt	mi
 80049b6:	2320      	movmi	r3, #32
 80049b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049bc:	0711      	lsls	r1, r2, #28
 80049be:	bf44      	itt	mi
 80049c0:	232b      	movmi	r3, #43	; 0x2b
 80049c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c6:	f89a 3000 	ldrb.w	r3, [sl]
 80049ca:	2b2a      	cmp	r3, #42	; 0x2a
 80049cc:	d015      	beq.n	80049fa <_svfiprintf_r+0xf6>
 80049ce:	9a07      	ldr	r2, [sp, #28]
 80049d0:	4654      	mov	r4, sl
 80049d2:	2000      	movs	r0, #0
 80049d4:	f04f 0c0a 	mov.w	ip, #10
 80049d8:	4621      	mov	r1, r4
 80049da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049de:	3b30      	subs	r3, #48	; 0x30
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d94e      	bls.n	8004a82 <_svfiprintf_r+0x17e>
 80049e4:	b1b0      	cbz	r0, 8004a14 <_svfiprintf_r+0x110>
 80049e6:	9207      	str	r2, [sp, #28]
 80049e8:	e014      	b.n	8004a14 <_svfiprintf_r+0x110>
 80049ea:	eba0 0308 	sub.w	r3, r0, r8
 80049ee:	fa09 f303 	lsl.w	r3, r9, r3
 80049f2:	4313      	orrs	r3, r2
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	46a2      	mov	sl, r4
 80049f8:	e7d2      	b.n	80049a0 <_svfiprintf_r+0x9c>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	1d19      	adds	r1, r3, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	9103      	str	r1, [sp, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bfbb      	ittet	lt
 8004a06:	425b      	neglt	r3, r3
 8004a08:	f042 0202 	orrlt.w	r2, r2, #2
 8004a0c:	9307      	strge	r3, [sp, #28]
 8004a0e:	9307      	strlt	r3, [sp, #28]
 8004a10:	bfb8      	it	lt
 8004a12:	9204      	strlt	r2, [sp, #16]
 8004a14:	7823      	ldrb	r3, [r4, #0]
 8004a16:	2b2e      	cmp	r3, #46	; 0x2e
 8004a18:	d10c      	bne.n	8004a34 <_svfiprintf_r+0x130>
 8004a1a:	7863      	ldrb	r3, [r4, #1]
 8004a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1e:	d135      	bne.n	8004a8c <_svfiprintf_r+0x188>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	1d1a      	adds	r2, r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	9203      	str	r2, [sp, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bfb8      	it	lt
 8004a2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a30:	3402      	adds	r4, #2
 8004a32:	9305      	str	r3, [sp, #20]
 8004a34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b00 <_svfiprintf_r+0x1fc>
 8004a38:	7821      	ldrb	r1, [r4, #0]
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	4650      	mov	r0, sl
 8004a3e:	f7fb fbf7 	bl	8000230 <memchr>
 8004a42:	b140      	cbz	r0, 8004a56 <_svfiprintf_r+0x152>
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	eba0 000a 	sub.w	r0, r0, sl
 8004a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a4e:	9b04      	ldr	r3, [sp, #16]
 8004a50:	4303      	orrs	r3, r0
 8004a52:	3401      	adds	r4, #1
 8004a54:	9304      	str	r3, [sp, #16]
 8004a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5a:	4826      	ldr	r0, [pc, #152]	; (8004af4 <_svfiprintf_r+0x1f0>)
 8004a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a60:	2206      	movs	r2, #6
 8004a62:	f7fb fbe5 	bl	8000230 <memchr>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d038      	beq.n	8004adc <_svfiprintf_r+0x1d8>
 8004a6a:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <_svfiprintf_r+0x1f4>)
 8004a6c:	bb1b      	cbnz	r3, 8004ab6 <_svfiprintf_r+0x1b2>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	3307      	adds	r3, #7
 8004a72:	f023 0307 	bic.w	r3, r3, #7
 8004a76:	3308      	adds	r3, #8
 8004a78:	9303      	str	r3, [sp, #12]
 8004a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7c:	4433      	add	r3, r6
 8004a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a80:	e767      	b.n	8004952 <_svfiprintf_r+0x4e>
 8004a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a86:	460c      	mov	r4, r1
 8004a88:	2001      	movs	r0, #1
 8004a8a:	e7a5      	b.n	80049d8 <_svfiprintf_r+0xd4>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	3401      	adds	r4, #1
 8004a90:	9305      	str	r3, [sp, #20]
 8004a92:	4619      	mov	r1, r3
 8004a94:	f04f 0c0a 	mov.w	ip, #10
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a9e:	3a30      	subs	r2, #48	; 0x30
 8004aa0:	2a09      	cmp	r2, #9
 8004aa2:	d903      	bls.n	8004aac <_svfiprintf_r+0x1a8>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0c5      	beq.n	8004a34 <_svfiprintf_r+0x130>
 8004aa8:	9105      	str	r1, [sp, #20]
 8004aaa:	e7c3      	b.n	8004a34 <_svfiprintf_r+0x130>
 8004aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e7f0      	b.n	8004a98 <_svfiprintf_r+0x194>
 8004ab6:	ab03      	add	r3, sp, #12
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	462a      	mov	r2, r5
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <_svfiprintf_r+0x1f8>)
 8004abe:	a904      	add	r1, sp, #16
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	f3af 8000 	nop.w
 8004ac6:	1c42      	adds	r2, r0, #1
 8004ac8:	4606      	mov	r6, r0
 8004aca:	d1d6      	bne.n	8004a7a <_svfiprintf_r+0x176>
 8004acc:	89ab      	ldrh	r3, [r5, #12]
 8004ace:	065b      	lsls	r3, r3, #25
 8004ad0:	f53f af2c 	bmi.w	800492c <_svfiprintf_r+0x28>
 8004ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad6:	b01d      	add	sp, #116	; 0x74
 8004ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004adc:	ab03      	add	r3, sp, #12
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	462a      	mov	r2, r5
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <_svfiprintf_r+0x1f8>)
 8004ae4:	a904      	add	r1, sp, #16
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f000 f87a 	bl	8004be0 <_printf_i>
 8004aec:	e7eb      	b.n	8004ac6 <_svfiprintf_r+0x1c2>
 8004aee:	bf00      	nop
 8004af0:	08005278 	.word	0x08005278
 8004af4:	08005282 	.word	0x08005282
 8004af8:	00000000 	.word	0x00000000
 8004afc:	0800484d 	.word	0x0800484d
 8004b00:	0800527e 	.word	0x0800527e

08004b04 <_printf_common>:
 8004b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	4616      	mov	r6, r2
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	688a      	ldr	r2, [r1, #8]
 8004b0e:	690b      	ldr	r3, [r1, #16]
 8004b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bfb8      	it	lt
 8004b18:	4613      	movlt	r3, r2
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b20:	4607      	mov	r7, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b10a      	cbz	r2, 8004b2a <_printf_common+0x26>
 8004b26:	3301      	adds	r3, #1
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	0699      	lsls	r1, r3, #26
 8004b2e:	bf42      	ittt	mi
 8004b30:	6833      	ldrmi	r3, [r6, #0]
 8004b32:	3302      	addmi	r3, #2
 8004b34:	6033      	strmi	r3, [r6, #0]
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	f015 0506 	ands.w	r5, r5, #6
 8004b3c:	d106      	bne.n	8004b4c <_printf_common+0x48>
 8004b3e:	f104 0a19 	add.w	sl, r4, #25
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	6832      	ldr	r2, [r6, #0]
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	42ab      	cmp	r3, r5
 8004b4a:	dc26      	bgt.n	8004b9a <_printf_common+0x96>
 8004b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b50:	1e13      	subs	r3, r2, #0
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	bf18      	it	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	0692      	lsls	r2, r2, #26
 8004b5a:	d42b      	bmi.n	8004bb4 <_printf_common+0xb0>
 8004b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d01e      	beq.n	8004ba8 <_printf_common+0xa4>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	68e5      	ldr	r5, [r4, #12]
 8004b6e:	6832      	ldr	r2, [r6, #0]
 8004b70:	f003 0306 	and.w	r3, r3, #6
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	bf08      	it	eq
 8004b78:	1aad      	subeq	r5, r5, r2
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	6922      	ldr	r2, [r4, #16]
 8004b7e:	bf0c      	ite	eq
 8004b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b84:	2500      	movne	r5, #0
 8004b86:	4293      	cmp	r3, r2
 8004b88:	bfc4      	itt	gt
 8004b8a:	1a9b      	subgt	r3, r3, r2
 8004b8c:	18ed      	addgt	r5, r5, r3
 8004b8e:	2600      	movs	r6, #0
 8004b90:	341a      	adds	r4, #26
 8004b92:	42b5      	cmp	r5, r6
 8004b94:	d11a      	bne.n	8004bcc <_printf_common+0xc8>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e008      	b.n	8004bac <_printf_common+0xa8>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d103      	bne.n	8004bb0 <_printf_common+0xac>
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7c6      	b.n	8004b42 <_printf_common+0x3e>
 8004bb4:	18e1      	adds	r1, r4, r3
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	2030      	movs	r0, #48	; 0x30
 8004bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bbe:	4422      	add	r2, r4
 8004bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc8:	3302      	adds	r3, #2
 8004bca:	e7c7      	b.n	8004b5c <_printf_common+0x58>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4622      	mov	r2, r4
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d0e6      	beq.n	8004ba8 <_printf_common+0xa4>
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7d9      	b.n	8004b92 <_printf_common+0x8e>
	...

08004be0 <_printf_i>:
 8004be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	7e0f      	ldrb	r7, [r1, #24]
 8004be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004be8:	2f78      	cmp	r7, #120	; 0x78
 8004bea:	4691      	mov	r9, r2
 8004bec:	4680      	mov	r8, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bf6:	d807      	bhi.n	8004c08 <_printf_i+0x28>
 8004bf8:	2f62      	cmp	r7, #98	; 0x62
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x32>
 8004bfc:	2f00      	cmp	r7, #0
 8004bfe:	f000 80d8 	beq.w	8004db2 <_printf_i+0x1d2>
 8004c02:	2f58      	cmp	r7, #88	; 0x58
 8004c04:	f000 80a3 	beq.w	8004d4e <_printf_i+0x16e>
 8004c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c10:	e03a      	b.n	8004c88 <_printf_i+0xa8>
 8004c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c16:	2b15      	cmp	r3, #21
 8004c18:	d8f6      	bhi.n	8004c08 <_printf_i+0x28>
 8004c1a:	a101      	add	r1, pc, #4	; (adr r1, 8004c20 <_printf_i+0x40>)
 8004c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c20:	08004c79 	.word	0x08004c79
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c09 	.word	0x08004c09
 8004c2c:	08004c09 	.word	0x08004c09
 8004c30:	08004c09 	.word	0x08004c09
 8004c34:	08004c09 	.word	0x08004c09
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004c09 	.word	0x08004c09
 8004c40:	08004c09 	.word	0x08004c09
 8004c44:	08004c09 	.word	0x08004c09
 8004c48:	08004c09 	.word	0x08004c09
 8004c4c:	08004d99 	.word	0x08004d99
 8004c50:	08004cbd 	.word	0x08004cbd
 8004c54:	08004d7b 	.word	0x08004d7b
 8004c58:	08004c09 	.word	0x08004c09
 8004c5c:	08004c09 	.word	0x08004c09
 8004c60:	08004dbb 	.word	0x08004dbb
 8004c64:	08004c09 	.word	0x08004c09
 8004c68:	08004cbd 	.word	0x08004cbd
 8004c6c:	08004c09 	.word	0x08004c09
 8004c70:	08004c09 	.word	0x08004c09
 8004c74:	08004d83 	.word	0x08004d83
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	602a      	str	r2, [r5, #0]
 8004c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0a3      	b.n	8004dd4 <_printf_i+0x1f4>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	6829      	ldr	r1, [r5, #0]
 8004c90:	0606      	lsls	r6, r0, #24
 8004c92:	f101 0304 	add.w	r3, r1, #4
 8004c96:	d50a      	bpl.n	8004cae <_printf_i+0xce>
 8004c98:	680e      	ldr	r6, [r1, #0]
 8004c9a:	602b      	str	r3, [r5, #0]
 8004c9c:	2e00      	cmp	r6, #0
 8004c9e:	da03      	bge.n	8004ca8 <_printf_i+0xc8>
 8004ca0:	232d      	movs	r3, #45	; 0x2d
 8004ca2:	4276      	negs	r6, r6
 8004ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca8:	485e      	ldr	r0, [pc, #376]	; (8004e24 <_printf_i+0x244>)
 8004caa:	230a      	movs	r3, #10
 8004cac:	e019      	b.n	8004ce2 <_printf_i+0x102>
 8004cae:	680e      	ldr	r6, [r1, #0]
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cb6:	bf18      	it	ne
 8004cb8:	b236      	sxthne	r6, r6
 8004cba:	e7ef      	b.n	8004c9c <_printf_i+0xbc>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	6820      	ldr	r0, [r4, #0]
 8004cc0:	1d19      	adds	r1, r3, #4
 8004cc2:	6029      	str	r1, [r5, #0]
 8004cc4:	0601      	lsls	r1, r0, #24
 8004cc6:	d501      	bpl.n	8004ccc <_printf_i+0xec>
 8004cc8:	681e      	ldr	r6, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <_printf_i+0xf2>
 8004ccc:	0646      	lsls	r6, r0, #25
 8004cce:	d5fb      	bpl.n	8004cc8 <_printf_i+0xe8>
 8004cd0:	881e      	ldrh	r6, [r3, #0]
 8004cd2:	4854      	ldr	r0, [pc, #336]	; (8004e24 <_printf_i+0x244>)
 8004cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2308      	moveq	r3, #8
 8004cda:	230a      	movne	r3, #10
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ce2:	6865      	ldr	r5, [r4, #4]
 8004ce4:	60a5      	str	r5, [r4, #8]
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	bfa2      	ittt	ge
 8004cea:	6821      	ldrge	r1, [r4, #0]
 8004cec:	f021 0104 	bicge.w	r1, r1, #4
 8004cf0:	6021      	strge	r1, [r4, #0]
 8004cf2:	b90e      	cbnz	r6, 8004cf8 <_printf_i+0x118>
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	d04d      	beq.n	8004d94 <_printf_i+0x1b4>
 8004cf8:	4615      	mov	r5, r2
 8004cfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cfe:	fb03 6711 	mls	r7, r3, r1, r6
 8004d02:	5dc7      	ldrb	r7, [r0, r7]
 8004d04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d08:	4637      	mov	r7, r6
 8004d0a:	42bb      	cmp	r3, r7
 8004d0c:	460e      	mov	r6, r1
 8004d0e:	d9f4      	bls.n	8004cfa <_printf_i+0x11a>
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d10b      	bne.n	8004d2c <_printf_i+0x14c>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	07de      	lsls	r6, r3, #31
 8004d18:	d508      	bpl.n	8004d2c <_printf_i+0x14c>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6861      	ldr	r1, [r4, #4]
 8004d1e:	4299      	cmp	r1, r3
 8004d20:	bfde      	ittt	le
 8004d22:	2330      	movle	r3, #48	; 0x30
 8004d24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d2c:	1b52      	subs	r2, r2, r5
 8004d2e:	6122      	str	r2, [r4, #16]
 8004d30:	f8cd a000 	str.w	sl, [sp]
 8004d34:	464b      	mov	r3, r9
 8004d36:	aa03      	add	r2, sp, #12
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7ff fee2 	bl	8004b04 <_printf_common>
 8004d40:	3001      	adds	r0, #1
 8004d42:	d14c      	bne.n	8004dde <_printf_i+0x1fe>
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d48:	b004      	add	sp, #16
 8004d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4e:	4835      	ldr	r0, [pc, #212]	; (8004e24 <_printf_i+0x244>)
 8004d50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d54:	6829      	ldr	r1, [r5, #0]
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d5c:	6029      	str	r1, [r5, #0]
 8004d5e:	061d      	lsls	r5, r3, #24
 8004d60:	d514      	bpl.n	8004d8c <_printf_i+0x1ac>
 8004d62:	07df      	lsls	r7, r3, #31
 8004d64:	bf44      	itt	mi
 8004d66:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6a:	6023      	strmi	r3, [r4, #0]
 8004d6c:	b91e      	cbnz	r6, 8004d76 <_printf_i+0x196>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f023 0320 	bic.w	r3, r3, #32
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	2310      	movs	r3, #16
 8004d78:	e7b0      	b.n	8004cdc <_printf_i+0xfc>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	f043 0320 	orr.w	r3, r3, #32
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	2378      	movs	r3, #120	; 0x78
 8004d84:	4828      	ldr	r0, [pc, #160]	; (8004e28 <_printf_i+0x248>)
 8004d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d8a:	e7e3      	b.n	8004d54 <_printf_i+0x174>
 8004d8c:	0659      	lsls	r1, r3, #25
 8004d8e:	bf48      	it	mi
 8004d90:	b2b6      	uxthmi	r6, r6
 8004d92:	e7e6      	b.n	8004d62 <_printf_i+0x182>
 8004d94:	4615      	mov	r5, r2
 8004d96:	e7bb      	b.n	8004d10 <_printf_i+0x130>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	6826      	ldr	r6, [r4, #0]
 8004d9c:	6961      	ldr	r1, [r4, #20]
 8004d9e:	1d18      	adds	r0, r3, #4
 8004da0:	6028      	str	r0, [r5, #0]
 8004da2:	0635      	lsls	r5, r6, #24
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	d501      	bpl.n	8004dac <_printf_i+0x1cc>
 8004da8:	6019      	str	r1, [r3, #0]
 8004daa:	e002      	b.n	8004db2 <_printf_i+0x1d2>
 8004dac:	0670      	lsls	r0, r6, #25
 8004dae:	d5fb      	bpl.n	8004da8 <_printf_i+0x1c8>
 8004db0:	8019      	strh	r1, [r3, #0]
 8004db2:	2300      	movs	r3, #0
 8004db4:	6123      	str	r3, [r4, #16]
 8004db6:	4615      	mov	r5, r2
 8004db8:	e7ba      	b.n	8004d30 <_printf_i+0x150>
 8004dba:	682b      	ldr	r3, [r5, #0]
 8004dbc:	1d1a      	adds	r2, r3, #4
 8004dbe:	602a      	str	r2, [r5, #0]
 8004dc0:	681d      	ldr	r5, [r3, #0]
 8004dc2:	6862      	ldr	r2, [r4, #4]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f7fb fa32 	bl	8000230 <memchr>
 8004dcc:	b108      	cbz	r0, 8004dd2 <_printf_i+0x1f2>
 8004dce:	1b40      	subs	r0, r0, r5
 8004dd0:	6060      	str	r0, [r4, #4]
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	6123      	str	r3, [r4, #16]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ddc:	e7a8      	b.n	8004d30 <_printf_i+0x150>
 8004dde:	6923      	ldr	r3, [r4, #16]
 8004de0:	462a      	mov	r2, r5
 8004de2:	4649      	mov	r1, r9
 8004de4:	4640      	mov	r0, r8
 8004de6:	47d0      	blx	sl
 8004de8:	3001      	adds	r0, #1
 8004dea:	d0ab      	beq.n	8004d44 <_printf_i+0x164>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	079b      	lsls	r3, r3, #30
 8004df0:	d413      	bmi.n	8004e1a <_printf_i+0x23a>
 8004df2:	68e0      	ldr	r0, [r4, #12]
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	4298      	cmp	r0, r3
 8004df8:	bfb8      	it	lt
 8004dfa:	4618      	movlt	r0, r3
 8004dfc:	e7a4      	b.n	8004d48 <_printf_i+0x168>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4632      	mov	r2, r6
 8004e02:	4649      	mov	r1, r9
 8004e04:	4640      	mov	r0, r8
 8004e06:	47d0      	blx	sl
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d09b      	beq.n	8004d44 <_printf_i+0x164>
 8004e0c:	3501      	adds	r5, #1
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	9903      	ldr	r1, [sp, #12]
 8004e12:	1a5b      	subs	r3, r3, r1
 8004e14:	42ab      	cmp	r3, r5
 8004e16:	dcf2      	bgt.n	8004dfe <_printf_i+0x21e>
 8004e18:	e7eb      	b.n	8004df2 <_printf_i+0x212>
 8004e1a:	2500      	movs	r5, #0
 8004e1c:	f104 0619 	add.w	r6, r4, #25
 8004e20:	e7f5      	b.n	8004e0e <_printf_i+0x22e>
 8004e22:	bf00      	nop
 8004e24:	08005289 	.word	0x08005289
 8004e28:	0800529a 	.word	0x0800529a

08004e2c <memmove>:
 8004e2c:	4288      	cmp	r0, r1
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	eb01 0402 	add.w	r4, r1, r2
 8004e34:	d902      	bls.n	8004e3c <memmove+0x10>
 8004e36:	4284      	cmp	r4, r0
 8004e38:	4623      	mov	r3, r4
 8004e3a:	d807      	bhi.n	8004e4c <memmove+0x20>
 8004e3c:	1e43      	subs	r3, r0, #1
 8004e3e:	42a1      	cmp	r1, r4
 8004e40:	d008      	beq.n	8004e54 <memmove+0x28>
 8004e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e4a:	e7f8      	b.n	8004e3e <memmove+0x12>
 8004e4c:	4402      	add	r2, r0
 8004e4e:	4601      	mov	r1, r0
 8004e50:	428a      	cmp	r2, r1
 8004e52:	d100      	bne.n	8004e56 <memmove+0x2a>
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e5e:	e7f7      	b.n	8004e50 <memmove+0x24>

08004e60 <_free_r>:
 8004e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e62:	2900      	cmp	r1, #0
 8004e64:	d044      	beq.n	8004ef0 <_free_r+0x90>
 8004e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e6a:	9001      	str	r0, [sp, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e72:	bfb8      	it	lt
 8004e74:	18e4      	addlt	r4, r4, r3
 8004e76:	f000 f913 	bl	80050a0 <__malloc_lock>
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ef4 <_free_r+0x94>)
 8004e7c:	9801      	ldr	r0, [sp, #4]
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	b933      	cbnz	r3, 8004e90 <_free_r+0x30>
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	6014      	str	r4, [r2, #0]
 8004e86:	b003      	add	sp, #12
 8004e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e8c:	f000 b90e 	b.w	80050ac <__malloc_unlock>
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	d908      	bls.n	8004ea6 <_free_r+0x46>
 8004e94:	6825      	ldr	r5, [r4, #0]
 8004e96:	1961      	adds	r1, r4, r5
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	bf01      	itttt	eq
 8004e9c:	6819      	ldreq	r1, [r3, #0]
 8004e9e:	685b      	ldreq	r3, [r3, #4]
 8004ea0:	1949      	addeq	r1, r1, r5
 8004ea2:	6021      	streq	r1, [r4, #0]
 8004ea4:	e7ed      	b.n	8004e82 <_free_r+0x22>
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	b10b      	cbz	r3, 8004eb0 <_free_r+0x50>
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d9fa      	bls.n	8004ea6 <_free_r+0x46>
 8004eb0:	6811      	ldr	r1, [r2, #0]
 8004eb2:	1855      	adds	r5, r2, r1
 8004eb4:	42a5      	cmp	r5, r4
 8004eb6:	d10b      	bne.n	8004ed0 <_free_r+0x70>
 8004eb8:	6824      	ldr	r4, [r4, #0]
 8004eba:	4421      	add	r1, r4
 8004ebc:	1854      	adds	r4, r2, r1
 8004ebe:	42a3      	cmp	r3, r4
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	d1e0      	bne.n	8004e86 <_free_r+0x26>
 8004ec4:	681c      	ldr	r4, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	6053      	str	r3, [r2, #4]
 8004eca:	4421      	add	r1, r4
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	e7da      	b.n	8004e86 <_free_r+0x26>
 8004ed0:	d902      	bls.n	8004ed8 <_free_r+0x78>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	6003      	str	r3, [r0, #0]
 8004ed6:	e7d6      	b.n	8004e86 <_free_r+0x26>
 8004ed8:	6825      	ldr	r5, [r4, #0]
 8004eda:	1961      	adds	r1, r4, r5
 8004edc:	428b      	cmp	r3, r1
 8004ede:	bf04      	itt	eq
 8004ee0:	6819      	ldreq	r1, [r3, #0]
 8004ee2:	685b      	ldreq	r3, [r3, #4]
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	bf04      	itt	eq
 8004ee8:	1949      	addeq	r1, r1, r5
 8004eea:	6021      	streq	r1, [r4, #0]
 8004eec:	6054      	str	r4, [r2, #4]
 8004eee:	e7ca      	b.n	8004e86 <_free_r+0x26>
 8004ef0:	b003      	add	sp, #12
 8004ef2:	bd30      	pop	{r4, r5, pc}
 8004ef4:	2000409c 	.word	0x2000409c

08004ef8 <sbrk_aligned>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4e0e      	ldr	r6, [pc, #56]	; (8004f34 <sbrk_aligned+0x3c>)
 8004efc:	460c      	mov	r4, r1
 8004efe:	6831      	ldr	r1, [r6, #0]
 8004f00:	4605      	mov	r5, r0
 8004f02:	b911      	cbnz	r1, 8004f0a <sbrk_aligned+0x12>
 8004f04:	f000 f8bc 	bl	8005080 <_sbrk_r>
 8004f08:	6030      	str	r0, [r6, #0]
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 f8b7 	bl	8005080 <_sbrk_r>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	d00a      	beq.n	8004f2c <sbrk_aligned+0x34>
 8004f16:	1cc4      	adds	r4, r0, #3
 8004f18:	f024 0403 	bic.w	r4, r4, #3
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d007      	beq.n	8004f30 <sbrk_aligned+0x38>
 8004f20:	1a21      	subs	r1, r4, r0
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 f8ac 	bl	8005080 <_sbrk_r>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d101      	bne.n	8004f30 <sbrk_aligned+0x38>
 8004f2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f30:	4620      	mov	r0, r4
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	200040a0 	.word	0x200040a0

08004f38 <_malloc_r>:
 8004f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3c:	1ccd      	adds	r5, r1, #3
 8004f3e:	f025 0503 	bic.w	r5, r5, #3
 8004f42:	3508      	adds	r5, #8
 8004f44:	2d0c      	cmp	r5, #12
 8004f46:	bf38      	it	cc
 8004f48:	250c      	movcc	r5, #12
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	db01      	blt.n	8004f54 <_malloc_r+0x1c>
 8004f50:	42a9      	cmp	r1, r5
 8004f52:	d905      	bls.n	8004f60 <_malloc_r+0x28>
 8004f54:	230c      	movs	r3, #12
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	2600      	movs	r6, #0
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f60:	4e2e      	ldr	r6, [pc, #184]	; (800501c <_malloc_r+0xe4>)
 8004f62:	f000 f89d 	bl	80050a0 <__malloc_lock>
 8004f66:	6833      	ldr	r3, [r6, #0]
 8004f68:	461c      	mov	r4, r3
 8004f6a:	bb34      	cbnz	r4, 8004fba <_malloc_r+0x82>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f7ff ffc2 	bl	8004ef8 <sbrk_aligned>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	4604      	mov	r4, r0
 8004f78:	d14d      	bne.n	8005016 <_malloc_r+0xde>
 8004f7a:	6834      	ldr	r4, [r6, #0]
 8004f7c:	4626      	mov	r6, r4
 8004f7e:	2e00      	cmp	r6, #0
 8004f80:	d140      	bne.n	8005004 <_malloc_r+0xcc>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	4631      	mov	r1, r6
 8004f86:	4638      	mov	r0, r7
 8004f88:	eb04 0803 	add.w	r8, r4, r3
 8004f8c:	f000 f878 	bl	8005080 <_sbrk_r>
 8004f90:	4580      	cmp	r8, r0
 8004f92:	d13a      	bne.n	800500a <_malloc_r+0xd2>
 8004f94:	6821      	ldr	r1, [r4, #0]
 8004f96:	3503      	adds	r5, #3
 8004f98:	1a6d      	subs	r5, r5, r1
 8004f9a:	f025 0503 	bic.w	r5, r5, #3
 8004f9e:	3508      	adds	r5, #8
 8004fa0:	2d0c      	cmp	r5, #12
 8004fa2:	bf38      	it	cc
 8004fa4:	250c      	movcc	r5, #12
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7ff ffa5 	bl	8004ef8 <sbrk_aligned>
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d02b      	beq.n	800500a <_malloc_r+0xd2>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	442b      	add	r3, r5
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	e00e      	b.n	8004fd8 <_malloc_r+0xa0>
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	1b52      	subs	r2, r2, r5
 8004fbe:	d41e      	bmi.n	8004ffe <_malloc_r+0xc6>
 8004fc0:	2a0b      	cmp	r2, #11
 8004fc2:	d916      	bls.n	8004ff2 <_malloc_r+0xba>
 8004fc4:	1961      	adds	r1, r4, r5
 8004fc6:	42a3      	cmp	r3, r4
 8004fc8:	6025      	str	r5, [r4, #0]
 8004fca:	bf18      	it	ne
 8004fcc:	6059      	strne	r1, [r3, #4]
 8004fce:	6863      	ldr	r3, [r4, #4]
 8004fd0:	bf08      	it	eq
 8004fd2:	6031      	streq	r1, [r6, #0]
 8004fd4:	5162      	str	r2, [r4, r5]
 8004fd6:	604b      	str	r3, [r1, #4]
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f104 060b 	add.w	r6, r4, #11
 8004fde:	f000 f865 	bl	80050ac <__malloc_unlock>
 8004fe2:	f026 0607 	bic.w	r6, r6, #7
 8004fe6:	1d23      	adds	r3, r4, #4
 8004fe8:	1af2      	subs	r2, r6, r3
 8004fea:	d0b6      	beq.n	8004f5a <_malloc_r+0x22>
 8004fec:	1b9b      	subs	r3, r3, r6
 8004fee:	50a3      	str	r3, [r4, r2]
 8004ff0:	e7b3      	b.n	8004f5a <_malloc_r+0x22>
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	bf0c      	ite	eq
 8004ff8:	6032      	streq	r2, [r6, #0]
 8004ffa:	605a      	strne	r2, [r3, #4]
 8004ffc:	e7ec      	b.n	8004fd8 <_malloc_r+0xa0>
 8004ffe:	4623      	mov	r3, r4
 8005000:	6864      	ldr	r4, [r4, #4]
 8005002:	e7b2      	b.n	8004f6a <_malloc_r+0x32>
 8005004:	4634      	mov	r4, r6
 8005006:	6876      	ldr	r6, [r6, #4]
 8005008:	e7b9      	b.n	8004f7e <_malloc_r+0x46>
 800500a:	230c      	movs	r3, #12
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4638      	mov	r0, r7
 8005010:	f000 f84c 	bl	80050ac <__malloc_unlock>
 8005014:	e7a1      	b.n	8004f5a <_malloc_r+0x22>
 8005016:	6025      	str	r5, [r4, #0]
 8005018:	e7de      	b.n	8004fd8 <_malloc_r+0xa0>
 800501a:	bf00      	nop
 800501c:	2000409c 	.word	0x2000409c

08005020 <_realloc_r>:
 8005020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005024:	4680      	mov	r8, r0
 8005026:	4614      	mov	r4, r2
 8005028:	460e      	mov	r6, r1
 800502a:	b921      	cbnz	r1, 8005036 <_realloc_r+0x16>
 800502c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005030:	4611      	mov	r1, r2
 8005032:	f7ff bf81 	b.w	8004f38 <_malloc_r>
 8005036:	b92a      	cbnz	r2, 8005044 <_realloc_r+0x24>
 8005038:	f7ff ff12 	bl	8004e60 <_free_r>
 800503c:	4625      	mov	r5, r4
 800503e:	4628      	mov	r0, r5
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005044:	f000 f838 	bl	80050b8 <_malloc_usable_size_r>
 8005048:	4284      	cmp	r4, r0
 800504a:	4607      	mov	r7, r0
 800504c:	d802      	bhi.n	8005054 <_realloc_r+0x34>
 800504e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005052:	d812      	bhi.n	800507a <_realloc_r+0x5a>
 8005054:	4621      	mov	r1, r4
 8005056:	4640      	mov	r0, r8
 8005058:	f7ff ff6e 	bl	8004f38 <_malloc_r>
 800505c:	4605      	mov	r5, r0
 800505e:	2800      	cmp	r0, #0
 8005060:	d0ed      	beq.n	800503e <_realloc_r+0x1e>
 8005062:	42bc      	cmp	r4, r7
 8005064:	4622      	mov	r2, r4
 8005066:	4631      	mov	r1, r6
 8005068:	bf28      	it	cs
 800506a:	463a      	movcs	r2, r7
 800506c:	f7ff fbb8 	bl	80047e0 <memcpy>
 8005070:	4631      	mov	r1, r6
 8005072:	4640      	mov	r0, r8
 8005074:	f7ff fef4 	bl	8004e60 <_free_r>
 8005078:	e7e1      	b.n	800503e <_realloc_r+0x1e>
 800507a:	4635      	mov	r5, r6
 800507c:	e7df      	b.n	800503e <_realloc_r+0x1e>
	...

08005080 <_sbrk_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4d06      	ldr	r5, [pc, #24]	; (800509c <_sbrk_r+0x1c>)
 8005084:	2300      	movs	r3, #0
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	f7fb fe80 	bl	8000d90 <_sbrk>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_sbrk_r+0x1a>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	b103      	cbz	r3, 800509a <_sbrk_r+0x1a>
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	200040a4 	.word	0x200040a4

080050a0 <__malloc_lock>:
 80050a0:	4801      	ldr	r0, [pc, #4]	; (80050a8 <__malloc_lock+0x8>)
 80050a2:	f000 b811 	b.w	80050c8 <__retarget_lock_acquire_recursive>
 80050a6:	bf00      	nop
 80050a8:	200040a8 	.word	0x200040a8

080050ac <__malloc_unlock>:
 80050ac:	4801      	ldr	r0, [pc, #4]	; (80050b4 <__malloc_unlock+0x8>)
 80050ae:	f000 b80c 	b.w	80050ca <__retarget_lock_release_recursive>
 80050b2:	bf00      	nop
 80050b4:	200040a8 	.word	0x200040a8

080050b8 <_malloc_usable_size_r>:
 80050b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050bc:	1f18      	subs	r0, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bfbc      	itt	lt
 80050c2:	580b      	ldrlt	r3, [r1, r0]
 80050c4:	18c0      	addlt	r0, r0, r3
 80050c6:	4770      	bx	lr

080050c8 <__retarget_lock_acquire_recursive>:
 80050c8:	4770      	bx	lr

080050ca <__retarget_lock_release_recursive>:
 80050ca:	4770      	bx	lr

080050cc <_init>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr

080050d8 <_fini>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr
