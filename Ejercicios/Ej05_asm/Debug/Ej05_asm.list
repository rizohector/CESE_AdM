
Ej05_asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800534c  0800534c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005354  08005354  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800535c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004038  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040ac  200040ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000e2e6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000fa07  00000000  00000000  0002e38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002615  00000000  00000000  0003dd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c88  00000000  00000000  000403a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e4531  00000000  00000000  00041030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b80  00000000  00000000  00125568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002591c  00000000  00000000  001260e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ba04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035c0  00000000  00000000  0014ba54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800513c 	.word	0x0800513c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800513c 	.word	0x0800513c

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_filtroVentana10>:
@ Constante para Assembler
.equ    WINDOWS_SIZE,10 @ Longitud de la ventana

.thumb_func
    asm_filtroVentana10:
        push {r4-r11}
 80001f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
        mov r5, r0
 80001fc:	4605      	mov	r5, r0
        mov r7, WINDOWS_SIZE
 80001fe:	f04f 070a 	mov.w	r7, #10
        mov r6, 0                  @ i = 0
 8000202:	f04f 0600 	mov.w	r6, #0

08000206 <.vector_loop>:
        .vector_loop:
            mov r3, 0               @ suma parcial = 0
 8000206:	f04f 0300 	mov.w	r3, #0
            mov r9, r6              @ j = i
 800020a:	46b1      	mov	r9, r6
            mov r5, r0
 800020c:	4605      	mov	r5, r0

0800020e <.windows_loop>:
            .windows_loop:
                @ calculo el modulo sobre la longitud del vector: j % longitud
                udiv r10, r9, r2
 800020e:	fbb9 faf2 	udiv	sl, r9, r2
                mul r11, r10, r2
 8000212:	fb0a fb02 	mul.w	fp, sl, r2
                sub r10, r9, r11
 8000216:	eba9 0a0b 	sub.w	sl, r9, fp

                add r5, r0, r10, LSL #1     @ Incremento la direccion de la posicion a leer del VectorIn
 800021a:	eb00 054a 	add.w	r5, r0, sl, lsl #1
                add r9, 1                   @ j++
 800021e:	f109 0901 	add.w	r9, r9, #1

                ldrh r4, [r5]       @ cargo el valor del VectorIn
 8000222:	882c      	ldrh	r4, [r5, #0]
                add r3, r4          @ lo sumo a lo acumulado
 8000224:	4423      	add	r3, r4

                subs r7, 1
 8000226:	3f01      	subs	r7, #1
                bne .windows_loop
 8000228:	d1f1      	bne.n	800020e <.windows_loop>
            mov r7, WINDOWS_SIZE
 800022a:	f04f 070a 	mov.w	r7, #10

            udiv r8, r3, r7         @ hago el promedio de los valores sumados
 800022e:	fbb3 f8f7 	udiv	r8, r3, r7
            strh r8, [r1], 2        @ lo guardo en el vector de salida
 8000232:	f821 8b02 	strh.w	r8, [r1], #2
            add r6,1                @ i++
 8000236:	f106 0601 	add.w	r6, r6, #1
            cmp r2, r6              @ comparo si ya se alcanzo la longitud del vector
 800023a:	42b2      	cmp	r2, r6
            bne .vector_loop
 800023c:	d1e3      	bne.n	8000206 <.vector_loop>
        pop {r4-r11}
 800023e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
        bx lr
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_uldivmod>:
 8000300:	b953      	cbnz	r3, 8000318 <__aeabi_uldivmod+0x18>
 8000302:	b94a      	cbnz	r2, 8000318 <__aeabi_uldivmod+0x18>
 8000304:	2900      	cmp	r1, #0
 8000306:	bf08      	it	eq
 8000308:	2800      	cmpeq	r0, #0
 800030a:	bf1c      	itt	ne
 800030c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000310:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000314:	f000 b974 	b.w	8000600 <__aeabi_idiv0>
 8000318:	f1ad 0c08 	sub.w	ip, sp, #8
 800031c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000320:	f000 f806 	bl	8000330 <__udivmoddi4>
 8000324:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032c:	b004      	add	sp, #16
 800032e:	4770      	bx	lr

08000330 <__udivmoddi4>:
 8000330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000334:	9d08      	ldr	r5, [sp, #32]
 8000336:	4604      	mov	r4, r0
 8000338:	468e      	mov	lr, r1
 800033a:	2b00      	cmp	r3, #0
 800033c:	d14d      	bne.n	80003da <__udivmoddi4+0xaa>
 800033e:	428a      	cmp	r2, r1
 8000340:	4694      	mov	ip, r2
 8000342:	d969      	bls.n	8000418 <__udivmoddi4+0xe8>
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	b152      	cbz	r2, 8000360 <__udivmoddi4+0x30>
 800034a:	fa01 f302 	lsl.w	r3, r1, r2
 800034e:	f1c2 0120 	rsb	r1, r2, #32
 8000352:	fa20 f101 	lsr.w	r1, r0, r1
 8000356:	fa0c fc02 	lsl.w	ip, ip, r2
 800035a:	ea41 0e03 	orr.w	lr, r1, r3
 800035e:	4094      	lsls	r4, r2
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	0c21      	lsrs	r1, r4, #16
 8000366:	fbbe f6f8 	udiv	r6, lr, r8
 800036a:	fa1f f78c 	uxth.w	r7, ip
 800036e:	fb08 e316 	mls	r3, r8, r6, lr
 8000372:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000376:	fb06 f107 	mul.w	r1, r6, r7
 800037a:	4299      	cmp	r1, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x64>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000386:	f080 811f 	bcs.w	80005c8 <__udivmoddi4+0x298>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 811c 	bls.w	80005c8 <__udivmoddi4+0x298>
 8000390:	3e02      	subs	r6, #2
 8000392:	4463      	add	r3, ip
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb3 f0f8 	udiv	r0, r3, r8
 800039c:	fb08 3310 	mls	r3, r8, r0, r3
 80003a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003a4:	fb00 f707 	mul.w	r7, r0, r7
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x92>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b4:	f080 810a 	bcs.w	80005cc <__udivmoddi4+0x29c>
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	f240 8107 	bls.w	80005cc <__udivmoddi4+0x29c>
 80003be:	4464      	add	r4, ip
 80003c0:	3802      	subs	r0, #2
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	1be4      	subs	r4, r4, r7
 80003c8:	2600      	movs	r6, #0
 80003ca:	b11d      	cbz	r5, 80003d4 <__udivmoddi4+0xa4>
 80003cc:	40d4      	lsrs	r4, r2
 80003ce:	2300      	movs	r3, #0
 80003d0:	e9c5 4300 	strd	r4, r3, [r5]
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	428b      	cmp	r3, r1
 80003dc:	d909      	bls.n	80003f2 <__udivmoddi4+0xc2>
 80003de:	2d00      	cmp	r5, #0
 80003e0:	f000 80ef 	beq.w	80005c2 <__udivmoddi4+0x292>
 80003e4:	2600      	movs	r6, #0
 80003e6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ea:	4630      	mov	r0, r6
 80003ec:	4631      	mov	r1, r6
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	fab3 f683 	clz	r6, r3
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d14a      	bne.n	8000490 <__udivmoddi4+0x160>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d302      	bcc.n	8000404 <__udivmoddi4+0xd4>
 80003fe:	4282      	cmp	r2, r0
 8000400:	f200 80f9 	bhi.w	80005f6 <__udivmoddi4+0x2c6>
 8000404:	1a84      	subs	r4, r0, r2
 8000406:	eb61 0303 	sbc.w	r3, r1, r3
 800040a:	2001      	movs	r0, #1
 800040c:	469e      	mov	lr, r3
 800040e:	2d00      	cmp	r5, #0
 8000410:	d0e0      	beq.n	80003d4 <__udivmoddi4+0xa4>
 8000412:	e9c5 4e00 	strd	r4, lr, [r5]
 8000416:	e7dd      	b.n	80003d4 <__udivmoddi4+0xa4>
 8000418:	b902      	cbnz	r2, 800041c <__udivmoddi4+0xec>
 800041a:	deff      	udf	#255	; 0xff
 800041c:	fab2 f282 	clz	r2, r2
 8000420:	2a00      	cmp	r2, #0
 8000422:	f040 8092 	bne.w	800054a <__udivmoddi4+0x21a>
 8000426:	eba1 010c 	sub.w	r1, r1, ip
 800042a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042e:	fa1f fe8c 	uxth.w	lr, ip
 8000432:	2601      	movs	r6, #1
 8000434:	0c20      	lsrs	r0, r4, #16
 8000436:	fbb1 f3f7 	udiv	r3, r1, r7
 800043a:	fb07 1113 	mls	r1, r7, r3, r1
 800043e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000442:	fb0e f003 	mul.w	r0, lr, r3
 8000446:	4288      	cmp	r0, r1
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x12c>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x12a>
 8000454:	4288      	cmp	r0, r1
 8000456:	f200 80cb 	bhi.w	80005f0 <__udivmoddi4+0x2c0>
 800045a:	4643      	mov	r3, r8
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1110 	mls	r1, r7, r0, r1
 8000468:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800046c:	fb0e fe00 	mul.w	lr, lr, r0
 8000470:	45a6      	cmp	lr, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x156>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800047c:	d202      	bcs.n	8000484 <__udivmoddi4+0x154>
 800047e:	45a6      	cmp	lr, r4
 8000480:	f200 80bb 	bhi.w	80005fa <__udivmoddi4+0x2ca>
 8000484:	4608      	mov	r0, r1
 8000486:	eba4 040e 	sub.w	r4, r4, lr
 800048a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800048e:	e79c      	b.n	80003ca <__udivmoddi4+0x9a>
 8000490:	f1c6 0720 	rsb	r7, r6, #32
 8000494:	40b3      	lsls	r3, r6
 8000496:	fa22 fc07 	lsr.w	ip, r2, r7
 800049a:	ea4c 0c03 	orr.w	ip, ip, r3
 800049e:	fa20 f407 	lsr.w	r4, r0, r7
 80004a2:	fa01 f306 	lsl.w	r3, r1, r6
 80004a6:	431c      	orrs	r4, r3
 80004a8:	40f9      	lsrs	r1, r7
 80004aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ae:	fa00 f306 	lsl.w	r3, r0, r6
 80004b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004b6:	0c20      	lsrs	r0, r4, #16
 80004b8:	fa1f fe8c 	uxth.w	lr, ip
 80004bc:	fb09 1118 	mls	r1, r9, r8, r1
 80004c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c4:	fb08 f00e 	mul.w	r0, r8, lr
 80004c8:	4288      	cmp	r0, r1
 80004ca:	fa02 f206 	lsl.w	r2, r2, r6
 80004ce:	d90b      	bls.n	80004e8 <__udivmoddi4+0x1b8>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004d8:	f080 8088 	bcs.w	80005ec <__udivmoddi4+0x2bc>
 80004dc:	4288      	cmp	r0, r1
 80004de:	f240 8085 	bls.w	80005ec <__udivmoddi4+0x2bc>
 80004e2:	f1a8 0802 	sub.w	r8, r8, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	1a09      	subs	r1, r1, r0
 80004ea:	b2a4      	uxth	r4, r4
 80004ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80004f0:	fb09 1110 	mls	r1, r9, r0, r1
 80004f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004fc:	458e      	cmp	lr, r1
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x1e2>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000508:	d26c      	bcs.n	80005e4 <__udivmoddi4+0x2b4>
 800050a:	458e      	cmp	lr, r1
 800050c:	d96a      	bls.n	80005e4 <__udivmoddi4+0x2b4>
 800050e:	3802      	subs	r0, #2
 8000510:	4461      	add	r1, ip
 8000512:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000516:	fba0 9402 	umull	r9, r4, r0, r2
 800051a:	eba1 010e 	sub.w	r1, r1, lr
 800051e:	42a1      	cmp	r1, r4
 8000520:	46c8      	mov	r8, r9
 8000522:	46a6      	mov	lr, r4
 8000524:	d356      	bcc.n	80005d4 <__udivmoddi4+0x2a4>
 8000526:	d053      	beq.n	80005d0 <__udivmoddi4+0x2a0>
 8000528:	b15d      	cbz	r5, 8000542 <__udivmoddi4+0x212>
 800052a:	ebb3 0208 	subs.w	r2, r3, r8
 800052e:	eb61 010e 	sbc.w	r1, r1, lr
 8000532:	fa01 f707 	lsl.w	r7, r1, r7
 8000536:	fa22 f306 	lsr.w	r3, r2, r6
 800053a:	40f1      	lsrs	r1, r6
 800053c:	431f      	orrs	r7, r3
 800053e:	e9c5 7100 	strd	r7, r1, [r5]
 8000542:	2600      	movs	r6, #0
 8000544:	4631      	mov	r1, r6
 8000546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	40d8      	lsrs	r0, r3
 8000550:	fa0c fc02 	lsl.w	ip, ip, r2
 8000554:	fa21 f303 	lsr.w	r3, r1, r3
 8000558:	4091      	lsls	r1, r2
 800055a:	4301      	orrs	r1, r0
 800055c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000560:	fa1f fe8c 	uxth.w	lr, ip
 8000564:	fbb3 f0f7 	udiv	r0, r3, r7
 8000568:	fb07 3610 	mls	r6, r7, r0, r3
 800056c:	0c0b      	lsrs	r3, r1, #16
 800056e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000572:	fb00 f60e 	mul.w	r6, r0, lr
 8000576:	429e      	cmp	r6, r3
 8000578:	fa04 f402 	lsl.w	r4, r4, r2
 800057c:	d908      	bls.n	8000590 <__udivmoddi4+0x260>
 800057e:	eb1c 0303 	adds.w	r3, ip, r3
 8000582:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000586:	d22f      	bcs.n	80005e8 <__udivmoddi4+0x2b8>
 8000588:	429e      	cmp	r6, r3
 800058a:	d92d      	bls.n	80005e8 <__udivmoddi4+0x2b8>
 800058c:	3802      	subs	r0, #2
 800058e:	4463      	add	r3, ip
 8000590:	1b9b      	subs	r3, r3, r6
 8000592:	b289      	uxth	r1, r1
 8000594:	fbb3 f6f7 	udiv	r6, r3, r7
 8000598:	fb07 3316 	mls	r3, r7, r6, r3
 800059c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a0:	fb06 f30e 	mul.w	r3, r6, lr
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x28a>
 80005a8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ac:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005b0:	d216      	bcs.n	80005e0 <__udivmoddi4+0x2b0>
 80005b2:	428b      	cmp	r3, r1
 80005b4:	d914      	bls.n	80005e0 <__udivmoddi4+0x2b0>
 80005b6:	3e02      	subs	r6, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	1ac9      	subs	r1, r1, r3
 80005bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005c0:	e738      	b.n	8000434 <__udivmoddi4+0x104>
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e705      	b.n	80003d4 <__udivmoddi4+0xa4>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e3      	b.n	8000394 <__udivmoddi4+0x64>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6f8      	b.n	80003c2 <__udivmoddi4+0x92>
 80005d0:	454b      	cmp	r3, r9
 80005d2:	d2a9      	bcs.n	8000528 <__udivmoddi4+0x1f8>
 80005d4:	ebb9 0802 	subs.w	r8, r9, r2
 80005d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005dc:	3801      	subs	r0, #1
 80005de:	e7a3      	b.n	8000528 <__udivmoddi4+0x1f8>
 80005e0:	4646      	mov	r6, r8
 80005e2:	e7ea      	b.n	80005ba <__udivmoddi4+0x28a>
 80005e4:	4620      	mov	r0, r4
 80005e6:	e794      	b.n	8000512 <__udivmoddi4+0x1e2>
 80005e8:	4640      	mov	r0, r8
 80005ea:	e7d1      	b.n	8000590 <__udivmoddi4+0x260>
 80005ec:	46d0      	mov	r8, sl
 80005ee:	e77b      	b.n	80004e8 <__udivmoddi4+0x1b8>
 80005f0:	3b02      	subs	r3, #2
 80005f2:	4461      	add	r1, ip
 80005f4:	e732      	b.n	800045c <__udivmoddi4+0x12c>
 80005f6:	4630      	mov	r0, r6
 80005f8:	e709      	b.n	800040e <__udivmoddi4+0xde>
 80005fa:	4464      	add	r4, ip
 80005fc:	3802      	subs	r0, #2
 80005fe:	e742      	b.n	8000486 <__udivmoddi4+0x156>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4a07      	ldr	r2, [pc, #28]	; (8000630 <vApplicationGetIdleTaskMemory+0x2c>)
 8000614:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <vApplicationGetIdleTaskMemory+0x30>)
 800061a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000090 	.word	0x20000090
 8000634:	200000e4 	.word	0x200000e4

08000638 <vPrintString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vPrintString( const char *pcString )
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000640:	f003 fe10 	bl	8004264 <vPortEnterCritical>

		HAL_UART_Transmit(&huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10);
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff fdfd 	bl	8000244 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	230a      	movs	r3, #10
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <vPrintString+0x2c>)
 8000654:	f001 fc5f 	bl	8001f16 <HAL_UART_Transmit>

	taskEXIT_CRITICAL();
 8000658:	f003 fe34 	bl	80042c4 <vPortExitCritical>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200002f8 	.word	0x200002f8

08000668 <get_diff>:


TickType_t get_diff( void )
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
    TickType_t tiempo;

    tiempo = keys_data.time_diff;
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <get_diff+0x1c>)
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	607b      	str	r3, [r7, #4]

    return tiempo;
 8000674:	687b      	ldr	r3, [r7, #4]
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200002e4 	.word	0x200002e4

08000688 <clear_diff>:


void clear_diff( void )
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
    keys_data.time_diff = KEYS_INVALID_TIME;
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <clear_diff+0x18>)
 800068e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000692:	60da      	str	r2, [r3, #12]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200002e4 	.word	0x200002e4

080006a4 <task_tecla_led>:



// Implementacion de funcion de la tarea
void task_tecla_led( void* taskParmPtr )
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b09e      	sub	sp, #120	; 0x78
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
    // ---------- CONFIGURACIONES ------------------------------
	char buffer [50];
	uint16_t vectorIn[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
 80006ac:	4b9c      	ldr	r3, [pc, #624]	; (8000920 <task_tecla_led+0x27c>)
 80006ae:	f107 0420 	add.w	r4, r7, #32
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	682b      	ldr	r3, [r5, #0]
 80006ba:	6023      	str	r3, [r4, #0]
    uint16_t vectorOut[10] = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
	uint32_t longitud = 10;
 80006cc:	230a      	movs	r3, #10
 80006ce:	66bb      	str	r3, [r7, #104]	; 0x68
	int index=0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	677b      	str	r3, [r7, #116]	; 0x74



		  //muestra el vector con los valores originales
		    while(index<longitud)
 80006d4:	e022      	b.n	800071c <task_tecla_led+0x78>
		{
		  if(index==0) vPrintString( "VALORES DEL VECTOR_IN \r\n" );
 80006d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <task_tecla_led+0x3e>
 80006dc:	4891      	ldr	r0, [pc, #580]	; (8000924 <task_tecla_led+0x280>)
 80006de:	f7ff ffab 	bl	8000638 <vPrintString>

		  sprintf( buffer, "Vector_In [%d] = %u \r\n", index,vectorIn[index]);
 80006e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	3378      	adds	r3, #120	; 0x78
 80006e8:	443b      	add	r3, r7
 80006ea:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 80006ee:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80006f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006f4:	498c      	ldr	r1, [pc, #560]	; (8000928 <task_tecla_led+0x284>)
 80006f6:	f004 f8c1 	bl	800487c <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 80006fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fda0 	bl	8000244 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	b29a      	uxth	r2, r3
 8000708:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	4886      	ldr	r0, [pc, #536]	; (800092c <task_tecla_led+0x288>)
 8000712:	f001 fc00 	bl	8001f16 <HAL_UART_Transmit>
		  index++;
 8000716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000718:	3301      	adds	r3, #1
 800071a:	677b      	str	r3, [r7, #116]	; 0x74
		    while(index<longitud)
 800071c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800071e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000720:	429a      	cmp	r2, r3
 8000722:	d8d8      	bhi.n	80006d6 <task_tecla_led+0x32>

		}


		 vPrintString( "Presionar boton para ingresar en función FILTRO_VENTANA_10 \r\n" );
 8000724:	4882      	ldr	r0, [pc, #520]	; (8000930 <task_tecla_led+0x28c>)
 8000726:	f7ff ff87 	bl	8000638 <vPrintString>
        // zeros (vector,longitud);

	tecla_led_state_t tecla_led_state = TECLA;
 800072a:	2300      	movs	r3, #0
 800072c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	TickType_t dif;

	keys_data.state          = STATE_BUTTON_UP;  		// Set initial state
 8000730:	4b80      	ldr	r3, [pc, #512]	; (8000934 <task_tecla_led+0x290>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
    keys_data.time_down      = KEYS_INVALID_TIME;
 8000736:	4b7f      	ldr	r3, [pc, #508]	; (8000934 <task_tecla_led+0x290>)
 8000738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800073c:	605a      	str	r2, [r3, #4]
    keys_data.time_up        = KEYS_INVALID_TIME;
 800073e:	4b7d      	ldr	r3, [pc, #500]	; (8000934 <task_tecla_led+0x290>)
 8000740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000744:	609a      	str	r2, [r3, #8]
    keys_data.time_diff      = KEYS_INVALID_TIME;
 8000746:	4b7b      	ldr	r3, [pc, #492]	; (8000934 <task_tecla_led+0x290>)
 8000748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800074c:	60da      	str	r2, [r3, #12]
    //vPrintString( "      Task: task_tecla_led\r\n" );

	// ---------- REPETIR POR SIEMPRE --------------------------
    while( 1 )
    {
    	if( tecla_led_state == TECLA)
 800074e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000752:	2b00      	cmp	r3, #0
 8000754:	d171      	bne.n	800083a <task_tecla_led+0x196>
    	{
    		switch( keys_data.state )
 8000756:	4b77      	ldr	r3, [pc, #476]	; (8000934 <task_tecla_led+0x290>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d861      	bhi.n	8000822 <task_tecla_led+0x17e>
 800075e:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <task_tecla_led+0xc0>)
 8000760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000764:	08000775 	.word	0x08000775
 8000768:	080007b7 	.word	0x080007b7
 800076c:	0800078d 	.word	0x0800078d
 8000770:	080007cf 	.word	0x080007cf
    		{
            	case STATE_BUTTON_UP:
            		/* CHECK TRANSITION CONDITIONS */
            		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000778:	486f      	ldr	r0, [pc, #444]	; (8000938 <task_tecla_led+0x294>)
 800077a:	f000 feb5 	bl	80014e8 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d052      	beq.n	800082a <task_tecla_led+0x186>
            		{
            			keys_data.state = STATE_BUTTON_FALLING;
 8000784:	4b6b      	ldr	r3, [pc, #428]	; (8000934 <task_tecla_led+0x290>)
 8000786:	2202      	movs	r2, #2
 8000788:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_FALLING\r\n" );
            		}
            		break;
 800078a:	e04e      	b.n	800082a <task_tecla_led+0x186>

            	case STATE_BUTTON_FALLING:
            		/* ENTRY */

            		/* CHECK TRANSITION CONDITIONS */
            		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	4869      	ldr	r0, [pc, #420]	; (8000938 <task_tecla_led+0x294>)
 8000792:	f000 fea9 	bl	80014e8 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d008      	beq.n	80007ae <task_tecla_led+0x10a>
            		{
            			keys_data.state = STATE_BUTTON_DOWN;
 800079c:	4b65      	ldr	r3, [pc, #404]	; (8000934 <task_tecla_led+0x290>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );

            			/* ACCION DEL EVENTO !*/
            			keys_data.time_down = xTaskGetTickCount();
 80007a2:	f002 ff09 	bl	80035b8 <xTaskGetTickCount>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a62      	ldr	r2, [pc, #392]	; (8000934 <task_tecla_led+0x290>)
 80007aa:	6053      	str	r3, [r2, #4]
            			keys_data.state = STATE_BUTTON_UP;
                    	//vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
            		}

            		/* LEAVE */
            		break;
 80007ac:	e042      	b.n	8000834 <task_tecla_led+0x190>
            			keys_data.state = STATE_BUTTON_UP;
 80007ae:	4b61      	ldr	r3, [pc, #388]	; (8000934 <task_tecla_led+0x290>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
            		break;
 80007b4:	e03e      	b.n	8000834 <task_tecla_led+0x190>

            	case STATE_BUTTON_DOWN:
            		/* CHECK TRANSITION CONDITIONS */
            		if (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ba:	485f      	ldr	r0, [pc, #380]	; (8000938 <task_tecla_led+0x294>)
 80007bc:	f000 fe94 	bl	80014e8 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d133      	bne.n	800082e <task_tecla_led+0x18a>
            		{
            			keys_data.state = STATE_BUTTON_RISING;
 80007c6:	4b5b      	ldr	r3, [pc, #364]	; (8000934 <task_tecla_led+0x290>)
 80007c8:	2203      	movs	r2, #3
 80007ca:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_RISING\r\n" );
            		}
            		break;
 80007cc:	e02f      	b.n	800082e <task_tecla_led+0x18a>
            	case STATE_BUTTON_RISING:
            		/* ENTRY */

            		/* CHECK TRANSITION CONDITIONS */

            		if (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 80007ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d2:	4859      	ldr	r0, [pc, #356]	; (8000938 <task_tecla_led+0x294>)
 80007d4:	f000 fe88 	bl	80014e8 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d11d      	bne.n	800081a <task_tecla_led+0x176>
            		{
            			tecla_led_state = LED;
 80007de:	2301      	movs	r3, #1
 80007e0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            			keys_data.state = STATE_BUTTON_UP;
 80007e4:	4b53      	ldr	r3, [pc, #332]	; (8000934 <task_tecla_led+0x290>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );

            			/* ACCION DEL EVENTO ! */
            			keys_data.time_up    = xTaskGetTickCount();
 80007ea:	f002 fee5 	bl	80035b8 <xTaskGetTickCount>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a50      	ldr	r2, [pc, #320]	; (8000934 <task_tecla_led+0x290>)
 80007f2:	6093      	str	r3, [r2, #8]
            			keys_data.time_diff  = keys_data.time_up - keys_data.time_down;
 80007f4:	4b4f      	ldr	r3, [pc, #316]	; (8000934 <task_tecla_led+0x290>)
 80007f6:	689a      	ldr	r2, [r3, #8]
 80007f8:	4b4e      	ldr	r3, [pc, #312]	; (8000934 <task_tecla_led+0x290>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a4d      	ldr	r2, [pc, #308]	; (8000934 <task_tecla_led+0x290>)
 8000800:	60d3      	str	r3, [r2, #12]
            			 if ( keys_data.time_diff  > 0 ) xSemaphoreGive( sem_btn );
 8000802:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <task_tecla_led+0x290>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d013      	beq.n	8000832 <task_tecla_led+0x18e>
 800080a:	4b4c      	ldr	r3, [pc, #304]	; (800093c <task_tecla_led+0x298>)
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	2300      	movs	r3, #0
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	f002 f8ea 	bl	80029ec <xQueueGenericSend>
            			keys_data.state = STATE_BUTTON_DOWN;
            			//vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );
            		}

            		/* LEAVE */
            		break;
 8000818:	e00b      	b.n	8000832 <task_tecla_led+0x18e>
            			keys_data.state = STATE_BUTTON_DOWN;
 800081a:	4b46      	ldr	r3, [pc, #280]	; (8000934 <task_tecla_led+0x290>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
            		break;
 8000820:	e007      	b.n	8000832 <task_tecla_led+0x18e>

            	default:
            		keys_data.state = STATE_BUTTON_UP;
 8000822:	4b44      	ldr	r3, [pc, #272]	; (8000934 <task_tecla_led+0x290>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
            		//vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );

            		break;
 8000828:	e004      	b.n	8000834 <task_tecla_led+0x190>
            		break;
 800082a:	bf00      	nop
 800082c:	e002      	b.n	8000834 <task_tecla_led+0x190>
            		break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <task_tecla_led+0x190>
            		break;
 8000832:	bf00      	nop
    		}
    		// Envia la tarea al estado bloqueado durante DEBOUNCE_TIME_MS
    		vTaskDelay( DEBOUNCE_TIME_MS / portTICK_RATE_MS );
 8000834:	2028      	movs	r0, #40	; 0x28
 8000836:	f002 fd81 	bl	800333c <vTaskDelay>
    	}

    	if( tecla_led_state == LED)
 800083a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800083e:	2b01      	cmp	r3, #1
 8000840:	d185      	bne.n	800074e <task_tecla_led+0xaa>
    	{


    		        xSemaphoreTake( sem_btn, portMAX_DELAY );			// Esperamos tecla
 8000842:	4b3e      	ldr	r3, [pc, #248]	; (800093c <task_tecla_led+0x298>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800084a:	4618      	mov	r0, r3
 800084c:	f002 f9cc 	bl	8002be8 <xQueueSemaphoreTake>
    		        asm_filtroVentana10(vectorIn, vectorOut, longitud);
 8000850:	f107 010c 	add.w	r1, r7, #12
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fccc 	bl	80001f8 <asm_filtroVentana10>
    		        vPrintString( "INGRESO A LA FUNCION ASM_FILTRO_VENTANA_10 \r\n" );
 8000860:	4837      	ldr	r0, [pc, #220]	; (8000940 <task_tecla_led+0x29c>)
 8000862:	f7ff fee9 	bl	8000638 <vPrintString>
    		        vPrintString( "LOS VALORES DEL VECTOR_OUT SON: \r\n" );
 8000866:	4837      	ldr	r0, [pc, #220]	; (8000944 <task_tecla_led+0x2a0>)
 8000868:	f7ff fee6 	bl	8000638 <vPrintString>
    		        index=0;
 800086c:	2300      	movs	r3, #0
 800086e:	677b      	str	r3, [r7, #116]	; 0x74

    		        //muestra el vector
    		        while(index<longitud)
 8000870:	e01c      	b.n	80008ac <task_tecla_led+0x208>
    		        {

    		         sprintf( buffer, "VectorOut [%d] = %u \r\n", index,vectorOut[index]);
 8000872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	3378      	adds	r3, #120	; 0x78
 8000878:	443b      	add	r3, r7
 800087a:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 800087e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000882:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000884:	4930      	ldr	r1, [pc, #192]	; (8000948 <task_tecla_led+0x2a4>)
 8000886:	f003 fff9 	bl	800487c <siprintf>
    		        HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 800088a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fcd8 	bl	8000244 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800089c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a0:	4822      	ldr	r0, [pc, #136]	; (800092c <task_tecla_led+0x288>)
 80008a2:	f001 fb38 	bl	8001f16 <HAL_UART_Transmit>
    		        index++;
 80008a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008a8:	3301      	adds	r3, #1
 80008aa:	677b      	str	r3, [r7, #116]	; 0x74
    		        while(index<longitud)
 80008ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8de      	bhi.n	8000872 <task_tecla_led+0x1ce>
    		        }


            dif = get_diff();
 80008b4:	f7ff fed8 	bl	8000668 <get_diff>
 80008b8:	66f8      	str	r0, [r7, #108]	; 0x6c

            if( dif != KEYS_INVALID_TIME )
 80008ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008c0:	d028      	beq.n	8000914 <task_tecla_led+0x270>
            {
                if( dif > LED_RATE_MS )
 80008c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008c8:	d902      	bls.n	80008d0 <task_tecla_led+0x22c>
                {
                    dif = LED_RATE_MS;
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
    			tecla_led_state = TECLA;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

        		sprintf( buffer, "            led_state: Encendido - dif %u\r\n", (unsigned int)dif );
 80008d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80008dc:	491b      	ldr	r1, [pc, #108]	; (800094c <task_tecla_led+0x2a8>)
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 ffcc 	bl	800487c <siprintf>
        		vPrintString( buffer );
 80008e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fea5 	bl	8000638 <vPrintString>
            	HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET );
 80008ee:	2201      	movs	r2, #1
 80008f0:	2101      	movs	r1, #1
 80008f2:	4817      	ldr	r0, [pc, #92]	; (8000950 <task_tecla_led+0x2ac>)
 80008f4:	f000 fe10 	bl	8001518 <HAL_GPIO_WritePin>

                // Envia la tarea al estado bloqueado durante dif
                vTaskDelay( dif / portTICK_RATE_MS );
 80008f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80008fa:	f002 fd1f 	bl	800333c <vTaskDelay>

            	vPrintString( "            led_state: Apagado\r\n" );
 80008fe:	4815      	ldr	r0, [pc, #84]	; (8000954 <task_tecla_led+0x2b0>)
 8000900:	f7ff fe9a 	bl	8000638 <vPrintString>
            	HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET );
 8000904:	2200      	movs	r2, #0
 8000906:	2101      	movs	r1, #1
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <task_tecla_led+0x2ac>)
 800090a:	f000 fe05 	bl	8001518 <HAL_GPIO_WritePin>

                clear_diff();
 800090e:	f7ff febb 	bl	8000688 <clear_diff>
 8000912:	e71c      	b.n	800074e <task_tecla_led+0xaa>
            }
            else
            {
                // Envia la tarea al estado bloqueado durante LED_RATE_MS
                vTaskDelay( LED_RATE_MS / portTICK_RATE_MS );
 8000914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000918:	f002 fd10 	bl	800333c <vTaskDelay>
    	if( tecla_led_state == TECLA)
 800091c:	e717      	b.n	800074e <task_tecla_led+0xaa>
 800091e:	bf00      	nop
 8000920:	08005290 	.word	0x08005290
 8000924:	08005160 	.word	0x08005160
 8000928:	0800517c 	.word	0x0800517c
 800092c:	200002f8 	.word	0x200002f8
 8000930:	08005194 	.word	0x08005194
 8000934:	200002e4 	.word	0x200002e4
 8000938:	40020800 	.word	0x40020800
 800093c:	200002f4 	.word	0x200002f4
 8000940:	080051d4 	.word	0x080051d4
 8000944:	08005204 	.word	0x08005204
 8000948:	08005228 	.word	0x08005228
 800094c:	08005240 	.word	0x08005240
 8000950:	40020400 	.word	0x40020400
 8000954:	0800526c 	.word	0x0800526c

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main( void )
{
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b08e      	sub	sp, #56	; 0x38
 800095c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 fabf 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f863 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 f8f5 	bl	8000b54 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800096a:	f000 f8c9 	bl	8000b00 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
	vPrintString( "Main: Ejercicio 05 -Language C - AdM.\r\n" );
 800096e:	4829      	ldr	r0, [pc, #164]	; (8000a14 <main+0xbc>)
 8000970:	f7ff fe62 	bl	8000638 <vPrintString>

  /* USER CODE END 2 */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <main+0xc0>)
 8000976:	1d3c      	adds	r4, r7, #4
 8000978:	461d      	mov	r5, r3
 800097a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000982:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fe57 	bl	800263e <osThreadCreate>
 8000990:	4603      	mov	r3, r0
 8000992:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <main+0xc4>)
 8000994:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

    // Crear tareas en freeRTOS
    BaseType_t res =
    	xTaskCreate (
 8000996:	2300      	movs	r3, #0
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	2301      	movs	r3, #1
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2300      	movs	r3, #0
 80009a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a4:	491e      	ldr	r1, [pc, #120]	; (8000a20 <main+0xc8>)
 80009a6:	481f      	ldr	r0, [pc, #124]	; (8000a24 <main+0xcc>)
 80009a8:	f002 fb89 	bl	80030be <xTaskCreate>
 80009ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    //{
    //	gpioWrite( LEDR, ON );
    //	vPrintString( "Error al crear las tareas.\r\n" );
    //	while(TRUE);						// VER ESTE LINK: https://pbs.twimg.com/media/BafQje7CcAAN5en.jpg
    //}
    configASSERT( res == pdPASS);	// gestion de errores
 80009ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d00a      	beq.n	80009ca <main+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b8:	f383 8811 	msr	BASEPRI, r3
 80009bc:	f3bf 8f6f 	isb	sy
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80009c6:	bf00      	nop
 80009c8:	e7fe      	b.n	80009c8 <main+0x70>

  /* USER CODE END RTOS_THREADS */
    // Crear semaforo
    	sem_btn = xSemaphoreCreateBinary();
 80009ca:	2203      	movs	r2, #3
 80009cc:	2100      	movs	r1, #0
 80009ce:	2001      	movs	r0, #1
 80009d0:	f001 ffb2 	bl	8002938 <xQueueGenericCreate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <main+0xd0>)
 80009d8:	6013      	str	r3, [r2, #0]

    	// Gestion de errores de semaforos
    	configASSERT( sem_btn !=  NULL  );
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <main+0xd0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d10a      	bne.n	80009f8 <main+0xa0>
	__asm volatile
 80009e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e6:	f383 8811 	msr	BASEPRI, r3
 80009ea:	f3bf 8f6f 	isb	sy
 80009ee:	f3bf 8f4f 	dsb	sy
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80009f4:	bf00      	nop
 80009f6:	e7fe      	b.n	80009f6 <main+0x9e>

  /* Start scheduler */
  osKernelStart();
 80009f8:	f001 fe1a 	bl	8002630 <osKernelStart>
	__asm volatile
 80009fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a00:	f383 8811 	msr	BASEPRI, r3
 8000a04:	f3bf 8f6f 	isb	sy
 8000a08:	f3bf 8f4f 	dsb	sy
 8000a0c:	623b      	str	r3, [r7, #32]
}
 8000a0e:	bf00      	nop
  // ---------- REPETIR POR SIEMPRE --------------------------
  //while( TRUE )
  //{
  // Si cae en este while 1 significa que no pudo iniciar el scheduler
  //}
  configASSERT( 0 );
 8000a10:	e7fe      	b.n	8000a10 <main+0xb8>
 8000a12:	bf00      	nop
 8000a14:	080052a4 	.word	0x080052a4
 8000a18:	080052dc 	.word	0x080052dc
 8000a1c:	2000033c 	.word	0x2000033c
 8000a20:	080052cc 	.word	0x080052cc
 8000a24:	080006a5 	.word	0x080006a5
 8000a28:	200002f4 	.word	0x200002f4

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 ff16 	bl	800486c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <SystemClock_Config+0xd0>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <SystemClock_Config+0xd0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a8c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a92:	2302      	movs	r3, #2
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aa0:	23a8      	movs	r3, #168	; 0xa8
 8000aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fd4b 	bl	800154c <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000abc:	f000 f900 	bl	8000cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000acc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2105      	movs	r1, #5
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 ffac 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aea:	f000 f8e9 	bl	8000cc0 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	; 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART3_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_USART3_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_USART3_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART3_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART3_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART3_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART3_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART3_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART3_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART3_UART_Init+0x4c>)
 8000b38:	f001 f9a0 	bl	8001e7c <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f8bd 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200002f8 	.word	0x200002f8
 8000b50:	40004800 	.word	0x40004800

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a4b      	ldr	r2, [pc, #300]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	4b45      	ldr	r3, [pc, #276]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a44      	ldr	r2, [pc, #272]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b42      	ldr	r3, [pc, #264]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a3d      	ldr	r2, [pc, #244]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a2f      	ldr	r2, [pc, #188]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c18:	4822      	ldr	r0, [pc, #136]	; (8000ca4 <MX_GPIO_Init+0x150>)
 8000c1a:	f000 fc7d 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	4821      	ldr	r0, [pc, #132]	; (8000ca8 <MX_GPIO_Init+0x154>)
 8000c24:	f000 fc78 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481b      	ldr	r0, [pc, #108]	; (8000cac <MX_GPIO_Init+0x158>)
 8000c40:	f000 faa6 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c44:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_GPIO_Init+0x150>)
 8000c5e:	f000 fa97 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <MX_GPIO_Init+0x154>)
 8000c7a:	f000 fa89 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_GPIO_Init+0x154>)
 8000c92:	f000 fa7d 	bl	8001190 <HAL_GPIO_Init>

}
 8000c96:	bf00      	nop
 8000c98:	3730      	adds	r7, #48	; 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40021800 	.word	0x40021800
 8000cac:	40020800 	.word	0x40020800

08000cb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f001 fd0c 	bl	80026d6 <osDelay>
 8000cbe:	e7fb      	b.n	8000cb8 <StartDefaultTask+0x8>

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_MspInit+0x54>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a11      	ldr	r2, [pc, #68]	; (8000d20 <HAL_MspInit+0x54>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x54>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_MspInit+0x54>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_MspInit+0x54>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_MspInit+0x54>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	f06f 0001 	mvn.w	r0, #1
 8000d12:	f000 fa14 	bl	800113e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12c      	bne.n	8000da0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d90:	2307      	movs	r3, #7
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0x8c>)
 8000d9c:	f000 f9f8 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004800 	.word	0x40004800
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020c00 	.word	0x40020c00

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f8ce 	bl	8000f84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000de8:	f002 feea 	bl	8003bc0 <xTaskGetSchedulerState>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d001      	beq.n	8000df6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000df2:	f003 fac9 	bl	8004388 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f003 fce6 	bl	80047fc <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20030000 	.word	0x20030000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	20000340 	.word	0x20000340
 8000e64:	200040b0 	.word	0x200040b0

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eb6:	f7ff ffd7 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f003 fca5 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fd4b 	bl	8000958 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ec4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ed0:	0800535c 	.word	0x0800535c
  ldr r2, =_sbss
 8000ed4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ed8:	200040ac 	.word	0x200040ac

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f90d 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff feda 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f917 	bl	8001176 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 f8ed 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000344 	.word	0x20000344

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000344 	.word	0x20000344

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001108:	f7ff ff8e 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff47 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff5c 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff8e 	bl	800107c <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb0 	bl	80010e4 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e177      	b.n	800149c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8166 	bne.w	8001496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80c0 	beq.w	8001496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a61      	ldr	r2, [pc, #388]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d037      	beq.n	80013ce <HAL_GPIO_Init+0x23e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d031      	beq.n	80013ca <HAL_GPIO_Init+0x23a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a56      	ldr	r2, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d02b      	beq.n	80013c6 <HAL_GPIO_Init+0x236>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <HAL_GPIO_Init+0x338>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d025      	beq.n	80013c2 <HAL_GPIO_Init+0x232>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a54      	ldr	r2, [pc, #336]	; (80014cc <HAL_GPIO_Init+0x33c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01f      	beq.n	80013be <HAL_GPIO_Init+0x22e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <HAL_GPIO_Init+0x340>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x22a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_GPIO_Init+0x344>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <HAL_GPIO_Init+0x348>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_GPIO_Init+0x34c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_GPIO_Init+0x350>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x21a>
 80013a6:	2309      	movs	r3, #9
 80013a8:	e012      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013aa:	230a      	movs	r3, #10
 80013ac:	e010      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ae:	2308      	movs	r3, #8
 80013b0:	e00e      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ce:	2300      	movs	r3, #0
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_GPIO_Init+0x328>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <HAL_GPIO_Init+0x354>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f67f ae84 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40022400 	.word	0x40022400
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e001      	b.n	800150a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001534:	e003      	b.n	800153e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	041a      	lsls	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e267      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d075      	beq.n	8001656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	4b88      	ldr	r3, [pc, #544]	; (800178c <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	d00c      	beq.n	8001590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001576:	4b85      	ldr	r3, [pc, #532]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157e:	2b08      	cmp	r3, #8
 8001580:	d112      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	4b82      	ldr	r3, [pc, #520]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800158e:	d10b      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	4b7e      	ldr	r3, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d05b      	beq.n	8001654 <HAL_RCC_OscConfig+0x108>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d157      	bne.n	8001654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e242      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x74>
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a75      	ldr	r2, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e01d      	b.n	80015fc <HAL_RCC_OscConfig+0xb0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x98>
 80015ca:	4b70      	ldr	r3, [pc, #448]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6f      	ldr	r2, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b6d      	ldr	r3, [pc, #436]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6c      	ldr	r2, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0xb0>
 80015e4:	4b69      	ldr	r3, [pc, #420]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a68      	ldr	r2, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b66      	ldr	r3, [pc, #408]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a65      	ldr	r2, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fcd2 	bl	8000fac <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fcce 	bl	8000fac <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e207      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0xc0>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fcbe 	bl	8000fac <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fcba 	bl	8000fac <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1f3      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	4b51      	ldr	r3, [pc, #324]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0xe8>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d063      	beq.n	800172a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001662:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001676:	2b08      	cmp	r3, #8
 8001678:	d11c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_RCC_OscConfig+0x240>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d116      	bne.n	80016b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_RCC_OscConfig+0x152>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e1c7      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	e03a      	b.n	800172a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_RCC_OscConfig+0x244>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff fc73 	bl	8000fac <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff fc6f 	bl	8000fac <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1a8      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4925      	ldr	r1, [pc, #148]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCC_OscConfig+0x244>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fc52 	bl	8000fac <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fc4e 	bl	8000fac <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e187      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d036      	beq.n	80017a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d016      	beq.n	800176c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_RCC_OscConfig+0x248>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fc32 	bl	8000fac <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fc2e 	bl	8000fac <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e167      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x200>
 800176a:	e01b      	b.n	80017a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_RCC_OscConfig+0x248>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff fc1b 	bl	8000fac <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	e00e      	b.n	8001798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff fc17 	bl	8000fac <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d907      	bls.n	8001798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e150      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
 800178c:	40023800 	.word	0x40023800
 8001790:	42470000 	.word	0x42470000
 8001794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800179a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ea      	bne.n	800177a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8097 	beq.w	80018e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b81      	ldr	r3, [pc, #516]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10f      	bne.n	80017e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a7c      	ldr	r2, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b7a      	ldr	r3, [pc, #488]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4b77      	ldr	r3, [pc, #476]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ee:	4b74      	ldr	r3, [pc, #464]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a73      	ldr	r2, [pc, #460]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fbd7 	bl	8000fac <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fbd3 	bl	8000fac <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e10c      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x2ea>
 8001828:	4b64      	ldr	r3, [pc, #400]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a63      	ldr	r2, [pc, #396]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	e01c      	b.n	8001870 <HAL_RCC_OscConfig+0x324>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x30c>
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a5e      	ldr	r2, [pc, #376]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a5b      	ldr	r2, [pc, #364]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x324>
 8001858:	4b58      	ldr	r3, [pc, #352]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a57      	ldr	r2, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	4a54      	ldr	r2, [pc, #336]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800186a:	f023 0304 	bic.w	r3, r3, #4
 800186e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d015      	beq.n	80018a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fb98 	bl	8000fac <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fb94 	bl	8000fac <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0cb      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0ee      	beq.n	8001880 <HAL_RCC_OscConfig+0x334>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a4:	f7ff fb82 	bl	8000fac <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff fb7e 	bl	8000fac <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0b5      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c2:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ee      	bne.n	80018ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a38      	ldr	r2, [pc, #224]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a1 	beq.w	8001a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d05c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d141      	bne.n	8001982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fb52 	bl	8000fac <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fb4e 	bl	8000fac <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e087      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	3b01      	subs	r3, #1
 8001944:	041b      	lsls	r3, r3, #16
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	491b      	ldr	r1, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fb27 	bl	8000fac <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff fb23 	bl	8000fac <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e05c      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x416>
 8001980:	e054      	b.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fb10 	bl	8000fac <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff fb0c 	bl	8000fac <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e045      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x444>
 80019ae:	e03d      	b.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e038      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000
 80019c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x4ec>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d028      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d121      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d11a      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d111      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	3b01      	subs	r3, #1
 8001a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0cc      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d90c      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	494d      	ldr	r1, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d044      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d119      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e07f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e067      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fa3e 	bl	8000fac <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff fa3a 	bl	8000fac <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e04f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d20c      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e032      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc2:	f000 f821 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	490a      	ldr	r1, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f99e 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08005300 	.word	0x08005300
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c0c:	b094      	sub	sp, #80	; 0x50
 8001c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c18:	2300      	movs	r3, #0
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c20:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d00d      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x40>
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	f200 80e1 	bhi.w	8001df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x34>
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3a:	e0db      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c40:	e0db      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c42:	4b73      	ldr	r3, [pc, #460]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c46:	e0d8      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c48:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c52:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	2200      	movs	r2, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
 8001c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0159      	lsls	r1, r3, #5
 8001c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8c:	0150      	lsls	r0, r2, #5
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4621      	mov	r1, r4
 8001c94:	1a51      	subs	r1, r2, r1
 8001c96:	6139      	str	r1, [r7, #16]
 8001c98:	4629      	mov	r1, r5
 8001c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cac:	4659      	mov	r1, fp
 8001cae:	018b      	lsls	r3, r1, #6
 8001cb0:	4651      	mov	r1, sl
 8001cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cb6:	4651      	mov	r1, sl
 8001cb8:	018a      	lsls	r2, r1, #6
 8001cba:	4651      	mov	r1, sl
 8001cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8001cc0:	4659      	mov	r1, fp
 8001cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cda:	4690      	mov	r8, r2
 8001cdc:	4699      	mov	r9, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	eb18 0303 	adds.w	r3, r8, r3
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	eb49 0303 	adc.w	r3, r9, r3
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	024b      	lsls	r3, r1, #9
 8001cfe:	4621      	mov	r1, r4
 8001d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d04:	4621      	mov	r1, r4
 8001d06:	024a      	lsls	r2, r1, #9
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0e:	2200      	movs	r2, #0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d18:	f7fe faf2 	bl	8000300 <__aeabi_uldivmod>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4613      	mov	r3, r2
 8001d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d24:	e058      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4611      	mov	r1, r2
 8001d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d40:	4642      	mov	r2, r8
 8001d42:	464b      	mov	r3, r9
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	0159      	lsls	r1, r3, #5
 8001d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d52:	0150      	lsls	r0, r2, #5
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4641      	mov	r1, r8
 8001d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d5e:	4649      	mov	r1, r9
 8001d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d78:	ebb2 040a 	subs.w	r4, r2, sl
 8001d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	00eb      	lsls	r3, r5, #3
 8001d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d8e:	00e2      	lsls	r2, r4, #3
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	4643      	mov	r3, r8
 8001d96:	18e3      	adds	r3, r4, r3
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	eb45 0303 	adc.w	r3, r5, r3
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dae:	4629      	mov	r1, r5
 8001db0:	028b      	lsls	r3, r1, #10
 8001db2:	4621      	mov	r1, r4
 8001db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db8:	4621      	mov	r1, r4
 8001dba:	028a      	lsls	r2, r1, #10
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	61fa      	str	r2, [r7, #28]
 8001dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dcc:	f7fe fa98 	bl	8000300 <__aeabi_uldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3750      	adds	r7, #80	; 0x50
 8001e00:	46bd      	mov	sp, r7
 8001e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	007a1200 	.word	0x007a1200

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08005310 	.word	0x08005310

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffdc 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0b5b      	lsrs	r3, r3, #13
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08005310 	.word	0x08005310

08001e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e03f      	b.n	8001f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe ff3e 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f929 	bl	8002118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b08a      	sub	sp, #40	; 0x28
 8001f1a:	af02      	add	r7, sp, #8
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d17c      	bne.n	8002030 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_UART_Transmit+0x2c>
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e075      	b.n	8002032 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_UART_Transmit+0x3e>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e06e      	b.n	8002032 <HAL_UART_Transmit+0x11c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2221      	movs	r2, #33	; 0x21
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f6a:	f7ff f81f 	bl	8000fac <HAL_GetTick>
 8001f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	88fa      	ldrh	r2, [r7, #6]
 8001f7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f84:	d108      	bne.n	8001f98 <HAL_UART_Transmit+0x82>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d104      	bne.n	8001f98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	e003      	b.n	8001fa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fa8:	e02a      	b.n	8002000 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f840 	bl	800203a <UART_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e036      	b.n	8002032 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	3302      	adds	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	e007      	b.n	8001ff2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1cf      	bne.n	8001faa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2200      	movs	r2, #0
 8002012:	2140      	movs	r1, #64	; 0x40
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f810 	bl	800203a <UART_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e006      	b.n	8002032 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b090      	sub	sp, #64	; 0x40
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204a:	e050      	b.n	80020ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002052:	d04c      	beq.n	80020ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <UART_WaitOnFlagUntilTimeout+0x30>
 800205a:	f7fe ffa7 	bl	8000fac <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002066:	429a      	cmp	r2, r3
 8002068:	d241      	bcs.n	80020ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	330c      	adds	r3, #12
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	e853 3f00 	ldrex	r3, [r3]
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	330c      	adds	r3, #12
 8002088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800208a:	637a      	str	r2, [r7, #52]	; 0x34
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002092:	e841 2300 	strex	r3, r2, [r1]
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1e5      	bne.n	800206a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3314      	adds	r3, #20
 80020a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	e853 3f00 	ldrex	r3, [r3]
 80020ac:	613b      	str	r3, [r7, #16]
   return(result);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3314      	adds	r3, #20
 80020bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020be:	623a      	str	r2, [r7, #32]
 80020c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c2:	69f9      	ldr	r1, [r7, #28]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	e841 2300 	strex	r3, r2, [r1]
 80020ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e5      	bne.n	800209e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e00f      	b.n	800210e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4013      	ands	r3, r2
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	429a      	cmp	r2, r3
 800210a:	d09f      	beq.n	800204c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3740      	adds	r7, #64	; 0x40
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800211c:	b0c0      	sub	sp, #256	; 0x100
 800211e:	af00      	add	r7, sp, #0
 8002120:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002134:	68d9      	ldr	r1, [r3, #12]
 8002136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	ea40 0301 	orr.w	r3, r0, r1
 8002140:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	431a      	orrs	r2, r3
 8002150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	431a      	orrs	r2, r3
 8002158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002170:	f021 010c 	bic.w	r1, r1, #12
 8002174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800217e:	430b      	orrs	r3, r1
 8002180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800218e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002192:	6999      	ldr	r1, [r3, #24]
 8002194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	ea40 0301 	orr.w	r3, r0, r1
 800219e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b8f      	ldr	r3, [pc, #572]	; (80023e4 <UART_SetConfig+0x2cc>)
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d005      	beq.n	80021b8 <UART_SetConfig+0xa0>
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b8d      	ldr	r3, [pc, #564]	; (80023e8 <UART_SetConfig+0x2d0>)
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d104      	bne.n	80021c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021b8:	f7ff fe4c 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80021bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021c0:	e003      	b.n	80021ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021c2:	f7ff fe33 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 80021c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d4:	f040 810c 	bne.w	80023f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021dc:	2200      	movs	r2, #0
 80021de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021ea:	4622      	mov	r2, r4
 80021ec:	462b      	mov	r3, r5
 80021ee:	1891      	adds	r1, r2, r2
 80021f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80021f2:	415b      	adcs	r3, r3
 80021f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021fa:	4621      	mov	r1, r4
 80021fc:	eb12 0801 	adds.w	r8, r2, r1
 8002200:	4629      	mov	r1, r5
 8002202:	eb43 0901 	adc.w	r9, r3, r1
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800221a:	4690      	mov	r8, r2
 800221c:	4699      	mov	r9, r3
 800221e:	4623      	mov	r3, r4
 8002220:	eb18 0303 	adds.w	r3, r8, r3
 8002224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002228:	462b      	mov	r3, r5
 800222a:	eb49 0303 	adc.w	r3, r9, r3
 800222e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800223e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002246:	460b      	mov	r3, r1
 8002248:	18db      	adds	r3, r3, r3
 800224a:	653b      	str	r3, [r7, #80]	; 0x50
 800224c:	4613      	mov	r3, r2
 800224e:	eb42 0303 	adc.w	r3, r2, r3
 8002252:	657b      	str	r3, [r7, #84]	; 0x54
 8002254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002258:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800225c:	f7fe f850 	bl	8000300 <__aeabi_uldivmod>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4b61      	ldr	r3, [pc, #388]	; (80023ec <UART_SetConfig+0x2d4>)
 8002266:	fba3 2302 	umull	r2, r3, r3, r2
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	011c      	lsls	r4, r3, #4
 800226e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002272:	2200      	movs	r2, #0
 8002274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002278:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800227c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002280:	4642      	mov	r2, r8
 8002282:	464b      	mov	r3, r9
 8002284:	1891      	adds	r1, r2, r2
 8002286:	64b9      	str	r1, [r7, #72]	; 0x48
 8002288:	415b      	adcs	r3, r3
 800228a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800228c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002290:	4641      	mov	r1, r8
 8002292:	eb12 0a01 	adds.w	sl, r2, r1
 8002296:	4649      	mov	r1, r9
 8002298:	eb43 0b01 	adc.w	fp, r3, r1
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022b0:	4692      	mov	sl, r2
 80022b2:	469b      	mov	fp, r3
 80022b4:	4643      	mov	r3, r8
 80022b6:	eb1a 0303 	adds.w	r3, sl, r3
 80022ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022be:	464b      	mov	r3, r9
 80022c0:	eb4b 0303 	adc.w	r3, fp, r3
 80022c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022dc:	460b      	mov	r3, r1
 80022de:	18db      	adds	r3, r3, r3
 80022e0:	643b      	str	r3, [r7, #64]	; 0x40
 80022e2:	4613      	mov	r3, r2
 80022e4:	eb42 0303 	adc.w	r3, r2, r3
 80022e8:	647b      	str	r3, [r7, #68]	; 0x44
 80022ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022f2:	f7fe f805 	bl	8000300 <__aeabi_uldivmod>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <UART_SetConfig+0x2d4>)
 80022fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2264      	movs	r2, #100	; 0x64
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	1acb      	subs	r3, r1, r3
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <UART_SetConfig+0x2d4>)
 8002314:	fba3 2302 	umull	r2, r3, r3, r2
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002320:	441c      	add	r4, r3
 8002322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002326:	2200      	movs	r2, #0
 8002328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800232c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002330:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002334:	4642      	mov	r2, r8
 8002336:	464b      	mov	r3, r9
 8002338:	1891      	adds	r1, r2, r2
 800233a:	63b9      	str	r1, [r7, #56]	; 0x38
 800233c:	415b      	adcs	r3, r3
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002344:	4641      	mov	r1, r8
 8002346:	1851      	adds	r1, r2, r1
 8002348:	6339      	str	r1, [r7, #48]	; 0x30
 800234a:	4649      	mov	r1, r9
 800234c:	414b      	adcs	r3, r1
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800235c:	4659      	mov	r1, fp
 800235e:	00cb      	lsls	r3, r1, #3
 8002360:	4651      	mov	r1, sl
 8002362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002366:	4651      	mov	r1, sl
 8002368:	00ca      	lsls	r2, r1, #3
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	4603      	mov	r3, r0
 8002370:	4642      	mov	r2, r8
 8002372:	189b      	adds	r3, r3, r2
 8002374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002378:	464b      	mov	r3, r9
 800237a:	460a      	mov	r2, r1
 800237c:	eb42 0303 	adc.w	r3, r2, r3
 8002380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002390:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002394:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002398:	460b      	mov	r3, r1
 800239a:	18db      	adds	r3, r3, r3
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
 800239e:	4613      	mov	r3, r2
 80023a0:	eb42 0303 	adc.w	r3, r2, r3
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023ae:	f7fd ffa7 	bl	8000300 <__aeabi_uldivmod>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <UART_SetConfig+0x2d4>)
 80023b8:	fba3 1302 	umull	r1, r3, r3, r2
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	2164      	movs	r1, #100	; 0x64
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	3332      	adds	r3, #50	; 0x32
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <UART_SetConfig+0x2d4>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	f003 0207 	and.w	r2, r3, #7
 80023d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4422      	add	r2, r4
 80023de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023e0:	e105      	b.n	80025ee <UART_SetConfig+0x4d6>
 80023e2:	bf00      	nop
 80023e4:	40011000 	.word	0x40011000
 80023e8:	40011400 	.word	0x40011400
 80023ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f4:	2200      	movs	r2, #0
 80023f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002402:	4642      	mov	r2, r8
 8002404:	464b      	mov	r3, r9
 8002406:	1891      	adds	r1, r2, r2
 8002408:	6239      	str	r1, [r7, #32]
 800240a:	415b      	adcs	r3, r3
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002412:	4641      	mov	r1, r8
 8002414:	1854      	adds	r4, r2, r1
 8002416:	4649      	mov	r1, r9
 8002418:	eb43 0501 	adc.w	r5, r3, r1
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	00eb      	lsls	r3, r5, #3
 8002426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800242a:	00e2      	lsls	r2, r4, #3
 800242c:	4614      	mov	r4, r2
 800242e:	461d      	mov	r5, r3
 8002430:	4643      	mov	r3, r8
 8002432:	18e3      	adds	r3, r4, r3
 8002434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002438:	464b      	mov	r3, r9
 800243a:	eb45 0303 	adc.w	r3, r5, r3
 800243e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800244e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800245e:	4629      	mov	r1, r5
 8002460:	008b      	lsls	r3, r1, #2
 8002462:	4621      	mov	r1, r4
 8002464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002468:	4621      	mov	r1, r4
 800246a:	008a      	lsls	r2, r1, #2
 800246c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002470:	f7fd ff46 	bl	8000300 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4b60      	ldr	r3, [pc, #384]	; (80025fc <UART_SetConfig+0x4e4>)
 800247a:	fba3 2302 	umull	r2, r3, r3, r2
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	011c      	lsls	r4, r3, #4
 8002482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002486:	2200      	movs	r2, #0
 8002488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800248c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002490:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002494:	4642      	mov	r2, r8
 8002496:	464b      	mov	r3, r9
 8002498:	1891      	adds	r1, r2, r2
 800249a:	61b9      	str	r1, [r7, #24]
 800249c:	415b      	adcs	r3, r3
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a4:	4641      	mov	r1, r8
 80024a6:	1851      	adds	r1, r2, r1
 80024a8:	6139      	str	r1, [r7, #16]
 80024aa:	4649      	mov	r1, r9
 80024ac:	414b      	adcs	r3, r1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024bc:	4659      	mov	r1, fp
 80024be:	00cb      	lsls	r3, r1, #3
 80024c0:	4651      	mov	r1, sl
 80024c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024c6:	4651      	mov	r1, sl
 80024c8:	00ca      	lsls	r2, r1, #3
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	4642      	mov	r2, r8
 80024d2:	189b      	adds	r3, r3, r2
 80024d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024d8:	464b      	mov	r3, r9
 80024da:	460a      	mov	r2, r1
 80024dc:	eb42 0303 	adc.w	r3, r2, r3
 80024e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80024ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024fc:	4649      	mov	r1, r9
 80024fe:	008b      	lsls	r3, r1, #2
 8002500:	4641      	mov	r1, r8
 8002502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002506:	4641      	mov	r1, r8
 8002508:	008a      	lsls	r2, r1, #2
 800250a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800250e:	f7fd fef7 	bl	8000300 <__aeabi_uldivmod>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4b39      	ldr	r3, [pc, #228]	; (80025fc <UART_SetConfig+0x4e4>)
 8002518:	fba3 1302 	umull	r1, r3, r3, r2
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	2164      	movs	r1, #100	; 0x64
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	3332      	adds	r3, #50	; 0x32
 800252a:	4a34      	ldr	r2, [pc, #208]	; (80025fc <UART_SetConfig+0x4e4>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002536:	441c      	add	r4, r3
 8002538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800253c:	2200      	movs	r2, #0
 800253e:	673b      	str	r3, [r7, #112]	; 0x70
 8002540:	677a      	str	r2, [r7, #116]	; 0x74
 8002542:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002546:	4642      	mov	r2, r8
 8002548:	464b      	mov	r3, r9
 800254a:	1891      	adds	r1, r2, r2
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	415b      	adcs	r3, r3
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002556:	4641      	mov	r1, r8
 8002558:	1851      	adds	r1, r2, r1
 800255a:	6039      	str	r1, [r7, #0]
 800255c:	4649      	mov	r1, r9
 800255e:	414b      	adcs	r3, r1
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800256e:	4659      	mov	r1, fp
 8002570:	00cb      	lsls	r3, r1, #3
 8002572:	4651      	mov	r1, sl
 8002574:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002578:	4651      	mov	r1, sl
 800257a:	00ca      	lsls	r2, r1, #3
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	4603      	mov	r3, r0
 8002582:	4642      	mov	r2, r8
 8002584:	189b      	adds	r3, r3, r2
 8002586:	66bb      	str	r3, [r7, #104]	; 0x68
 8002588:	464b      	mov	r3, r9
 800258a:	460a      	mov	r2, r1
 800258c:	eb42 0303 	adc.w	r3, r2, r3
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	663b      	str	r3, [r7, #96]	; 0x60
 800259c:	667a      	str	r2, [r7, #100]	; 0x64
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025aa:	4649      	mov	r1, r9
 80025ac:	008b      	lsls	r3, r1, #2
 80025ae:	4641      	mov	r1, r8
 80025b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025b4:	4641      	mov	r1, r8
 80025b6:	008a      	lsls	r2, r1, #2
 80025b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025bc:	f7fd fea0 	bl	8000300 <__aeabi_uldivmod>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <UART_SetConfig+0x4e4>)
 80025c6:	fba3 1302 	umull	r1, r3, r3, r2
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2164      	movs	r1, #100	; 0x64
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	3332      	adds	r3, #50	; 0x32
 80025d8:	4a08      	ldr	r2, [pc, #32]	; (80025fc <UART_SetConfig+0x4e4>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	f003 020f 	and.w	r2, r3, #15
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4422      	add	r2, r4
 80025ec:	609a      	str	r2, [r3, #8]
}
 80025ee:	bf00      	nop
 80025f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025f4:	46bd      	mov	sp, r7
 80025f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025fa:	bf00      	nop
 80025fc:	51eb851f 	.word	0x51eb851f

08002600 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800260e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002612:	2b84      	cmp	r3, #132	; 0x84
 8002614:	d005      	beq.n	8002622 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002616:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	3303      	adds	r3, #3
 8002620:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002634:	f000 feb6 	bl	80033a4 <vTaskStartScheduler>
  
  return osOK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}

0800263e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800263e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002640:	b089      	sub	sp, #36	; 0x24
 8002642:	af04      	add	r7, sp, #16
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <osThreadCreate+0x54>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01c      	beq.n	8002692 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685c      	ldr	r4, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681d      	ldr	r5, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691e      	ldr	r6, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ffc8 	bl	8002600 <makeFreeRtosPriority>
 8002670:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800267a:	9202      	str	r2, [sp, #8]
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	9100      	str	r1, [sp, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4632      	mov	r2, r6
 8002684:	4629      	mov	r1, r5
 8002686:	4620      	mov	r0, r4
 8002688:	f000 fcbc 	bl	8003004 <xTaskCreateStatic>
 800268c:	4603      	mov	r3, r0
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e01c      	b.n	80026cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685c      	ldr	r4, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800269e:	b29e      	uxth	r6, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ffaa 	bl	8002600 <makeFreeRtosPriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	9200      	str	r2, [sp, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	4632      	mov	r2, r6
 80026ba:	4629      	mov	r1, r5
 80026bc:	4620      	mov	r0, r4
 80026be:	f000 fcfe 	bl	80030be <xTaskCreate>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d001      	beq.n	80026cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026cc:	68fb      	ldr	r3, [r7, #12]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <osDelay+0x16>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	e000      	b.n	80026ee <osDelay+0x18>
 80026ec:	2301      	movs	r3, #1
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fe24 	bl	800333c <vTaskDelay>
  
  return osOK;
 80026f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f103 0208 	add.w	r2, r3, #8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002716:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f103 0208 	add.w	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f103 0208 	add.w	r2, r3, #8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	601a      	str	r2, [r3, #0]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b6:	d103      	bne.n	80027c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e00c      	b.n	80027da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3308      	adds	r3, #8
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e002      	b.n	80027ce <vListInsert+0x2e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d2f6      	bcs.n	80027c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6852      	ldr	r2, [r2, #4]
 8002832:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	d103      	bne.n	8002846 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1e5a      	subs	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002892:	f001 fce7 	bl	8004264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	68f9      	ldr	r1, [r7, #12]
 80028a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	441a      	add	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	3b01      	subs	r3, #1
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	441a      	add	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	22ff      	movs	r2, #255	; 0xff
 80028d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	22ff      	movs	r2, #255	; 0xff
 80028de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d114      	bne.n	8002912 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01a      	beq.n	8002926 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3310      	adds	r3, #16
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 ffa7 	bl	8003848 <xTaskRemoveFromEventList>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d012      	beq.n	8002926 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <xQueueGenericReset+0xcc>)
 8002902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	e009      	b.n	8002926 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3310      	adds	r3, #16
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fef1 	bl	80026fe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3324      	adds	r3, #36	; 0x24
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff feec 	bl	80026fe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002926:	f001 fccd 	bl	80042c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	e000ed04 	.word	0xe000ed04

08002938 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <xQueueGenericCreate+0x2a>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	613b      	str	r3, [r7, #16]
}
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3348      	adds	r3, #72	; 0x48
 8002970:	4618      	mov	r0, r3
 8002972:	f001 fd59 	bl	8004428 <pvPortMalloc>
 8002976:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d011      	beq.n	80029a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3348      	adds	r3, #72	; 0x48
 8002986:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002990:	79fa      	ldrb	r2, [r7, #7]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4613      	mov	r3, r2
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f805 	bl	80029ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029a2:	69bb      	ldr	r3, [r7, #24]
	}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e002      	b.n	80029ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029da:	2101      	movs	r1, #1
 80029dc:	69b8      	ldr	r0, [r7, #24]
 80029de:	f7ff ff43 	bl	8002868 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08e      	sub	sp, #56	; 0x38
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029fa:	2300      	movs	r3, #0
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <xQueueGenericSend+0x32>
	__asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a1a:	bf00      	nop
 8002a1c:	e7fe      	b.n	8002a1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <xQueueGenericSend+0x40>
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <xQueueGenericSend+0x44>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <xQueueGenericSend+0x46>
 8002a30:	2300      	movs	r3, #0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <xQueueGenericSend+0x60>
	__asm volatile
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a48:	bf00      	nop
 8002a4a:	e7fe      	b.n	8002a4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d103      	bne.n	8002a5a <xQueueGenericSend+0x6e>
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <xQueueGenericSend+0x72>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <xQueueGenericSend+0x74>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <xQueueGenericSend+0x8e>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	623b      	str	r3, [r7, #32]
}
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a7a:	f001 f8a1 	bl	8003bc0 <xTaskGetSchedulerState>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <xQueueGenericSend+0x9e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <xQueueGenericSend+0xa2>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <xQueueGenericSend+0xa4>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <xQueueGenericSend+0xbe>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	61fb      	str	r3, [r7, #28]
}
 8002aa6:	bf00      	nop
 8002aa8:	e7fe      	b.n	8002aa8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aaa:	f001 fbdb 	bl	8004264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <xQueueGenericSend+0xd4>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d129      	bne.n	8002b14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac6:	f000 f9b3 	bl	8002e30 <prvCopyDataToQueue>
 8002aca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	3324      	adds	r3, #36	; 0x24
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 feb5 	bl	8003848 <xTaskRemoveFromEventList>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ae4:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <xQueueGenericSend+0x1f8>)
 8002ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	e00a      	b.n	8002b0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002afc:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <xQueueGenericSend+0x1f8>)
 8002afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b0c:	f001 fbda 	bl	80042c4 <vPortExitCritical>
				return pdPASS;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e063      	b.n	8002bdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b1a:	f001 fbd3 	bl	80042c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e05c      	b.n	8002bdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d106      	bne.n	8002b36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 feed 	bl	800390c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b32:	2301      	movs	r3, #1
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b36:	f001 fbc5 	bl	80042c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b3a:	f000 fc93 	bl	8003464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b3e:	f001 fb91 	bl	8004264 <vPortEnterCritical>
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b4e:	d103      	bne.n	8002b58 <xQueueGenericSend+0x16c>
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b64:	d103      	bne.n	8002b6e <xQueueGenericSend+0x182>
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b6e:	f001 fba9 	bl	80042c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b72:	1d3a      	adds	r2, r7, #4
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fedc 	bl	8003938 <xTaskCheckForTimeOut>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d124      	bne.n	8002bd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b88:	f000 fa24 	bl	8002fd4 <prvIsQueueFull>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d018      	beq.n	8002bc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	3310      	adds	r3, #16
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fe30 	bl	8003800 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba2:	f000 f9af 	bl	8002f04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ba6:	f000 fc6b 	bl	8003480 <xTaskResumeAll>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f47f af7c 	bne.w	8002aaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <xQueueGenericSend+0x1f8>)
 8002bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	e772      	b.n	8002aaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bc6:	f000 f99d 	bl	8002f04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bca:	f000 fc59 	bl	8003480 <xTaskResumeAll>
 8002bce:	e76c      	b.n	8002aaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd2:	f000 f997 	bl	8002f04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bd6:	f000 fc53 	bl	8003480 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3738      	adds	r7, #56	; 0x38
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	; 0x38
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	623b      	str	r3, [r7, #32]
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	61fb      	str	r3, [r7, #28]
}
 8002c34:	bf00      	nop
 8002c36:	e7fe      	b.n	8002c36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c38:	f000 ffc2 	bl	8003bc0 <xTaskGetSchedulerState>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <xQueueSemaphoreTake+0x60>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <xQueueSemaphoreTake+0x64>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <xQueueSemaphoreTake+0x66>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	61bb      	str	r3, [r7, #24]
}
 8002c64:	bf00      	nop
 8002c66:	e7fe      	b.n	8002c66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c68:	f001 fafc 	bl	8004264 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d024      	beq.n	8002cc2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002c88:	f001 f942 	bl	8003f10 <pvTaskIncrementMutexHeldCount>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00f      	beq.n	8002cba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	3310      	adds	r3, #16
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fdd2 	bl	8003848 <xTaskRemoveFromEventList>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002caa:	4b54      	ldr	r3, [pc, #336]	; (8002dfc <xQueueSemaphoreTake+0x214>)
 8002cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cba:	f001 fb03 	bl	80042c4 <vPortExitCritical>
				return pdPASS;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e097      	b.n	8002df2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d111      	bne.n	8002cec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	617b      	str	r3, [r7, #20]
}
 8002ce0:	bf00      	nop
 8002ce2:	e7fe      	b.n	8002ce2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002ce4:	f001 faee 	bl	80042c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e082      	b.n	8002df2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fe08 	bl	800390c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d00:	f001 fae0 	bl	80042c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d04:	f000 fbae 	bl	8003464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d08:	f001 faac 	bl	8004264 <vPortEnterCritical>
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d18:	d103      	bne.n	8002d22 <xQueueSemaphoreTake+0x13a>
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d2e:	d103      	bne.n	8002d38 <xQueueSemaphoreTake+0x150>
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d38:	f001 fac4 	bl	80042c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d3c:	463a      	mov	r2, r7
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fdf7 	bl	8003938 <xTaskCheckForTimeOut>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d132      	bne.n	8002db6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d52:	f000 f929 	bl	8002fa8 <prvIsQueueEmpty>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d026      	beq.n	8002daa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002d64:	f001 fa7e 	bl	8004264 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 ff45 	bl	8003bfc <xTaskPriorityInherit>
 8002d72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002d74:	f001 faa6 	bl	80042c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	3324      	adds	r3, #36	; 0x24
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fd3d 	bl	8003800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d88:	f000 f8bc 	bl	8002f04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d8c:	f000 fb78 	bl	8003480 <xTaskResumeAll>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f47f af68 	bne.w	8002c68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <xQueueSemaphoreTake+0x214>)
 8002d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	e75e      	b.n	8002c68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dac:	f000 f8aa 	bl	8002f04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002db0:	f000 fb66 	bl	8003480 <xTaskResumeAll>
 8002db4:	e758      	b.n	8002c68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002db8:	f000 f8a4 	bl	8002f04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dbc:	f000 fb60 	bl	8003480 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dc2:	f000 f8f1 	bl	8002fa8 <prvIsQueueEmpty>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f43f af4d 	beq.w	8002c68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00d      	beq.n	8002df0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002dd4:	f001 fa46 	bl	8004264 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dda:	f000 f811 	bl	8002e00 <prvGetDisinheritPriorityAfterTimeout>
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de6:	4618      	mov	r0, r3
 8002de8:	f001 f804 	bl	8003df4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002dec:	f001 fa6a 	bl	80042c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002df0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3738      	adds	r7, #56	; 0x38
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f1c3 0307 	rsb	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e001      	b.n	8002e22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002e22:	68fb      	ldr	r3, [r7, #12]
	}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d14d      	bne.n	8002ef2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 ff44 	bl	8003ce8 <xTaskPriorityDisinherit>
 8002e60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	e043      	b.n	8002ef2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d119      	bne.n	8002ea4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6858      	ldr	r0, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	f001 fce8 	bl	8004850 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	441a      	add	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d32b      	bcc.n	8002ef2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	e026      	b.n	8002ef2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	68d8      	ldr	r0, [r3, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	461a      	mov	r2, r3
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	f001 fcce 	bl	8004850 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	441a      	add	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d207      	bcs.n	8002ee0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	425b      	negs	r3, r3
 8002eda:	441a      	add	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d105      	bne.n	8002ef2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002efa:	697b      	ldr	r3, [r7, #20]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f0c:	f001 f9aa 	bl	8004264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f18:	e011      	b.n	8002f3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d012      	beq.n	8002f48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3324      	adds	r3, #36	; 0x24
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fc8e 	bl	8003848 <xTaskRemoveFromEventList>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f32:	f000 fd63 	bl	80039fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	dce9      	bgt.n	8002f1a <prvUnlockQueue+0x16>
 8002f46:	e000      	b.n	8002f4a <prvUnlockQueue+0x46>
					break;
 8002f48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	22ff      	movs	r2, #255	; 0xff
 8002f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f52:	f001 f9b7 	bl	80042c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f56:	f001 f985 	bl	8004264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f62:	e011      	b.n	8002f88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3310      	adds	r3, #16
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fc69 	bl	8003848 <xTaskRemoveFromEventList>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f7c:	f000 fd3e 	bl	80039fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f80:	7bbb      	ldrb	r3, [r7, #14]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	dce9      	bgt.n	8002f64 <prvUnlockQueue+0x60>
 8002f90:	e000      	b.n	8002f94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	22ff      	movs	r2, #255	; 0xff
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f9c:	f001 f992 	bl	80042c4 <vPortExitCritical>
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fb0:	f001 f958 	bl	8004264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e001      	b.n	8002fc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fc6:	f001 f97d 	bl	80042c4 <vPortExitCritical>

	return xReturn;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fdc:	f001 f942 	bl	8004264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d102      	bne.n	8002ff2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fec:	2301      	movs	r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	e001      	b.n	8002ff6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ff6:	f001 f965 	bl	80042c4 <vPortExitCritical>

	return xReturn;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08e      	sub	sp, #56	; 0x38
 8003008:	af04      	add	r7, sp, #16
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	623b      	str	r3, [r7, #32]
}
 800302a:	bf00      	nop
 800302c:	e7fe      	b.n	800302c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <xTaskCreateStatic+0x46>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	61fb      	str	r3, [r7, #28]
}
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800304a:	2354      	movs	r3, #84	; 0x54
 800304c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b54      	cmp	r3, #84	; 0x54
 8003052:	d00a      	beq.n	800306a <xTaskCreateStatic+0x66>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	61bb      	str	r3, [r7, #24]
}
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800306a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01e      	beq.n	80030b0 <xTaskCreateStatic+0xac>
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003080:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	2202      	movs	r2, #2
 8003086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800308a:	2300      	movs	r3, #0
 800308c:	9303      	str	r3, [sp, #12]
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	9302      	str	r3, [sp, #8]
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f850 	bl	8003148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030aa:	f000 f8dd 	bl	8003268 <prvAddNewTaskToReadyList>
 80030ae:	e001      	b.n	80030b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030b4:	697b      	ldr	r3, [r7, #20]
	}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3728      	adds	r7, #40	; 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b08c      	sub	sp, #48	; 0x30
 80030c2:	af04      	add	r7, sp, #16
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 f9a8 	bl	8004428 <pvPortMalloc>
 80030d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030e0:	2054      	movs	r0, #84	; 0x54
 80030e2:	f001 f9a1 	bl	8004428 <pvPortMalloc>
 80030e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
 80030f4:	e005      	b.n	8003102 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	f001 fa62 	bl	80045c0 <vPortFree>
 80030fc:	e001      	b.n	8003102 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d017      	beq.n	8003138 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003110:	88fa      	ldrh	r2, [r7, #6]
 8003112:	2300      	movs	r3, #0
 8003114:	9303      	str	r3, [sp, #12]
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	9302      	str	r3, [sp, #8]
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f80e 	bl	8003148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800312c:	69f8      	ldr	r0, [r7, #28]
 800312e:	f000 f89b 	bl	8003268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003132:	2301      	movs	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	e002      	b.n	800313e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800313c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800313e:	69bb      	ldr	r3, [r7, #24]
	}
 8003140:	4618      	mov	r0, r3
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	461a      	mov	r2, r3
 8003160:	21a5      	movs	r1, #165	; 0xa5
 8003162:	f001 fb83 	bl	800486c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003170:	3b01      	subs	r3, #1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f023 0307 	bic.w	r3, r3, #7
 800317e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	617b      	str	r3, [r7, #20]
}
 800319c:	bf00      	nop
 800319e:	e7fe      	b.n	800319e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01f      	beq.n	80031e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e012      	b.n	80031d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	4413      	add	r3, r2
 80031b2:	7819      	ldrb	r1, [r3, #0]
 80031b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	3334      	adds	r3, #52	; 0x34
 80031bc:	460a      	mov	r2, r1
 80031be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d006      	beq.n	80031da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	3301      	adds	r3, #1
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d9e9      	bls.n	80031ac <prvInitialiseNewTask+0x64>
 80031d8:	e000      	b.n	80031dc <prvInitialiseNewTask+0x94>
			{
				break;
 80031da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e4:	e003      	b.n	80031ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	2b06      	cmp	r3, #6
 80031f2:	d901      	bls.n	80031f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031f4:	2306      	movs	r3, #6
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003202:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	2200      	movs	r2, #0
 8003208:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	3304      	adds	r3, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fa95 	bl	800273e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	3318      	adds	r3, #24
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fa90 	bl	800273e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003222:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	f1c3 0207 	rsb	r2, r3, #7
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003232:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	2200      	movs	r2, #0
 8003238:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	68f9      	ldr	r1, [r7, #12]
 8003246:	69b8      	ldr	r0, [r7, #24]
 8003248:	f000 fedc 	bl	8004004 <pxPortInitialiseStack>
 800324c:	4602      	mov	r2, r0
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800325e:	bf00      	nop
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003270:	f000 fff8 	bl	8004264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <prvAddNewTaskToReadyList+0xb8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a29      	ldr	r2, [pc, #164]	; (8003320 <prvAddNewTaskToReadyList+0xb8>)
 800327c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003286:	4a27      	ldr	r2, [pc, #156]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <prvAddNewTaskToReadyList+0xb8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d110      	bne.n	80032b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003294:	f000 fbd6 	bl	8003a44 <prvInitialiseTaskLists>
 8003298:	e00d      	b.n	80032b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800329a:	4b23      	ldr	r3, [pc, #140]	; (8003328 <prvAddNewTaskToReadyList+0xc0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d802      	bhi.n	80032b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <prvAddNewTaskToReadyList+0xc4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <prvAddNewTaskToReadyList+0xc4>)
 80032be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	2201      	movs	r2, #1
 80032c6:	409a      	lsls	r2, r3
 80032c8:	4b19      	ldr	r3, [pc, #100]	; (8003330 <prvAddNewTaskToReadyList+0xc8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <prvAddNewTaskToReadyList+0xc8>)
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <prvAddNewTaskToReadyList+0xcc>)
 80032e0:	441a      	add	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f7ff fa35 	bl	8002758 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032ee:	f000 ffe9 	bl	80042c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <prvAddNewTaskToReadyList+0xc0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00e      	beq.n	8003318 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	429a      	cmp	r2, r3
 8003306:	d207      	bcs.n	8003318 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <prvAddNewTaskToReadyList+0xd0>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000448 	.word	0x20000448
 8003324:	20000348 	.word	0x20000348
 8003328:	20000454 	.word	0x20000454
 800332c:	20000464 	.word	0x20000464
 8003330:	20000450 	.word	0x20000450
 8003334:	2000034c 	.word	0x2000034c
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d017      	beq.n	800337e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <vTaskDelay+0x60>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <vTaskDelay+0x30>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	60bb      	str	r3, [r7, #8]
}
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800336c:	f000 f87a 	bl	8003464 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003370:	2100      	movs	r1, #0
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fde0 	bl	8003f38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003378:	f000 f882 	bl	8003480 <xTaskResumeAll>
 800337c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <vTaskDelay+0x64>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000470 	.word	0x20000470
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033b2:	463a      	mov	r2, r7
 80033b4:	1d39      	adds	r1, r7, #4
 80033b6:	f107 0308 	add.w	r3, r7, #8
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd f922 	bl	8000604 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	9202      	str	r2, [sp, #8]
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	460a      	mov	r2, r1
 80033d2:	491e      	ldr	r1, [pc, #120]	; (800344c <vTaskStartScheduler+0xa8>)
 80033d4:	481e      	ldr	r0, [pc, #120]	; (8003450 <vTaskStartScheduler+0xac>)
 80033d6:	f7ff fe15 	bl	8003004 <xTaskCreateStatic>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <vTaskStartScheduler+0xb0>)
 80033de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <vTaskStartScheduler+0xb0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033e8:	2301      	movs	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e001      	b.n	80033f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d116      	bne.n	8003426 <vTaskStartScheduler+0x82>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	613b      	str	r3, [r7, #16]
}
 800340a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <vTaskStartScheduler+0xb4>)
 800340e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003412:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <vTaskStartScheduler+0xb8>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <vTaskStartScheduler+0xbc>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003420:	f000 fe7e 	bl	8004120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003424:	e00e      	b.n	8003444 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342c:	d10a      	bne.n	8003444 <vTaskStartScheduler+0xa0>
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	60fb      	str	r3, [r7, #12]
}
 8003440:	bf00      	nop
 8003442:	e7fe      	b.n	8003442 <vTaskStartScheduler+0x9e>
}
 8003444:	bf00      	nop
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	080052f8 	.word	0x080052f8
 8003450:	08003a15 	.word	0x08003a15
 8003454:	2000046c 	.word	0x2000046c
 8003458:	20000468 	.word	0x20000468
 800345c:	20000454 	.word	0x20000454
 8003460:	2000044c 	.word	0x2000044c

08003464 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <vTaskSuspendAll+0x18>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	4a03      	ldr	r2, [pc, #12]	; (800347c <vTaskSuspendAll+0x18>)
 8003470:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	20000470 	.word	0x20000470

08003480 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <xTaskResumeAll+0x114>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <xTaskResumeAll+0x2c>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	603b      	str	r3, [r7, #0]
}
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034ac:	f000 feda 	bl	8004264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034b0:	4b38      	ldr	r3, [pc, #224]	; (8003594 <xTaskResumeAll+0x114>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	4a37      	ldr	r2, [pc, #220]	; (8003594 <xTaskResumeAll+0x114>)
 80034b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ba:	4b36      	ldr	r3, [pc, #216]	; (8003594 <xTaskResumeAll+0x114>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d161      	bne.n	8003586 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034c2:	4b35      	ldr	r3, [pc, #212]	; (8003598 <xTaskResumeAll+0x118>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d05d      	beq.n	8003586 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034ca:	e02e      	b.n	800352a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034cc:	4b33      	ldr	r3, [pc, #204]	; (800359c <xTaskResumeAll+0x11c>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3318      	adds	r3, #24
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff f99a 	bl	8002812 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff f995 	bl	8002812 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <xTaskResumeAll+0x120>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	4a2a      	ldr	r2, [pc, #168]	; (80035a0 <xTaskResumeAll+0x120>)
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4a27      	ldr	r2, [pc, #156]	; (80035a4 <xTaskResumeAll+0x124>)
 8003508:	441a      	add	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3304      	adds	r3, #4
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f7ff f921 	bl	8002758 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <xTaskResumeAll+0x128>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	429a      	cmp	r2, r3
 8003522:	d302      	bcc.n	800352a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003524:	4b21      	ldr	r3, [pc, #132]	; (80035ac <xTaskResumeAll+0x12c>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800352a:	4b1c      	ldr	r3, [pc, #112]	; (800359c <xTaskResumeAll+0x11c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1cc      	bne.n	80034cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003538:	f000 fb22 	bl	8003b80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <xTaskResumeAll+0x130>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003548:	f000 f846 	bl	80035d8 <xTaskIncrementTick>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003552:	4b16      	ldr	r3, [pc, #88]	; (80035ac <xTaskResumeAll+0x12c>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f1      	bne.n	8003548 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <xTaskResumeAll+0x130>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <xTaskResumeAll+0x12c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003572:	2301      	movs	r3, #1
 8003574:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <xTaskResumeAll+0x134>)
 8003578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003586:	f000 fe9d 	bl	80042c4 <vPortExitCritical>

	return xAlreadyYielded;
 800358a:	68bb      	ldr	r3, [r7, #8]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000470 	.word	0x20000470
 8003598:	20000448 	.word	0x20000448
 800359c:	20000408 	.word	0x20000408
 80035a0:	20000450 	.word	0x20000450
 80035a4:	2000034c 	.word	0x2000034c
 80035a8:	20000348 	.word	0x20000348
 80035ac:	2000045c 	.word	0x2000045c
 80035b0:	20000458 	.word	0x20000458
 80035b4:	e000ed04 	.word	0xe000ed04

080035b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <xTaskGetTickCount+0x1c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035c4:	687b      	ldr	r3, [r7, #4]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	2000044c 	.word	0x2000044c

080035d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e2:	4b4e      	ldr	r3, [pc, #312]	; (800371c <xTaskIncrementTick+0x144>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 808e 	bne.w	8003708 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035ec:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <xTaskIncrementTick+0x148>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035f4:	4a4a      	ldr	r2, [pc, #296]	; (8003720 <xTaskIncrementTick+0x148>)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d120      	bne.n	8003642 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003600:	4b48      	ldr	r3, [pc, #288]	; (8003724 <xTaskIncrementTick+0x14c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <xTaskIncrementTick+0x48>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	603b      	str	r3, [r7, #0]
}
 800361c:	bf00      	nop
 800361e:	e7fe      	b.n	800361e <xTaskIncrementTick+0x46>
 8003620:	4b40      	ldr	r3, [pc, #256]	; (8003724 <xTaskIncrementTick+0x14c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	4b40      	ldr	r3, [pc, #256]	; (8003728 <xTaskIncrementTick+0x150>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a3e      	ldr	r2, [pc, #248]	; (8003724 <xTaskIncrementTick+0x14c>)
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4a3e      	ldr	r2, [pc, #248]	; (8003728 <xTaskIncrementTick+0x150>)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b3d      	ldr	r3, [pc, #244]	; (800372c <xTaskIncrementTick+0x154>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	4a3c      	ldr	r2, [pc, #240]	; (800372c <xTaskIncrementTick+0x154>)
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	f000 fa9f 	bl	8003b80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003642:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <xTaskIncrementTick+0x158>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d348      	bcc.n	80036de <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <xTaskIncrementTick+0x14c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003656:	4b36      	ldr	r3, [pc, #216]	; (8003730 <xTaskIncrementTick+0x158>)
 8003658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800365c:	601a      	str	r2, [r3, #0]
					break;
 800365e:	e03e      	b.n	80036de <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <xTaskIncrementTick+0x14c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	d203      	bcs.n	8003680 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003678:	4a2d      	ldr	r2, [pc, #180]	; (8003730 <xTaskIncrementTick+0x158>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800367e:	e02e      	b.n	80036de <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3304      	adds	r3, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff f8c4 	bl	8002812 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	3318      	adds	r3, #24
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff f8bb 	bl	8002812 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	2201      	movs	r2, #1
 80036a2:	409a      	lsls	r2, r3
 80036a4:	4b23      	ldr	r3, [pc, #140]	; (8003734 <xTaskIncrementTick+0x15c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	4a22      	ldr	r2, [pc, #136]	; (8003734 <xTaskIncrementTick+0x15c>)
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <xTaskIncrementTick+0x160>)
 80036bc:	441a      	add	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	3304      	adds	r3, #4
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f7ff f847 	bl	8002758 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <xTaskIncrementTick+0x164>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d3b9      	bcc.n	800364c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80036d8:	2301      	movs	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036dc:	e7b6      	b.n	800364c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <xTaskIncrementTick+0x164>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	4914      	ldr	r1, [pc, #80]	; (8003738 <xTaskIncrementTick+0x160>)
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d901      	bls.n	80036fa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80036f6:	2301      	movs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <xTaskIncrementTick+0x168>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003702:	2301      	movs	r3, #1
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e004      	b.n	8003712 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <xTaskIncrementTick+0x16c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <xTaskIncrementTick+0x16c>)
 8003710:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003712:	697b      	ldr	r3, [r7, #20]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000470 	.word	0x20000470
 8003720:	2000044c 	.word	0x2000044c
 8003724:	20000400 	.word	0x20000400
 8003728:	20000404 	.word	0x20000404
 800372c:	20000460 	.word	0x20000460
 8003730:	20000468 	.word	0x20000468
 8003734:	20000450 	.word	0x20000450
 8003738:	2000034c 	.word	0x2000034c
 800373c:	20000348 	.word	0x20000348
 8003740:	2000045c 	.word	0x2000045c
 8003744:	20000458 	.word	0x20000458

08003748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800374e:	4b27      	ldr	r3, [pc, #156]	; (80037ec <vTaskSwitchContext+0xa4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003756:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <vTaskSwitchContext+0xa8>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800375c:	e03f      	b.n	80037de <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <vTaskSwitchContext+0xa8>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003764:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <vTaskSwitchContext+0xac>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003772:	7afb      	ldrb	r3, [r7, #11]
 8003774:	f1c3 031f 	rsb	r3, r3, #31
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	491f      	ldr	r1, [pc, #124]	; (80037f8 <vTaskSwitchContext+0xb0>)
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	607b      	str	r3, [r7, #4]
}
 80037a0:	bf00      	nop
 80037a2:	e7fe      	b.n	80037a2 <vTaskSwitchContext+0x5a>
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <vTaskSwitchContext+0xb0>)
 80037b0:	4413      	add	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	3308      	adds	r3, #8
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d104      	bne.n	80037d4 <vTaskSwitchContext+0x8c>
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <vTaskSwitchContext+0xb4>)
 80037dc:	6013      	str	r3, [r2, #0]
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000470 	.word	0x20000470
 80037f0:	2000045c 	.word	0x2000045c
 80037f4:	20000450 	.word	0x20000450
 80037f8:	2000034c 	.word	0x2000034c
 80037fc:	20000348 	.word	0x20000348

08003800 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <vTaskPlaceOnEventList+0x44>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3318      	adds	r3, #24
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe ffb6 	bl	80027a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003834:	2101      	movs	r1, #1
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	f000 fb7e 	bl	8003f38 <prvAddCurrentTaskToDelayedList>
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000348 	.word	0x20000348

08003848 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60fb      	str	r3, [r7, #12]
}
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	3318      	adds	r3, #24
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe ffca 	bl	8002812 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800387e:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <xTaskRemoveFromEventList+0xac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d11c      	bne.n	80038c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	3304      	adds	r3, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe ffc1 	bl	8002812 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <xTaskRemoveFromEventList+0xb0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <xTaskRemoveFromEventList+0xb0>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <xTaskRemoveFromEventList+0xb4>)
 80038b0:	441a      	add	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe ff4d 	bl	8002758 <vListInsertEnd>
 80038be:	e005      	b.n	80038cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4619      	mov	r1, r3
 80038c6:	480e      	ldr	r0, [pc, #56]	; (8003900 <xTaskRemoveFromEventList+0xb8>)
 80038c8:	f7fe ff46 	bl	8002758 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <xTaskRemoveFromEventList+0xbc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d905      	bls.n	80038e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038da:	2301      	movs	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <xTaskRemoveFromEventList+0xc0>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e001      	b.n	80038ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80038ea:	697b      	ldr	r3, [r7, #20]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000470 	.word	0x20000470
 80038f8:	20000450 	.word	0x20000450
 80038fc:	2000034c 	.word	0x2000034c
 8003900:	20000408 	.word	0x20000408
 8003904:	20000348 	.word	0x20000348
 8003908:	2000045c 	.word	0x2000045c

0800390c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <vTaskInternalSetTimeOutState+0x24>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <vTaskInternalSetTimeOutState+0x28>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	605a      	str	r2, [r3, #4]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	20000460 	.word	0x20000460
 8003934:	2000044c 	.word	0x2000044c

08003938 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	613b      	str	r3, [r7, #16]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60fb      	str	r3, [r7, #12]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800397a:	f000 fc73 	bl	8004264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <xTaskCheckForTimeOut+0xbc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003996:	d102      	bne.n	800399e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e023      	b.n	80039e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <xTaskCheckForTimeOut+0xc0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d007      	beq.n	80039ba <xTaskCheckForTimeOut+0x82>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d302      	bcc.n	80039ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	e015      	b.n	80039e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d20b      	bcs.n	80039dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	1ad2      	subs	r2, r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff9b 	bl	800390c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	e004      	b.n	80039e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039e2:	2301      	movs	r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039e6:	f000 fc6d 	bl	80042c4 <vPortExitCritical>

	return xReturn;
 80039ea:	69fb      	ldr	r3, [r7, #28]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000044c 	.word	0x2000044c
 80039f8:	20000460 	.word	0x20000460

080039fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <vTaskMissedYield+0x14>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	2000045c 	.word	0x2000045c

08003a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a1c:	f000 f852 	bl	8003ac4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <prvIdleTask+0x28>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d9f9      	bls.n	8003a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <prvIdleTask+0x2c>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a38:	e7f0      	b.n	8003a1c <prvIdleTask+0x8>
 8003a3a:	bf00      	nop
 8003a3c:	2000034c 	.word	0x2000034c
 8003a40:	e000ed04 	.word	0xe000ed04

08003a44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	e00c      	b.n	8003a6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <prvInitialiseTaskLists+0x60>)
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fe4d 	bl	80026fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3301      	adds	r3, #1
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d9ef      	bls.n	8003a50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a70:	480d      	ldr	r0, [pc, #52]	; (8003aa8 <prvInitialiseTaskLists+0x64>)
 8003a72:	f7fe fe44 	bl	80026fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a76:	480d      	ldr	r0, [pc, #52]	; (8003aac <prvInitialiseTaskLists+0x68>)
 8003a78:	f7fe fe41 	bl	80026fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <prvInitialiseTaskLists+0x6c>)
 8003a7e:	f7fe fe3e 	bl	80026fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a82:	480c      	ldr	r0, [pc, #48]	; (8003ab4 <prvInitialiseTaskLists+0x70>)
 8003a84:	f7fe fe3b 	bl	80026fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a88:	480b      	ldr	r0, [pc, #44]	; (8003ab8 <prvInitialiseTaskLists+0x74>)
 8003a8a:	f7fe fe38 	bl	80026fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <prvInitialiseTaskLists+0x78>)
 8003a90:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <prvInitialiseTaskLists+0x64>)
 8003a92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <prvInitialiseTaskLists+0x7c>)
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <prvInitialiseTaskLists+0x68>)
 8003a98:	601a      	str	r2, [r3, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2000034c 	.word	0x2000034c
 8003aa8:	200003d8 	.word	0x200003d8
 8003aac:	200003ec 	.word	0x200003ec
 8003ab0:	20000408 	.word	0x20000408
 8003ab4:	2000041c 	.word	0x2000041c
 8003ab8:	20000434 	.word	0x20000434
 8003abc:	20000400 	.word	0x20000400
 8003ac0:	20000404 	.word	0x20000404

08003ac4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aca:	e019      	b.n	8003b00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003acc:	f000 fbca 	bl	8004264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <prvCheckTasksWaitingTermination+0x50>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fe98 	bl	8002812 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <prvCheckTasksWaitingTermination+0x54>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <prvCheckTasksWaitingTermination+0x54>)
 8003aea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <prvCheckTasksWaitingTermination+0x58>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <prvCheckTasksWaitingTermination+0x58>)
 8003af4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003af6:	f000 fbe5 	bl	80042c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f810 	bl	8003b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <prvCheckTasksWaitingTermination+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e1      	bne.n	8003acc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	2000041c 	.word	0x2000041c
 8003b18:	20000448 	.word	0x20000448
 8003b1c:	20000430 	.word	0x20000430

08003b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fd42 	bl	80045c0 <vPortFree>
				vPortFree( pxTCB );
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fd3f 	bl	80045c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b42:	e018      	b.n	8003b76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d103      	bne.n	8003b56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fd36 	bl	80045c0 <vPortFree>
	}
 8003b54:	e00f      	b.n	8003b76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d00a      	beq.n	8003b76 <prvDeleteTCB+0x56>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	60fb      	str	r3, [r7, #12]
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <prvDeleteTCB+0x54>
	}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <prvResetNextTaskUnblockTime+0x38>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <prvResetNextTaskUnblockTime+0x3c>)
 8003b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b98:	e008      	b.n	8003bac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <prvResetNextTaskUnblockTime+0x38>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <prvResetNextTaskUnblockTime+0x3c>)
 8003baa:	6013      	str	r3, [r2, #0]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	20000400 	.word	0x20000400
 8003bbc:	20000468 	.word	0x20000468

08003bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <xTaskGetSchedulerState+0x34>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	e008      	b.n	8003be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd4:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <xTaskGetSchedulerState+0x38>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e001      	b.n	8003be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003be6:	687b      	ldr	r3, [r7, #4]
	}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	20000454 	.word	0x20000454
 8003bf8:	20000470 	.word	0x20000470

08003bfc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d05e      	beq.n	8003cd0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c16:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <xTaskPriorityInherit+0xe0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d24e      	bcs.n	8003cbe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db06      	blt.n	8003c36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <xTaskPriorityInherit+0xe0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f1c3 0207 	rsb	r2, r3, #7
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6959      	ldr	r1, [r3, #20]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <xTaskPriorityInherit+0xe4>)
 8003c48:	4413      	add	r3, r2
 8003c4a:	4299      	cmp	r1, r3
 8003c4c:	d12f      	bne.n	8003cae <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fddd 	bl	8002812 <uxListRemove>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	2201      	movs	r2, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43da      	mvns	r2, r3
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <xTaskPriorityInherit+0xe8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <xTaskPriorityInherit+0xe8>)
 8003c72:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <xTaskPriorityInherit+0xe0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	2201      	movs	r2, #1
 8003c84:	409a      	lsls	r2, r3
 8003c86:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <xTaskPriorityInherit+0xe8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <xTaskPriorityInherit+0xe8>)
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <xTaskPriorityInherit+0xe4>)
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7fe fd56 	bl	8002758 <vListInsertEnd>
 8003cac:	e004      	b.n	8003cb8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <xTaskPriorityInherit+0xe0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e008      	b.n	8003cd0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <xTaskPriorityInherit+0xe0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d201      	bcs.n	8003cd0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
	}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000348 	.word	0x20000348
 8003ce0:	2000034c 	.word	0x2000034c
 8003ce4:	20000450 	.word	0x20000450

08003ce8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d06e      	beq.n	8003ddc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003cfe:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <xTaskPriorityDisinherit+0x100>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d00a      	beq.n	8003d1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	60fb      	str	r3, [r7, #12]
}
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	60bb      	str	r3, [r7, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	e7fe      	b.n	8003d3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d044      	beq.n	8003ddc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d140      	bne.n	8003ddc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fd57 	bl	8002812 <uxListRemove>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d115      	bne.n	8003d96 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6e:	491f      	ldr	r1, [pc, #124]	; (8003dec <xTaskPriorityDisinherit+0x104>)
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xTaskPriorityDisinherit+0xae>
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	2201      	movs	r2, #1
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <xTaskPriorityDisinherit+0x108>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4013      	ands	r3, r2
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <xTaskPriorityDisinherit+0x108>)
 8003d94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f1c3 0207 	rsb	r2, r3, #7
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	2201      	movs	r2, #1
 8003db0:	409a      	lsls	r2, r3
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <xTaskPriorityDisinherit+0x108>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	4a0d      	ldr	r2, [pc, #52]	; (8003df0 <xTaskPriorityDisinherit+0x108>)
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4a08      	ldr	r2, [pc, #32]	; (8003dec <xTaskPriorityDisinherit+0x104>)
 8003dca:	441a      	add	r2, r3
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f7fe fcc0 	bl	8002758 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ddc:	697b      	ldr	r3, [r7, #20]
	}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000348 	.word	0x20000348
 8003dec:	2000034c 	.word	0x2000034c
 8003df0:	20000450 	.word	0x20000450

08003df4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d077      	beq.n	8003efc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	60fb      	str	r3, [r7, #12]
}
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d902      	bls.n	8003e3a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	e002      	b.n	8003e40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d058      	beq.n	8003efc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d153      	bne.n	8003efc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d10a      	bne.n	8003e74 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	60bb      	str	r3, [r7, #8]
}
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db04      	blt.n	8003e92 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f1c3 0207 	rsb	r2, r3, #7
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	6959      	ldr	r1, [r3, #20]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	d129      	bne.n	8003efc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe fcb0 	bl	8002812 <uxListRemove>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003ecc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4a06      	ldr	r2, [pc, #24]	; (8003f08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003eee:	441a      	add	r2, r3
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f7fe fc2e 	bl	8002758 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003efc:	bf00      	nop
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000348 	.word	0x20000348
 8003f08:	2000034c 	.word	0x2000034c
 8003f0c:	20000450 	.word	0x20000450

08003f10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f22:	3201      	adds	r2, #1
 8003f24:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003f26:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f28:	681b      	ldr	r3, [r3, #0]
	}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	20000348 	.word	0x20000348

08003f38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f42:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f48:	4b28      	ldr	r3, [pc, #160]	; (8003fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe fc5f 	bl	8002812 <uxListRemove>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10b      	bne.n	8003f72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f5a:	4b24      	ldr	r3, [pc, #144]	; (8003fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	2201      	movs	r2, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43da      	mvns	r2, r3
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f78:	d10a      	bne.n	8003f90 <prvAddCurrentTaskToDelayedList+0x58>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d007      	beq.n	8003f90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	481a      	ldr	r0, [pc, #104]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f8a:	f7fe fbe5 	bl	8002758 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f8e:	e026      	b.n	8003fde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f98:	4b14      	ldr	r3, [pc, #80]	; (8003fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d209      	bcs.n	8003fbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fa8:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7fe fbf3 	bl	80027a0 <vListInsert>
}
 8003fba:	e010      	b.n	8003fde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <prvAddCurrentTaskToDelayedList+0xc4>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f7fe fbe9 	bl	80027a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d202      	bcs.n	8003fde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003fd8:	4a09      	ldr	r2, [pc, #36]	; (8004000 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6013      	str	r3, [r2, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000044c 	.word	0x2000044c
 8003fec:	20000348 	.word	0x20000348
 8003ff0:	20000450 	.word	0x20000450
 8003ff4:	20000434 	.word	0x20000434
 8003ff8:	20000404 	.word	0x20000404
 8003ffc:	20000400 	.word	0x20000400
 8004000:	20000468 	.word	0x20000468

08004004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3b04      	subs	r3, #4
 8004014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800401c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b04      	subs	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0201 	bic.w	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b04      	subs	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004034:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <pxPortInitialiseStack+0x64>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3b14      	subs	r3, #20
 800403e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3b04      	subs	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f06f 0202 	mvn.w	r2, #2
 8004052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3b20      	subs	r3, #32
 8004058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800405a:	68fb      	ldr	r3, [r7, #12]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	0800406d 	.word	0x0800406d

0800406c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <prvTaskExitError+0x54>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407e:	d00a      	beq.n	8004096 <prvTaskExitError+0x2a>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <prvTaskExitError+0x28>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	60bb      	str	r3, [r7, #8]
}
 80040a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040aa:	bf00      	nop
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0fc      	beq.n	80040ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	2000000c 	.word	0x2000000c
	...

080040d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <pxCurrentTCBConst2>)
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	6808      	ldr	r0, [r1, #0]
 80040d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040da:	f380 8809 	msr	PSP, r0
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f380 8811 	msr	BASEPRI, r0
 80040ea:	4770      	bx	lr
 80040ec:	f3af 8000 	nop.w

080040f0 <pxCurrentTCBConst2>:
 80040f0:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop

080040f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040f8:	4808      	ldr	r0, [pc, #32]	; (800411c <prvPortStartFirstTask+0x24>)
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	6800      	ldr	r0, [r0, #0]
 80040fe:	f380 8808 	msr	MSP, r0
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8814 	msr	CONTROL, r0
 800410a:	b662      	cpsie	i
 800410c:	b661      	cpsie	f
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	df00      	svc	0
 8004118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800411a:	bf00      	nop
 800411c:	e000ed08 	.word	0xe000ed08

08004120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004126:	4b46      	ldr	r3, [pc, #280]	; (8004240 <xPortStartScheduler+0x120>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a46      	ldr	r2, [pc, #280]	; (8004244 <xPortStartScheduler+0x124>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10a      	bne.n	8004146 <xPortStartScheduler+0x26>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	613b      	str	r3, [r7, #16]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004146:	4b3e      	ldr	r3, [pc, #248]	; (8004240 <xPortStartScheduler+0x120>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3f      	ldr	r2, [pc, #252]	; (8004248 <xPortStartScheduler+0x128>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10a      	bne.n	8004166 <xPortStartScheduler+0x46>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	60fb      	str	r3, [r7, #12]
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004166:	4b39      	ldr	r3, [pc, #228]	; (800424c <xPortStartScheduler+0x12c>)
 8004168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4b31      	ldr	r3, [pc, #196]	; (8004250 <xPortStartScheduler+0x130>)
 800418c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800418e:	4b31      	ldr	r3, [pc, #196]	; (8004254 <xPortStartScheduler+0x134>)
 8004190:	2207      	movs	r2, #7
 8004192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004194:	e009      	b.n	80041aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <xPortStartScheduler+0x134>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3b01      	subs	r3, #1
 800419c:	4a2d      	ldr	r2, [pc, #180]	; (8004254 <xPortStartScheduler+0x134>)
 800419e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b80      	cmp	r3, #128	; 0x80
 80041b4:	d0ef      	beq.n	8004196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <xPortStartScheduler+0x134>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1c3 0307 	rsb	r3, r3, #7
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d00a      	beq.n	80041d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60bb      	str	r3, [r7, #8]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041d8:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <xPortStartScheduler+0x134>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <xPortStartScheduler+0x134>)
 80041e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <xPortStartScheduler+0x134>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ea:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <xPortStartScheduler+0x134>)
 80041ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041f6:	4b18      	ldr	r3, [pc, #96]	; (8004258 <xPortStartScheduler+0x138>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <xPortStartScheduler+0x138>)
 80041fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <xPortStartScheduler+0x138>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a14      	ldr	r2, [pc, #80]	; (8004258 <xPortStartScheduler+0x138>)
 8004208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800420c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800420e:	f000 f8dd 	bl	80043cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <xPortStartScheduler+0x13c>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004218:	f000 f8fc 	bl	8004414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <xPortStartScheduler+0x140>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <xPortStartScheduler+0x140>)
 8004222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004228:	f7ff ff66 	bl	80040f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800422c:	f7ff fa8c 	bl	8003748 <vTaskSwitchContext>
	prvTaskExitError();
 8004230:	f7ff ff1c 	bl	800406c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00
 8004244:	410fc271 	.word	0x410fc271
 8004248:	410fc270 	.word	0x410fc270
 800424c:	e000e400 	.word	0xe000e400
 8004250:	20000474 	.word	0x20000474
 8004254:	20000478 	.word	0x20000478
 8004258:	e000ed20 	.word	0xe000ed20
 800425c:	2000000c 	.word	0x2000000c
 8004260:	e000ef34 	.word	0xe000ef34

08004264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	607b      	str	r3, [r7, #4]
}
 800427c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <vPortEnterCritical+0x58>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <vPortEnterCritical+0x58>)
 8004286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <vPortEnterCritical+0x58>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10f      	bne.n	80042b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <vPortEnterCritical+0x5c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	603b      	str	r3, [r7, #0]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <vPortEnterCritical+0x4a>
	}
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	2000000c 	.word	0x2000000c
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042ca:	4b12      	ldr	r3, [pc, #72]	; (8004314 <vPortExitCritical+0x50>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <vPortExitCritical+0x24>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	607b      	str	r3, [r7, #4]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <vPortExitCritical+0x50>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <vPortExitCritical+0x50>)
 80042f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <vPortExitCritical+0x50>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <vPortExitCritical+0x42>
 80042fa:	2300      	movs	r3, #0
 80042fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	2000000c 	.word	0x2000000c
	...

08004320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004320:	f3ef 8009 	mrs	r0, PSP
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	4b15      	ldr	r3, [pc, #84]	; (8004380 <pxCurrentTCBConst>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	f01e 0f10 	tst.w	lr, #16
 8004330:	bf08      	it	eq
 8004332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433a:	6010      	str	r0, [r2, #0]
 800433c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004344:	f380 8811 	msr	BASEPRI, r0
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f7ff f9fa 	bl	8003748 <vTaskSwitchContext>
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f380 8811 	msr	BASEPRI, r0
 800435c:	bc09      	pop	{r0, r3}
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	6808      	ldr	r0, [r1, #0]
 8004362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004366:	f01e 0f10 	tst.w	lr, #16
 800436a:	bf08      	it	eq
 800436c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004370:	f380 8809 	msr	PSP, r0
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	f3af 8000 	nop.w

08004380 <pxCurrentTCBConst>:
 8004380:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop

08004388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	607b      	str	r3, [r7, #4]
}
 80043a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043a2:	f7ff f919 	bl	80035d8 <xTaskIncrementTick>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <xPortSysTickHandler+0x40>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	2300      	movs	r3, #0
 80043b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f383 8811 	msr	BASEPRI, r3
}
 80043be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <vPortSetupTimerInterrupt+0x34>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <vPortSetupTimerInterrupt+0x38>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <vPortSetupTimerInterrupt+0x3c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <vPortSetupTimerInterrupt+0x40>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	4a09      	ldr	r2, [pc, #36]	; (8004410 <vPortSetupTimerInterrupt+0x44>)
 80043ea:	3b01      	subs	r3, #1
 80043ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <vPortSetupTimerInterrupt+0x34>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010
 8004404:	e000e018 	.word	0xe000e018
 8004408:	20000000 	.word	0x20000000
 800440c:	10624dd3 	.word	0x10624dd3
 8004410:	e000e014 	.word	0xe000e014

08004414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004424 <vPortEnableVFP+0x10>
 8004418:	6801      	ldr	r1, [r0, #0]
 800441a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800441e:	6001      	str	r1, [r0, #0]
 8004420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004422:	bf00      	nop
 8004424:	e000ed88 	.word	0xe000ed88

08004428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004434:	f7ff f816 	bl	8003464 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004438:	4b5b      	ldr	r3, [pc, #364]	; (80045a8 <pvPortMalloc+0x180>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004440:	f000 f920 	bl	8004684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004444:	4b59      	ldr	r3, [pc, #356]	; (80045ac <pvPortMalloc+0x184>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	f040 8093 	bne.w	8004578 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01d      	beq.n	8004494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004458:	2208      	movs	r2, #8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	2b00      	cmp	r3, #0
 8004468:	d014      	beq.n	8004494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f023 0307 	bic.w	r3, r3, #7
 8004470:	3308      	adds	r3, #8
 8004472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <pvPortMalloc+0x6c>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	617b      	str	r3, [r7, #20]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d06e      	beq.n	8004578 <pvPortMalloc+0x150>
 800449a:	4b45      	ldr	r3, [pc, #276]	; (80045b0 <pvPortMalloc+0x188>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d869      	bhi.n	8004578 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044a4:	4b43      	ldr	r3, [pc, #268]	; (80045b4 <pvPortMalloc+0x18c>)
 80044a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044a8:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <pvPortMalloc+0x18c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044ae:	e004      	b.n	80044ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d903      	bls.n	80044cc <pvPortMalloc+0xa4>
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f1      	bne.n	80044b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044cc:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <pvPortMalloc+0x180>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d050      	beq.n	8004578 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2208      	movs	r2, #8
 80044dc:	4413      	add	r3, r2
 80044de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	1ad2      	subs	r2, r2, r3
 80044f0:	2308      	movs	r3, #8
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d91f      	bls.n	8004538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4413      	add	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <pvPortMalloc+0xf8>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	613b      	str	r3, [r7, #16]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	1ad2      	subs	r2, r2, r3
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004532:	69b8      	ldr	r0, [r7, #24]
 8004534:	f000 f908 	bl	8004748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004538:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <pvPortMalloc+0x188>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <pvPortMalloc+0x188>)
 8004544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004546:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <pvPortMalloc+0x188>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <pvPortMalloc+0x190>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d203      	bcs.n	800455a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004552:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <pvPortMalloc+0x188>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <pvPortMalloc+0x190>)
 8004558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <pvPortMalloc+0x184>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	431a      	orrs	r2, r3
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <pvPortMalloc+0x194>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3301      	adds	r3, #1
 8004574:	4a11      	ldr	r2, [pc, #68]	; (80045bc <pvPortMalloc+0x194>)
 8004576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004578:	f7fe ff82 	bl	8003480 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <pvPortMalloc+0x174>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	60fb      	str	r3, [r7, #12]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <pvPortMalloc+0x172>
	return pvReturn;
 800459c:	69fb      	ldr	r3, [r7, #28]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3728      	adds	r7, #40	; 0x28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20004084 	.word	0x20004084
 80045ac:	20004098 	.word	0x20004098
 80045b0:	20004088 	.word	0x20004088
 80045b4:	2000407c 	.word	0x2000407c
 80045b8:	2000408c 	.word	0x2000408c
 80045bc:	20004090 	.word	0x20004090

080045c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04d      	beq.n	800466e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045d2:	2308      	movs	r3, #8
 80045d4:	425b      	negs	r3, r3
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4413      	add	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <vPortFree+0xb8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4013      	ands	r3, r2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <vPortFree+0x44>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60fb      	str	r3, [r7, #12]
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <vPortFree+0x62>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	60bb      	str	r3, [r7, #8]
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <vPortFree+0xb8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01e      	beq.n	800466e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11a      	bne.n	800466e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <vPortFree+0xb8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	43db      	mvns	r3, r3
 8004642:	401a      	ands	r2, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004648:	f7fe ff0c 	bl	8003464 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <vPortFree+0xbc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4413      	add	r3, r2
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <vPortFree+0xbc>)
 8004658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800465a:	6938      	ldr	r0, [r7, #16]
 800465c:	f000 f874 	bl	8004748 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <vPortFree+0xc0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	4a06      	ldr	r2, [pc, #24]	; (8004680 <vPortFree+0xc0>)
 8004668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800466a:	f7fe ff09 	bl	8003480 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20004098 	.word	0x20004098
 800467c:	20004088 	.word	0x20004088
 8004680:	20004094 	.word	0x20004094

08004684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800468a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800468e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <prvHeapInit+0xac>)
 8004692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3307      	adds	r3, #7
 80046a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0307 	bic.w	r3, r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <prvHeapInit+0xac>)
 80046b4:	4413      	add	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046bc:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <prvHeapInit+0xb0>)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046c2:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <prvHeapInit+0xb0>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	4413      	add	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046d0:	2208      	movs	r2, #8
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0307 	bic.w	r3, r3, #7
 80046de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a15      	ldr	r2, [pc, #84]	; (8004738 <prvHeapInit+0xb4>)
 80046e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <prvHeapInit+0xb4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2200      	movs	r2, #0
 80046ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046ee:	4b12      	ldr	r3, [pc, #72]	; (8004738 <prvHeapInit+0xb4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	1ad2      	subs	r2, r2, r3
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <prvHeapInit+0xb4>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4a0a      	ldr	r2, [pc, #40]	; (800473c <prvHeapInit+0xb8>)
 8004712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a09      	ldr	r2, [pc, #36]	; (8004740 <prvHeapInit+0xbc>)
 800471a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <prvHeapInit+0xc0>)
 800471e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004722:	601a      	str	r2, [r3, #0]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	2000047c 	.word	0x2000047c
 8004734:	2000407c 	.word	0x2000407c
 8004738:	20004084 	.word	0x20004084
 800473c:	2000408c 	.word	0x2000408c
 8004740:	20004088 	.word	0x20004088
 8004744:	20004098 	.word	0x20004098

08004748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004750:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <prvInsertBlockIntoFreeList+0xac>)
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e002      	b.n	800475c <prvInsertBlockIntoFreeList+0x14>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d8f7      	bhi.n	8004756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	4413      	add	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	d108      	bne.n	800478a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	441a      	add	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	441a      	add	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d118      	bne.n	80047d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <prvInsertBlockIntoFreeList+0xb0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d00d      	beq.n	80047c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	441a      	add	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e008      	b.n	80047d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <prvInsertBlockIntoFreeList+0xb0>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e003      	b.n	80047d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d002      	beq.n	80047e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	2000407c 	.word	0x2000407c
 80047f8:	20004084 	.word	0x20004084

080047fc <__errno>:
 80047fc:	4b01      	ldr	r3, [pc, #4]	; (8004804 <__errno+0x8>)
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000010 	.word	0x20000010

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4d0d      	ldr	r5, [pc, #52]	; (8004840 <__libc_init_array+0x38>)
 800480c:	4c0d      	ldr	r4, [pc, #52]	; (8004844 <__libc_init_array+0x3c>)
 800480e:	1b64      	subs	r4, r4, r5
 8004810:	10a4      	asrs	r4, r4, #2
 8004812:	2600      	movs	r6, #0
 8004814:	42a6      	cmp	r6, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	4d0b      	ldr	r5, [pc, #44]	; (8004848 <__libc_init_array+0x40>)
 800481a:	4c0c      	ldr	r4, [pc, #48]	; (800484c <__libc_init_array+0x44>)
 800481c:	f000 fc8e 	bl	800513c <_init>
 8004820:	1b64      	subs	r4, r4, r5
 8004822:	10a4      	asrs	r4, r4, #2
 8004824:	2600      	movs	r6, #0
 8004826:	42a6      	cmp	r6, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004830:	4798      	blx	r3
 8004832:	3601      	adds	r6, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	f855 3b04 	ldr.w	r3, [r5], #4
 800483a:	4798      	blx	r3
 800483c:	3601      	adds	r6, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	08005354 	.word	0x08005354
 8004844:	08005354 	.word	0x08005354
 8004848:	08005354 	.word	0x08005354
 800484c:	08005358 	.word	0x08005358

08004850 <memcpy>:
 8004850:	440a      	add	r2, r1
 8004852:	4291      	cmp	r1, r2
 8004854:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004858:	d100      	bne.n	800485c <memcpy+0xc>
 800485a:	4770      	bx	lr
 800485c:	b510      	push	{r4, lr}
 800485e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004866:	4291      	cmp	r1, r2
 8004868:	d1f9      	bne.n	800485e <memcpy+0xe>
 800486a:	bd10      	pop	{r4, pc}

0800486c <memset>:
 800486c:	4402      	add	r2, r0
 800486e:	4603      	mov	r3, r0
 8004870:	4293      	cmp	r3, r2
 8004872:	d100      	bne.n	8004876 <memset+0xa>
 8004874:	4770      	bx	lr
 8004876:	f803 1b01 	strb.w	r1, [r3], #1
 800487a:	e7f9      	b.n	8004870 <memset+0x4>

0800487c <siprintf>:
 800487c:	b40e      	push	{r1, r2, r3}
 800487e:	b500      	push	{lr}
 8004880:	b09c      	sub	sp, #112	; 0x70
 8004882:	ab1d      	add	r3, sp, #116	; 0x74
 8004884:	9002      	str	r0, [sp, #8]
 8004886:	9006      	str	r0, [sp, #24]
 8004888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800488c:	4809      	ldr	r0, [pc, #36]	; (80048b4 <siprintf+0x38>)
 800488e:	9107      	str	r1, [sp, #28]
 8004890:	9104      	str	r1, [sp, #16]
 8004892:	4909      	ldr	r1, [pc, #36]	; (80048b8 <siprintf+0x3c>)
 8004894:	f853 2b04 	ldr.w	r2, [r3], #4
 8004898:	9105      	str	r1, [sp, #20]
 800489a:	6800      	ldr	r0, [r0, #0]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	a902      	add	r1, sp, #8
 80048a0:	f000 f868 	bl	8004974 <_svfiprintf_r>
 80048a4:	9b02      	ldr	r3, [sp, #8]
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	b01c      	add	sp, #112	; 0x70
 80048ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80048b0:	b003      	add	sp, #12
 80048b2:	4770      	bx	lr
 80048b4:	20000010 	.word	0x20000010
 80048b8:	ffff0208 	.word	0xffff0208

080048bc <__ssputs_r>:
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	688e      	ldr	r6, [r1, #8]
 80048c2:	429e      	cmp	r6, r3
 80048c4:	4682      	mov	sl, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	4690      	mov	r8, r2
 80048ca:	461f      	mov	r7, r3
 80048cc:	d838      	bhi.n	8004940 <__ssputs_r+0x84>
 80048ce:	898a      	ldrh	r2, [r1, #12]
 80048d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048d4:	d032      	beq.n	800493c <__ssputs_r+0x80>
 80048d6:	6825      	ldr	r5, [r4, #0]
 80048d8:	6909      	ldr	r1, [r1, #16]
 80048da:	eba5 0901 	sub.w	r9, r5, r1
 80048de:	6965      	ldr	r5, [r4, #20]
 80048e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048e8:	3301      	adds	r3, #1
 80048ea:	444b      	add	r3, r9
 80048ec:	106d      	asrs	r5, r5, #1
 80048ee:	429d      	cmp	r5, r3
 80048f0:	bf38      	it	cc
 80048f2:	461d      	movcc	r5, r3
 80048f4:	0553      	lsls	r3, r2, #21
 80048f6:	d531      	bpl.n	800495c <__ssputs_r+0xa0>
 80048f8:	4629      	mov	r1, r5
 80048fa:	f000 fb55 	bl	8004fa8 <_malloc_r>
 80048fe:	4606      	mov	r6, r0
 8004900:	b950      	cbnz	r0, 8004918 <__ssputs_r+0x5c>
 8004902:	230c      	movs	r3, #12
 8004904:	f8ca 3000 	str.w	r3, [sl]
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490e:	81a3      	strh	r3, [r4, #12]
 8004910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004918:	6921      	ldr	r1, [r4, #16]
 800491a:	464a      	mov	r2, r9
 800491c:	f7ff ff98 	bl	8004850 <memcpy>
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492a:	81a3      	strh	r3, [r4, #12]
 800492c:	6126      	str	r6, [r4, #16]
 800492e:	6165      	str	r5, [r4, #20]
 8004930:	444e      	add	r6, r9
 8004932:	eba5 0509 	sub.w	r5, r5, r9
 8004936:	6026      	str	r6, [r4, #0]
 8004938:	60a5      	str	r5, [r4, #8]
 800493a:	463e      	mov	r6, r7
 800493c:	42be      	cmp	r6, r7
 800493e:	d900      	bls.n	8004942 <__ssputs_r+0x86>
 8004940:	463e      	mov	r6, r7
 8004942:	6820      	ldr	r0, [r4, #0]
 8004944:	4632      	mov	r2, r6
 8004946:	4641      	mov	r1, r8
 8004948:	f000 faa8 	bl	8004e9c <memmove>
 800494c:	68a3      	ldr	r3, [r4, #8]
 800494e:	1b9b      	subs	r3, r3, r6
 8004950:	60a3      	str	r3, [r4, #8]
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	4433      	add	r3, r6
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	2000      	movs	r0, #0
 800495a:	e7db      	b.n	8004914 <__ssputs_r+0x58>
 800495c:	462a      	mov	r2, r5
 800495e:	f000 fb97 	bl	8005090 <_realloc_r>
 8004962:	4606      	mov	r6, r0
 8004964:	2800      	cmp	r0, #0
 8004966:	d1e1      	bne.n	800492c <__ssputs_r+0x70>
 8004968:	6921      	ldr	r1, [r4, #16]
 800496a:	4650      	mov	r0, sl
 800496c:	f000 fab0 	bl	8004ed0 <_free_r>
 8004970:	e7c7      	b.n	8004902 <__ssputs_r+0x46>
	...

08004974 <_svfiprintf_r>:
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	4698      	mov	r8, r3
 800497a:	898b      	ldrh	r3, [r1, #12]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	b09d      	sub	sp, #116	; 0x74
 8004980:	4607      	mov	r7, r0
 8004982:	460d      	mov	r5, r1
 8004984:	4614      	mov	r4, r2
 8004986:	d50e      	bpl.n	80049a6 <_svfiprintf_r+0x32>
 8004988:	690b      	ldr	r3, [r1, #16]
 800498a:	b963      	cbnz	r3, 80049a6 <_svfiprintf_r+0x32>
 800498c:	2140      	movs	r1, #64	; 0x40
 800498e:	f000 fb0b 	bl	8004fa8 <_malloc_r>
 8004992:	6028      	str	r0, [r5, #0]
 8004994:	6128      	str	r0, [r5, #16]
 8004996:	b920      	cbnz	r0, 80049a2 <_svfiprintf_r+0x2e>
 8004998:	230c      	movs	r3, #12
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a0:	e0d1      	b.n	8004b46 <_svfiprintf_r+0x1d2>
 80049a2:	2340      	movs	r3, #64	; 0x40
 80049a4:	616b      	str	r3, [r5, #20]
 80049a6:	2300      	movs	r3, #0
 80049a8:	9309      	str	r3, [sp, #36]	; 0x24
 80049aa:	2320      	movs	r3, #32
 80049ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80049b4:	2330      	movs	r3, #48	; 0x30
 80049b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b60 <_svfiprintf_r+0x1ec>
 80049ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049be:	f04f 0901 	mov.w	r9, #1
 80049c2:	4623      	mov	r3, r4
 80049c4:	469a      	mov	sl, r3
 80049c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ca:	b10a      	cbz	r2, 80049d0 <_svfiprintf_r+0x5c>
 80049cc:	2a25      	cmp	r2, #37	; 0x25
 80049ce:	d1f9      	bne.n	80049c4 <_svfiprintf_r+0x50>
 80049d0:	ebba 0b04 	subs.w	fp, sl, r4
 80049d4:	d00b      	beq.n	80049ee <_svfiprintf_r+0x7a>
 80049d6:	465b      	mov	r3, fp
 80049d8:	4622      	mov	r2, r4
 80049da:	4629      	mov	r1, r5
 80049dc:	4638      	mov	r0, r7
 80049de:	f7ff ff6d 	bl	80048bc <__ssputs_r>
 80049e2:	3001      	adds	r0, #1
 80049e4:	f000 80aa 	beq.w	8004b3c <_svfiprintf_r+0x1c8>
 80049e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ea:	445a      	add	r2, fp
 80049ec:	9209      	str	r2, [sp, #36]	; 0x24
 80049ee:	f89a 3000 	ldrb.w	r3, [sl]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80a2 	beq.w	8004b3c <_svfiprintf_r+0x1c8>
 80049f8:	2300      	movs	r3, #0
 80049fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a02:	f10a 0a01 	add.w	sl, sl, #1
 8004a06:	9304      	str	r3, [sp, #16]
 8004a08:	9307      	str	r3, [sp, #28]
 8004a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a10:	4654      	mov	r4, sl
 8004a12:	2205      	movs	r2, #5
 8004a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a18:	4851      	ldr	r0, [pc, #324]	; (8004b60 <_svfiprintf_r+0x1ec>)
 8004a1a:	f7fb fc21 	bl	8000260 <memchr>
 8004a1e:	9a04      	ldr	r2, [sp, #16]
 8004a20:	b9d8      	cbnz	r0, 8004a5a <_svfiprintf_r+0xe6>
 8004a22:	06d0      	lsls	r0, r2, #27
 8004a24:	bf44      	itt	mi
 8004a26:	2320      	movmi	r3, #32
 8004a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a2c:	0711      	lsls	r1, r2, #28
 8004a2e:	bf44      	itt	mi
 8004a30:	232b      	movmi	r3, #43	; 0x2b
 8004a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a36:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3c:	d015      	beq.n	8004a6a <_svfiprintf_r+0xf6>
 8004a3e:	9a07      	ldr	r2, [sp, #28]
 8004a40:	4654      	mov	r4, sl
 8004a42:	2000      	movs	r0, #0
 8004a44:	f04f 0c0a 	mov.w	ip, #10
 8004a48:	4621      	mov	r1, r4
 8004a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a4e:	3b30      	subs	r3, #48	; 0x30
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	d94e      	bls.n	8004af2 <_svfiprintf_r+0x17e>
 8004a54:	b1b0      	cbz	r0, 8004a84 <_svfiprintf_r+0x110>
 8004a56:	9207      	str	r2, [sp, #28]
 8004a58:	e014      	b.n	8004a84 <_svfiprintf_r+0x110>
 8004a5a:	eba0 0308 	sub.w	r3, r0, r8
 8004a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a62:	4313      	orrs	r3, r2
 8004a64:	9304      	str	r3, [sp, #16]
 8004a66:	46a2      	mov	sl, r4
 8004a68:	e7d2      	b.n	8004a10 <_svfiprintf_r+0x9c>
 8004a6a:	9b03      	ldr	r3, [sp, #12]
 8004a6c:	1d19      	adds	r1, r3, #4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	9103      	str	r1, [sp, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bfbb      	ittet	lt
 8004a76:	425b      	neglt	r3, r3
 8004a78:	f042 0202 	orrlt.w	r2, r2, #2
 8004a7c:	9307      	strge	r3, [sp, #28]
 8004a7e:	9307      	strlt	r3, [sp, #28]
 8004a80:	bfb8      	it	lt
 8004a82:	9204      	strlt	r2, [sp, #16]
 8004a84:	7823      	ldrb	r3, [r4, #0]
 8004a86:	2b2e      	cmp	r3, #46	; 0x2e
 8004a88:	d10c      	bne.n	8004aa4 <_svfiprintf_r+0x130>
 8004a8a:	7863      	ldrb	r3, [r4, #1]
 8004a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8e:	d135      	bne.n	8004afc <_svfiprintf_r+0x188>
 8004a90:	9b03      	ldr	r3, [sp, #12]
 8004a92:	1d1a      	adds	r2, r3, #4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	9203      	str	r2, [sp, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bfb8      	it	lt
 8004a9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004aa0:	3402      	adds	r4, #2
 8004aa2:	9305      	str	r3, [sp, #20]
 8004aa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b70 <_svfiprintf_r+0x1fc>
 8004aa8:	7821      	ldrb	r1, [r4, #0]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	4650      	mov	r0, sl
 8004aae:	f7fb fbd7 	bl	8000260 <memchr>
 8004ab2:	b140      	cbz	r0, 8004ac6 <_svfiprintf_r+0x152>
 8004ab4:	2340      	movs	r3, #64	; 0x40
 8004ab6:	eba0 000a 	sub.w	r0, r0, sl
 8004aba:	fa03 f000 	lsl.w	r0, r3, r0
 8004abe:	9b04      	ldr	r3, [sp, #16]
 8004ac0:	4303      	orrs	r3, r0
 8004ac2:	3401      	adds	r4, #1
 8004ac4:	9304      	str	r3, [sp, #16]
 8004ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aca:	4826      	ldr	r0, [pc, #152]	; (8004b64 <_svfiprintf_r+0x1f0>)
 8004acc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ad0:	2206      	movs	r2, #6
 8004ad2:	f7fb fbc5 	bl	8000260 <memchr>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d038      	beq.n	8004b4c <_svfiprintf_r+0x1d8>
 8004ada:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <_svfiprintf_r+0x1f4>)
 8004adc:	bb1b      	cbnz	r3, 8004b26 <_svfiprintf_r+0x1b2>
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	3307      	adds	r3, #7
 8004ae2:	f023 0307 	bic.w	r3, r3, #7
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	9303      	str	r3, [sp, #12]
 8004aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aec:	4433      	add	r3, r6
 8004aee:	9309      	str	r3, [sp, #36]	; 0x24
 8004af0:	e767      	b.n	80049c2 <_svfiprintf_r+0x4e>
 8004af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004af6:	460c      	mov	r4, r1
 8004af8:	2001      	movs	r0, #1
 8004afa:	e7a5      	b.n	8004a48 <_svfiprintf_r+0xd4>
 8004afc:	2300      	movs	r3, #0
 8004afe:	3401      	adds	r4, #1
 8004b00:	9305      	str	r3, [sp, #20]
 8004b02:	4619      	mov	r1, r3
 8004b04:	f04f 0c0a 	mov.w	ip, #10
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b0e:	3a30      	subs	r2, #48	; 0x30
 8004b10:	2a09      	cmp	r2, #9
 8004b12:	d903      	bls.n	8004b1c <_svfiprintf_r+0x1a8>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0c5      	beq.n	8004aa4 <_svfiprintf_r+0x130>
 8004b18:	9105      	str	r1, [sp, #20]
 8004b1a:	e7c3      	b.n	8004aa4 <_svfiprintf_r+0x130>
 8004b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b20:	4604      	mov	r4, r0
 8004b22:	2301      	movs	r3, #1
 8004b24:	e7f0      	b.n	8004b08 <_svfiprintf_r+0x194>
 8004b26:	ab03      	add	r3, sp, #12
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	462a      	mov	r2, r5
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <_svfiprintf_r+0x1f8>)
 8004b2e:	a904      	add	r1, sp, #16
 8004b30:	4638      	mov	r0, r7
 8004b32:	f3af 8000 	nop.w
 8004b36:	1c42      	adds	r2, r0, #1
 8004b38:	4606      	mov	r6, r0
 8004b3a:	d1d6      	bne.n	8004aea <_svfiprintf_r+0x176>
 8004b3c:	89ab      	ldrh	r3, [r5, #12]
 8004b3e:	065b      	lsls	r3, r3, #25
 8004b40:	f53f af2c 	bmi.w	800499c <_svfiprintf_r+0x28>
 8004b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b46:	b01d      	add	sp, #116	; 0x74
 8004b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4c:	ab03      	add	r3, sp, #12
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	462a      	mov	r2, r5
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <_svfiprintf_r+0x1f8>)
 8004b54:	a904      	add	r1, sp, #16
 8004b56:	4638      	mov	r0, r7
 8004b58:	f000 f87a 	bl	8004c50 <_printf_i>
 8004b5c:	e7eb      	b.n	8004b36 <_svfiprintf_r+0x1c2>
 8004b5e:	bf00      	nop
 8004b60:	08005318 	.word	0x08005318
 8004b64:	08005322 	.word	0x08005322
 8004b68:	00000000 	.word	0x00000000
 8004b6c:	080048bd 	.word	0x080048bd
 8004b70:	0800531e 	.word	0x0800531e

08004b74 <_printf_common>:
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	4616      	mov	r6, r2
 8004b7a:	4699      	mov	r9, r3
 8004b7c:	688a      	ldr	r2, [r1, #8]
 8004b7e:	690b      	ldr	r3, [r1, #16]
 8004b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b84:	4293      	cmp	r3, r2
 8004b86:	bfb8      	it	lt
 8004b88:	4613      	movlt	r3, r2
 8004b8a:	6033      	str	r3, [r6, #0]
 8004b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b90:	4607      	mov	r7, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	b10a      	cbz	r2, 8004b9a <_printf_common+0x26>
 8004b96:	3301      	adds	r3, #1
 8004b98:	6033      	str	r3, [r6, #0]
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	0699      	lsls	r1, r3, #26
 8004b9e:	bf42      	ittt	mi
 8004ba0:	6833      	ldrmi	r3, [r6, #0]
 8004ba2:	3302      	addmi	r3, #2
 8004ba4:	6033      	strmi	r3, [r6, #0]
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	f015 0506 	ands.w	r5, r5, #6
 8004bac:	d106      	bne.n	8004bbc <_printf_common+0x48>
 8004bae:	f104 0a19 	add.w	sl, r4, #25
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	6832      	ldr	r2, [r6, #0]
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dc26      	bgt.n	8004c0a <_printf_common+0x96>
 8004bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc0:	1e13      	subs	r3, r2, #0
 8004bc2:	6822      	ldr	r2, [r4, #0]
 8004bc4:	bf18      	it	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	0692      	lsls	r2, r2, #26
 8004bca:	d42b      	bmi.n	8004c24 <_printf_common+0xb0>
 8004bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d01e      	beq.n	8004c18 <_printf_common+0xa4>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	68e5      	ldr	r5, [r4, #12]
 8004bde:	6832      	ldr	r2, [r6, #0]
 8004be0:	f003 0306 	and.w	r3, r3, #6
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	bf08      	it	eq
 8004be8:	1aad      	subeq	r5, r5, r2
 8004bea:	68a3      	ldr	r3, [r4, #8]
 8004bec:	6922      	ldr	r2, [r4, #16]
 8004bee:	bf0c      	ite	eq
 8004bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf4:	2500      	movne	r5, #0
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bfc4      	itt	gt
 8004bfa:	1a9b      	subgt	r3, r3, r2
 8004bfc:	18ed      	addgt	r5, r5, r3
 8004bfe:	2600      	movs	r6, #0
 8004c00:	341a      	adds	r4, #26
 8004c02:	42b5      	cmp	r5, r6
 8004c04:	d11a      	bne.n	8004c3c <_printf_common+0xc8>
 8004c06:	2000      	movs	r0, #0
 8004c08:	e008      	b.n	8004c1c <_printf_common+0xa8>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	4649      	mov	r1, r9
 8004c10:	4638      	mov	r0, r7
 8004c12:	47c0      	blx	r8
 8004c14:	3001      	adds	r0, #1
 8004c16:	d103      	bne.n	8004c20 <_printf_common+0xac>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c20:	3501      	adds	r5, #1
 8004c22:	e7c6      	b.n	8004bb2 <_printf_common+0x3e>
 8004c24:	18e1      	adds	r1, r4, r3
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	2030      	movs	r0, #48	; 0x30
 8004c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c2e:	4422      	add	r2, r4
 8004c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c38:	3302      	adds	r3, #2
 8004c3a:	e7c7      	b.n	8004bcc <_printf_common+0x58>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4622      	mov	r2, r4
 8004c40:	4649      	mov	r1, r9
 8004c42:	4638      	mov	r0, r7
 8004c44:	47c0      	blx	r8
 8004c46:	3001      	adds	r0, #1
 8004c48:	d0e6      	beq.n	8004c18 <_printf_common+0xa4>
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7d9      	b.n	8004c02 <_printf_common+0x8e>
	...

08004c50 <_printf_i>:
 8004c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	7e0f      	ldrb	r7, [r1, #24]
 8004c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c58:	2f78      	cmp	r7, #120	; 0x78
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	469a      	mov	sl, r3
 8004c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c66:	d807      	bhi.n	8004c78 <_printf_i+0x28>
 8004c68:	2f62      	cmp	r7, #98	; 0x62
 8004c6a:	d80a      	bhi.n	8004c82 <_printf_i+0x32>
 8004c6c:	2f00      	cmp	r7, #0
 8004c6e:	f000 80d8 	beq.w	8004e22 <_printf_i+0x1d2>
 8004c72:	2f58      	cmp	r7, #88	; 0x58
 8004c74:	f000 80a3 	beq.w	8004dbe <_printf_i+0x16e>
 8004c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c80:	e03a      	b.n	8004cf8 <_printf_i+0xa8>
 8004c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c86:	2b15      	cmp	r3, #21
 8004c88:	d8f6      	bhi.n	8004c78 <_printf_i+0x28>
 8004c8a:	a101      	add	r1, pc, #4	; (adr r1, 8004c90 <_printf_i+0x40>)
 8004c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c90:	08004ce9 	.word	0x08004ce9
 8004c94:	08004cfd 	.word	0x08004cfd
 8004c98:	08004c79 	.word	0x08004c79
 8004c9c:	08004c79 	.word	0x08004c79
 8004ca0:	08004c79 	.word	0x08004c79
 8004ca4:	08004c79 	.word	0x08004c79
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004c79 	.word	0x08004c79
 8004cb0:	08004c79 	.word	0x08004c79
 8004cb4:	08004c79 	.word	0x08004c79
 8004cb8:	08004c79 	.word	0x08004c79
 8004cbc:	08004e09 	.word	0x08004e09
 8004cc0:	08004d2d 	.word	0x08004d2d
 8004cc4:	08004deb 	.word	0x08004deb
 8004cc8:	08004c79 	.word	0x08004c79
 8004ccc:	08004c79 	.word	0x08004c79
 8004cd0:	08004e2b 	.word	0x08004e2b
 8004cd4:	08004c79 	.word	0x08004c79
 8004cd8:	08004d2d 	.word	0x08004d2d
 8004cdc:	08004c79 	.word	0x08004c79
 8004ce0:	08004c79 	.word	0x08004c79
 8004ce4:	08004df3 	.word	0x08004df3
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	602a      	str	r2, [r5, #0]
 8004cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0a3      	b.n	8004e44 <_printf_i+0x1f4>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	6829      	ldr	r1, [r5, #0]
 8004d00:	0606      	lsls	r6, r0, #24
 8004d02:	f101 0304 	add.w	r3, r1, #4
 8004d06:	d50a      	bpl.n	8004d1e <_printf_i+0xce>
 8004d08:	680e      	ldr	r6, [r1, #0]
 8004d0a:	602b      	str	r3, [r5, #0]
 8004d0c:	2e00      	cmp	r6, #0
 8004d0e:	da03      	bge.n	8004d18 <_printf_i+0xc8>
 8004d10:	232d      	movs	r3, #45	; 0x2d
 8004d12:	4276      	negs	r6, r6
 8004d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d18:	485e      	ldr	r0, [pc, #376]	; (8004e94 <_printf_i+0x244>)
 8004d1a:	230a      	movs	r3, #10
 8004d1c:	e019      	b.n	8004d52 <_printf_i+0x102>
 8004d1e:	680e      	ldr	r6, [r1, #0]
 8004d20:	602b      	str	r3, [r5, #0]
 8004d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d26:	bf18      	it	ne
 8004d28:	b236      	sxthne	r6, r6
 8004d2a:	e7ef      	b.n	8004d0c <_printf_i+0xbc>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	6820      	ldr	r0, [r4, #0]
 8004d30:	1d19      	adds	r1, r3, #4
 8004d32:	6029      	str	r1, [r5, #0]
 8004d34:	0601      	lsls	r1, r0, #24
 8004d36:	d501      	bpl.n	8004d3c <_printf_i+0xec>
 8004d38:	681e      	ldr	r6, [r3, #0]
 8004d3a:	e002      	b.n	8004d42 <_printf_i+0xf2>
 8004d3c:	0646      	lsls	r6, r0, #25
 8004d3e:	d5fb      	bpl.n	8004d38 <_printf_i+0xe8>
 8004d40:	881e      	ldrh	r6, [r3, #0]
 8004d42:	4854      	ldr	r0, [pc, #336]	; (8004e94 <_printf_i+0x244>)
 8004d44:	2f6f      	cmp	r7, #111	; 0x6f
 8004d46:	bf0c      	ite	eq
 8004d48:	2308      	moveq	r3, #8
 8004d4a:	230a      	movne	r3, #10
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d52:	6865      	ldr	r5, [r4, #4]
 8004d54:	60a5      	str	r5, [r4, #8]
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	bfa2      	ittt	ge
 8004d5a:	6821      	ldrge	r1, [r4, #0]
 8004d5c:	f021 0104 	bicge.w	r1, r1, #4
 8004d60:	6021      	strge	r1, [r4, #0]
 8004d62:	b90e      	cbnz	r6, 8004d68 <_printf_i+0x118>
 8004d64:	2d00      	cmp	r5, #0
 8004d66:	d04d      	beq.n	8004e04 <_printf_i+0x1b4>
 8004d68:	4615      	mov	r5, r2
 8004d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d72:	5dc7      	ldrb	r7, [r0, r7]
 8004d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d78:	4637      	mov	r7, r6
 8004d7a:	42bb      	cmp	r3, r7
 8004d7c:	460e      	mov	r6, r1
 8004d7e:	d9f4      	bls.n	8004d6a <_printf_i+0x11a>
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d10b      	bne.n	8004d9c <_printf_i+0x14c>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	07de      	lsls	r6, r3, #31
 8004d88:	d508      	bpl.n	8004d9c <_printf_i+0x14c>
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	6861      	ldr	r1, [r4, #4]
 8004d8e:	4299      	cmp	r1, r3
 8004d90:	bfde      	ittt	le
 8004d92:	2330      	movle	r3, #48	; 0x30
 8004d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d9c:	1b52      	subs	r2, r2, r5
 8004d9e:	6122      	str	r2, [r4, #16]
 8004da0:	f8cd a000 	str.w	sl, [sp]
 8004da4:	464b      	mov	r3, r9
 8004da6:	aa03      	add	r2, sp, #12
 8004da8:	4621      	mov	r1, r4
 8004daa:	4640      	mov	r0, r8
 8004dac:	f7ff fee2 	bl	8004b74 <_printf_common>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d14c      	bne.n	8004e4e <_printf_i+0x1fe>
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db8:	b004      	add	sp, #16
 8004dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbe:	4835      	ldr	r0, [pc, #212]	; (8004e94 <_printf_i+0x244>)
 8004dc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004dc4:	6829      	ldr	r1, [r5, #0]
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dcc:	6029      	str	r1, [r5, #0]
 8004dce:	061d      	lsls	r5, r3, #24
 8004dd0:	d514      	bpl.n	8004dfc <_printf_i+0x1ac>
 8004dd2:	07df      	lsls	r7, r3, #31
 8004dd4:	bf44      	itt	mi
 8004dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dda:	6023      	strmi	r3, [r4, #0]
 8004ddc:	b91e      	cbnz	r6, 8004de6 <_printf_i+0x196>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	f023 0320 	bic.w	r3, r3, #32
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	2310      	movs	r3, #16
 8004de8:	e7b0      	b.n	8004d4c <_printf_i+0xfc>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	f043 0320 	orr.w	r3, r3, #32
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	2378      	movs	r3, #120	; 0x78
 8004df4:	4828      	ldr	r0, [pc, #160]	; (8004e98 <_printf_i+0x248>)
 8004df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dfa:	e7e3      	b.n	8004dc4 <_printf_i+0x174>
 8004dfc:	0659      	lsls	r1, r3, #25
 8004dfe:	bf48      	it	mi
 8004e00:	b2b6      	uxthmi	r6, r6
 8004e02:	e7e6      	b.n	8004dd2 <_printf_i+0x182>
 8004e04:	4615      	mov	r5, r2
 8004e06:	e7bb      	b.n	8004d80 <_printf_i+0x130>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	6826      	ldr	r6, [r4, #0]
 8004e0c:	6961      	ldr	r1, [r4, #20]
 8004e0e:	1d18      	adds	r0, r3, #4
 8004e10:	6028      	str	r0, [r5, #0]
 8004e12:	0635      	lsls	r5, r6, #24
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	d501      	bpl.n	8004e1c <_printf_i+0x1cc>
 8004e18:	6019      	str	r1, [r3, #0]
 8004e1a:	e002      	b.n	8004e22 <_printf_i+0x1d2>
 8004e1c:	0670      	lsls	r0, r6, #25
 8004e1e:	d5fb      	bpl.n	8004e18 <_printf_i+0x1c8>
 8004e20:	8019      	strh	r1, [r3, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	6123      	str	r3, [r4, #16]
 8004e26:	4615      	mov	r5, r2
 8004e28:	e7ba      	b.n	8004da0 <_printf_i+0x150>
 8004e2a:	682b      	ldr	r3, [r5, #0]
 8004e2c:	1d1a      	adds	r2, r3, #4
 8004e2e:	602a      	str	r2, [r5, #0]
 8004e30:	681d      	ldr	r5, [r3, #0]
 8004e32:	6862      	ldr	r2, [r4, #4]
 8004e34:	2100      	movs	r1, #0
 8004e36:	4628      	mov	r0, r5
 8004e38:	f7fb fa12 	bl	8000260 <memchr>
 8004e3c:	b108      	cbz	r0, 8004e42 <_printf_i+0x1f2>
 8004e3e:	1b40      	subs	r0, r0, r5
 8004e40:	6060      	str	r0, [r4, #4]
 8004e42:	6863      	ldr	r3, [r4, #4]
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	2300      	movs	r3, #0
 8004e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e4c:	e7a8      	b.n	8004da0 <_printf_i+0x150>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	462a      	mov	r2, r5
 8004e52:	4649      	mov	r1, r9
 8004e54:	4640      	mov	r0, r8
 8004e56:	47d0      	blx	sl
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d0ab      	beq.n	8004db4 <_printf_i+0x164>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	079b      	lsls	r3, r3, #30
 8004e60:	d413      	bmi.n	8004e8a <_printf_i+0x23a>
 8004e62:	68e0      	ldr	r0, [r4, #12]
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	4298      	cmp	r0, r3
 8004e68:	bfb8      	it	lt
 8004e6a:	4618      	movlt	r0, r3
 8004e6c:	e7a4      	b.n	8004db8 <_printf_i+0x168>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4632      	mov	r2, r6
 8004e72:	4649      	mov	r1, r9
 8004e74:	4640      	mov	r0, r8
 8004e76:	47d0      	blx	sl
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d09b      	beq.n	8004db4 <_printf_i+0x164>
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	68e3      	ldr	r3, [r4, #12]
 8004e80:	9903      	ldr	r1, [sp, #12]
 8004e82:	1a5b      	subs	r3, r3, r1
 8004e84:	42ab      	cmp	r3, r5
 8004e86:	dcf2      	bgt.n	8004e6e <_printf_i+0x21e>
 8004e88:	e7eb      	b.n	8004e62 <_printf_i+0x212>
 8004e8a:	2500      	movs	r5, #0
 8004e8c:	f104 0619 	add.w	r6, r4, #25
 8004e90:	e7f5      	b.n	8004e7e <_printf_i+0x22e>
 8004e92:	bf00      	nop
 8004e94:	08005329 	.word	0x08005329
 8004e98:	0800533a 	.word	0x0800533a

08004e9c <memmove>:
 8004e9c:	4288      	cmp	r0, r1
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	eb01 0402 	add.w	r4, r1, r2
 8004ea4:	d902      	bls.n	8004eac <memmove+0x10>
 8004ea6:	4284      	cmp	r4, r0
 8004ea8:	4623      	mov	r3, r4
 8004eaa:	d807      	bhi.n	8004ebc <memmove+0x20>
 8004eac:	1e43      	subs	r3, r0, #1
 8004eae:	42a1      	cmp	r1, r4
 8004eb0:	d008      	beq.n	8004ec4 <memmove+0x28>
 8004eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eba:	e7f8      	b.n	8004eae <memmove+0x12>
 8004ebc:	4402      	add	r2, r0
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	428a      	cmp	r2, r1
 8004ec2:	d100      	bne.n	8004ec6 <memmove+0x2a>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ece:	e7f7      	b.n	8004ec0 <memmove+0x24>

08004ed0 <_free_r>:
 8004ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ed2:	2900      	cmp	r1, #0
 8004ed4:	d044      	beq.n	8004f60 <_free_r+0x90>
 8004ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eda:	9001      	str	r0, [sp, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f1a1 0404 	sub.w	r4, r1, #4
 8004ee2:	bfb8      	it	lt
 8004ee4:	18e4      	addlt	r4, r4, r3
 8004ee6:	f000 f913 	bl	8005110 <__malloc_lock>
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <_free_r+0x94>)
 8004eec:	9801      	ldr	r0, [sp, #4]
 8004eee:	6813      	ldr	r3, [r2, #0]
 8004ef0:	b933      	cbnz	r3, 8004f00 <_free_r+0x30>
 8004ef2:	6063      	str	r3, [r4, #4]
 8004ef4:	6014      	str	r4, [r2, #0]
 8004ef6:	b003      	add	sp, #12
 8004ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004efc:	f000 b90e 	b.w	800511c <__malloc_unlock>
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	d908      	bls.n	8004f16 <_free_r+0x46>
 8004f04:	6825      	ldr	r5, [r4, #0]
 8004f06:	1961      	adds	r1, r4, r5
 8004f08:	428b      	cmp	r3, r1
 8004f0a:	bf01      	itttt	eq
 8004f0c:	6819      	ldreq	r1, [r3, #0]
 8004f0e:	685b      	ldreq	r3, [r3, #4]
 8004f10:	1949      	addeq	r1, r1, r5
 8004f12:	6021      	streq	r1, [r4, #0]
 8004f14:	e7ed      	b.n	8004ef2 <_free_r+0x22>
 8004f16:	461a      	mov	r2, r3
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	b10b      	cbz	r3, 8004f20 <_free_r+0x50>
 8004f1c:	42a3      	cmp	r3, r4
 8004f1e:	d9fa      	bls.n	8004f16 <_free_r+0x46>
 8004f20:	6811      	ldr	r1, [r2, #0]
 8004f22:	1855      	adds	r5, r2, r1
 8004f24:	42a5      	cmp	r5, r4
 8004f26:	d10b      	bne.n	8004f40 <_free_r+0x70>
 8004f28:	6824      	ldr	r4, [r4, #0]
 8004f2a:	4421      	add	r1, r4
 8004f2c:	1854      	adds	r4, r2, r1
 8004f2e:	42a3      	cmp	r3, r4
 8004f30:	6011      	str	r1, [r2, #0]
 8004f32:	d1e0      	bne.n	8004ef6 <_free_r+0x26>
 8004f34:	681c      	ldr	r4, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	6053      	str	r3, [r2, #4]
 8004f3a:	4421      	add	r1, r4
 8004f3c:	6011      	str	r1, [r2, #0]
 8004f3e:	e7da      	b.n	8004ef6 <_free_r+0x26>
 8004f40:	d902      	bls.n	8004f48 <_free_r+0x78>
 8004f42:	230c      	movs	r3, #12
 8004f44:	6003      	str	r3, [r0, #0]
 8004f46:	e7d6      	b.n	8004ef6 <_free_r+0x26>
 8004f48:	6825      	ldr	r5, [r4, #0]
 8004f4a:	1961      	adds	r1, r4, r5
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	bf04      	itt	eq
 8004f50:	6819      	ldreq	r1, [r3, #0]
 8004f52:	685b      	ldreq	r3, [r3, #4]
 8004f54:	6063      	str	r3, [r4, #4]
 8004f56:	bf04      	itt	eq
 8004f58:	1949      	addeq	r1, r1, r5
 8004f5a:	6021      	streq	r1, [r4, #0]
 8004f5c:	6054      	str	r4, [r2, #4]
 8004f5e:	e7ca      	b.n	8004ef6 <_free_r+0x26>
 8004f60:	b003      	add	sp, #12
 8004f62:	bd30      	pop	{r4, r5, pc}
 8004f64:	2000409c 	.word	0x2000409c

08004f68 <sbrk_aligned>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4e0e      	ldr	r6, [pc, #56]	; (8004fa4 <sbrk_aligned+0x3c>)
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	6831      	ldr	r1, [r6, #0]
 8004f70:	4605      	mov	r5, r0
 8004f72:	b911      	cbnz	r1, 8004f7a <sbrk_aligned+0x12>
 8004f74:	f000 f8bc 	bl	80050f0 <_sbrk_r>
 8004f78:	6030      	str	r0, [r6, #0]
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 f8b7 	bl	80050f0 <_sbrk_r>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	d00a      	beq.n	8004f9c <sbrk_aligned+0x34>
 8004f86:	1cc4      	adds	r4, r0, #3
 8004f88:	f024 0403 	bic.w	r4, r4, #3
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d007      	beq.n	8004fa0 <sbrk_aligned+0x38>
 8004f90:	1a21      	subs	r1, r4, r0
 8004f92:	4628      	mov	r0, r5
 8004f94:	f000 f8ac 	bl	80050f0 <_sbrk_r>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d101      	bne.n	8004fa0 <sbrk_aligned+0x38>
 8004f9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	200040a0 	.word	0x200040a0

08004fa8 <_malloc_r>:
 8004fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fac:	1ccd      	adds	r5, r1, #3
 8004fae:	f025 0503 	bic.w	r5, r5, #3
 8004fb2:	3508      	adds	r5, #8
 8004fb4:	2d0c      	cmp	r5, #12
 8004fb6:	bf38      	it	cc
 8004fb8:	250c      	movcc	r5, #12
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	db01      	blt.n	8004fc4 <_malloc_r+0x1c>
 8004fc0:	42a9      	cmp	r1, r5
 8004fc2:	d905      	bls.n	8004fd0 <_malloc_r+0x28>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	2600      	movs	r6, #0
 8004fca:	4630      	mov	r0, r6
 8004fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd0:	4e2e      	ldr	r6, [pc, #184]	; (800508c <_malloc_r+0xe4>)
 8004fd2:	f000 f89d 	bl	8005110 <__malloc_lock>
 8004fd6:	6833      	ldr	r3, [r6, #0]
 8004fd8:	461c      	mov	r4, r3
 8004fda:	bb34      	cbnz	r4, 800502a <_malloc_r+0x82>
 8004fdc:	4629      	mov	r1, r5
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f7ff ffc2 	bl	8004f68 <sbrk_aligned>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	d14d      	bne.n	8005086 <_malloc_r+0xde>
 8004fea:	6834      	ldr	r4, [r6, #0]
 8004fec:	4626      	mov	r6, r4
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d140      	bne.n	8005074 <_malloc_r+0xcc>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	eb04 0803 	add.w	r8, r4, r3
 8004ffc:	f000 f878 	bl	80050f0 <_sbrk_r>
 8005000:	4580      	cmp	r8, r0
 8005002:	d13a      	bne.n	800507a <_malloc_r+0xd2>
 8005004:	6821      	ldr	r1, [r4, #0]
 8005006:	3503      	adds	r5, #3
 8005008:	1a6d      	subs	r5, r5, r1
 800500a:	f025 0503 	bic.w	r5, r5, #3
 800500e:	3508      	adds	r5, #8
 8005010:	2d0c      	cmp	r5, #12
 8005012:	bf38      	it	cc
 8005014:	250c      	movcc	r5, #12
 8005016:	4629      	mov	r1, r5
 8005018:	4638      	mov	r0, r7
 800501a:	f7ff ffa5 	bl	8004f68 <sbrk_aligned>
 800501e:	3001      	adds	r0, #1
 8005020:	d02b      	beq.n	800507a <_malloc_r+0xd2>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	442b      	add	r3, r5
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	e00e      	b.n	8005048 <_malloc_r+0xa0>
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	1b52      	subs	r2, r2, r5
 800502e:	d41e      	bmi.n	800506e <_malloc_r+0xc6>
 8005030:	2a0b      	cmp	r2, #11
 8005032:	d916      	bls.n	8005062 <_malloc_r+0xba>
 8005034:	1961      	adds	r1, r4, r5
 8005036:	42a3      	cmp	r3, r4
 8005038:	6025      	str	r5, [r4, #0]
 800503a:	bf18      	it	ne
 800503c:	6059      	strne	r1, [r3, #4]
 800503e:	6863      	ldr	r3, [r4, #4]
 8005040:	bf08      	it	eq
 8005042:	6031      	streq	r1, [r6, #0]
 8005044:	5162      	str	r2, [r4, r5]
 8005046:	604b      	str	r3, [r1, #4]
 8005048:	4638      	mov	r0, r7
 800504a:	f104 060b 	add.w	r6, r4, #11
 800504e:	f000 f865 	bl	800511c <__malloc_unlock>
 8005052:	f026 0607 	bic.w	r6, r6, #7
 8005056:	1d23      	adds	r3, r4, #4
 8005058:	1af2      	subs	r2, r6, r3
 800505a:	d0b6      	beq.n	8004fca <_malloc_r+0x22>
 800505c:	1b9b      	subs	r3, r3, r6
 800505e:	50a3      	str	r3, [r4, r2]
 8005060:	e7b3      	b.n	8004fca <_malloc_r+0x22>
 8005062:	6862      	ldr	r2, [r4, #4]
 8005064:	42a3      	cmp	r3, r4
 8005066:	bf0c      	ite	eq
 8005068:	6032      	streq	r2, [r6, #0]
 800506a:	605a      	strne	r2, [r3, #4]
 800506c:	e7ec      	b.n	8005048 <_malloc_r+0xa0>
 800506e:	4623      	mov	r3, r4
 8005070:	6864      	ldr	r4, [r4, #4]
 8005072:	e7b2      	b.n	8004fda <_malloc_r+0x32>
 8005074:	4634      	mov	r4, r6
 8005076:	6876      	ldr	r6, [r6, #4]
 8005078:	e7b9      	b.n	8004fee <_malloc_r+0x46>
 800507a:	230c      	movs	r3, #12
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4638      	mov	r0, r7
 8005080:	f000 f84c 	bl	800511c <__malloc_unlock>
 8005084:	e7a1      	b.n	8004fca <_malloc_r+0x22>
 8005086:	6025      	str	r5, [r4, #0]
 8005088:	e7de      	b.n	8005048 <_malloc_r+0xa0>
 800508a:	bf00      	nop
 800508c:	2000409c 	.word	0x2000409c

08005090 <_realloc_r>:
 8005090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005094:	4680      	mov	r8, r0
 8005096:	4614      	mov	r4, r2
 8005098:	460e      	mov	r6, r1
 800509a:	b921      	cbnz	r1, 80050a6 <_realloc_r+0x16>
 800509c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050a0:	4611      	mov	r1, r2
 80050a2:	f7ff bf81 	b.w	8004fa8 <_malloc_r>
 80050a6:	b92a      	cbnz	r2, 80050b4 <_realloc_r+0x24>
 80050a8:	f7ff ff12 	bl	8004ed0 <_free_r>
 80050ac:	4625      	mov	r5, r4
 80050ae:	4628      	mov	r0, r5
 80050b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b4:	f000 f838 	bl	8005128 <_malloc_usable_size_r>
 80050b8:	4284      	cmp	r4, r0
 80050ba:	4607      	mov	r7, r0
 80050bc:	d802      	bhi.n	80050c4 <_realloc_r+0x34>
 80050be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050c2:	d812      	bhi.n	80050ea <_realloc_r+0x5a>
 80050c4:	4621      	mov	r1, r4
 80050c6:	4640      	mov	r0, r8
 80050c8:	f7ff ff6e 	bl	8004fa8 <_malloc_r>
 80050cc:	4605      	mov	r5, r0
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d0ed      	beq.n	80050ae <_realloc_r+0x1e>
 80050d2:	42bc      	cmp	r4, r7
 80050d4:	4622      	mov	r2, r4
 80050d6:	4631      	mov	r1, r6
 80050d8:	bf28      	it	cs
 80050da:	463a      	movcs	r2, r7
 80050dc:	f7ff fbb8 	bl	8004850 <memcpy>
 80050e0:	4631      	mov	r1, r6
 80050e2:	4640      	mov	r0, r8
 80050e4:	f7ff fef4 	bl	8004ed0 <_free_r>
 80050e8:	e7e1      	b.n	80050ae <_realloc_r+0x1e>
 80050ea:	4635      	mov	r5, r6
 80050ec:	e7df      	b.n	80050ae <_realloc_r+0x1e>
	...

080050f0 <_sbrk_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4d06      	ldr	r5, [pc, #24]	; (800510c <_sbrk_r+0x1c>)
 80050f4:	2300      	movs	r3, #0
 80050f6:	4604      	mov	r4, r0
 80050f8:	4608      	mov	r0, r1
 80050fa:	602b      	str	r3, [r5, #0]
 80050fc:	f7fb fe7e 	bl	8000dfc <_sbrk>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_sbrk_r+0x1a>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	b103      	cbz	r3, 800510a <_sbrk_r+0x1a>
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	200040a4 	.word	0x200040a4

08005110 <__malloc_lock>:
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <__malloc_lock+0x8>)
 8005112:	f000 b811 	b.w	8005138 <__retarget_lock_acquire_recursive>
 8005116:	bf00      	nop
 8005118:	200040a8 	.word	0x200040a8

0800511c <__malloc_unlock>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__malloc_unlock+0x8>)
 800511e:	f000 b80c 	b.w	800513a <__retarget_lock_release_recursive>
 8005122:	bf00      	nop
 8005124:	200040a8 	.word	0x200040a8

08005128 <_malloc_usable_size_r>:
 8005128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800512c:	1f18      	subs	r0, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	bfbc      	itt	lt
 8005132:	580b      	ldrlt	r3, [r1, r0]
 8005134:	18c0      	addlt	r0, r0, r3
 8005136:	4770      	bx	lr

08005138 <__retarget_lock_acquire_recursive>:
 8005138:	4770      	bx	lr

0800513a <__retarget_lock_release_recursive>:
 800513a:	4770      	bx	lr

0800513c <_init>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr

08005148 <_fini>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr
