
Ej04_asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005354  08005354  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800535c  0800535c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004038  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040ac  200040ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000e2e1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000fa1b  00000000  00000000  0002e385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002615  00000000  00000000  0003dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c88  00000000  00000000  000403b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e453b  00000000  00000000  00041040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b80  00000000  00000000  00125580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002591c  00000000  00000000  00126100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ba1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035bc  00000000  00000000  0014ba6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800515c 	.word	0x0800515c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800515c 	.word	0x0800515c

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_productoEscalar12>:
@   r1: puntero a vectorOut
@   r2: longitud
@	r3: escalar
.thumb_func
    asm_productoEscalar12:
		push {r4,r5}
 80001f8:	b430      	push	{r4, r5}

080001fa <.esc12_for>:
		.esc12_for:
			ldrh r4, [r0], #2
 80001fa:	f830 4b02 	ldrh.w	r4, [r0], #2
			mul r5, r4, r3
 80001fe:	fb04 f503 	mul.w	r5, r4, r3
			usat r5, 12, r5
 8000202:	f385 050c 	usat	r5, #12, r5
			strh r5, [r1], #2
 8000206:	f821 5b02 	strh.w	r5, [r1], #2
			subs r2, 1
 800020a:	3a01      	subs	r2, #1
    		bne .esc12_for
 800020c:	d1f5      	bne.n	80001fa <.esc12_for>
    	pop {r4,r5}
 800020e:	bc30      	pop	{r4, r5}
    	bx lr
 8000210:	4770      	bx	lr

08000212 <strlen>:
 8000212:	4603      	mov	r3, r0
 8000214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000218:	2a00      	cmp	r2, #0
 800021a:	d1fb      	bne.n	8000214 <strlen+0x2>
 800021c:	1a18      	subs	r0, r3, r0
 800021e:	3801      	subs	r0, #1
 8000220:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <vApplicationGetIdleTaskMemory+0x30>)
 80005ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000090 	.word	0x20000090
 8000604:	200000e4 	.word	0x200000e4

08000608 <vPrintString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vPrintString( const char *pcString )
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000610:	f003 fe38 	bl	8004284 <vPortEnterCritical>

		HAL_UART_Transmit(&huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff fdfc 	bl	8000212 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	230a      	movs	r3, #10
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <vPrintString+0x2c>)
 8000624:	f001 fc89 	bl	8001f3a <HAL_UART_Transmit>

	taskEXIT_CRITICAL();
 8000628:	f003 fe5c 	bl	80042e4 <vPortExitCritical>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200002f8 	.word	0x200002f8

08000638 <get_diff>:


TickType_t get_diff( void )
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
    TickType_t tiempo;

    tiempo = keys_data.time_diff;
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <get_diff+0x1c>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	607b      	str	r3, [r7, #4]

    return tiempo;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200002e4 	.word	0x200002e4

08000658 <clear_diff>:


void clear_diff( void )
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
    keys_data.time_diff = KEYS_INVALID_TIME;
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <clear_diff+0x18>)
 800065e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000662:	60da      	str	r2, [r3, #12]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200002e4 	.word	0x200002e4

08000674 <task_tecla_led>:



// Implementacion de funcion de la tarea
void task_tecla_led( void* taskParmPtr )
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b09e      	sub	sp, #120	; 0x78
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    // ---------- CONFIGURACIONES ------------------------------
	char buffer [50];
	uint16_t vectorIn[10]={1,2,3,4}, vectorOut[10]={1,1,1,1};
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	2301      	movs	r3, #1
 800068e:	843b      	strh	r3, [r7, #32]
 8000690:	2302      	movs	r3, #2
 8000692:	847b      	strh	r3, [r7, #34]	; 0x22
 8000694:	2303      	movs	r3, #3
 8000696:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000698:	2304      	movs	r3, #4
 800069a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	2301      	movs	r3, #1
 80006ae:	81bb      	strh	r3, [r7, #12]
 80006b0:	2301      	movs	r3, #1
 80006b2:	81fb      	strh	r3, [r7, #14]
 80006b4:	2301      	movs	r3, #1
 80006b6:	823b      	strh	r3, [r7, #16]
 80006b8:	2301      	movs	r3, #1
 80006ba:	827b      	strh	r3, [r7, #18]
	uint32_t longitud=4;
 80006bc:	2304      	movs	r3, #4
 80006be:	66bb      	str	r3, [r7, #104]	; 0x68
	uint16_t escalar=1400;
 80006c0:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80006c4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	int index=0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	677b      	str	r3, [r7, #116]	; 0x74



		  //muestra el vector con los valores originales
		    while(index<longitud)
 80006cc:	e022      	b.n	8000714 <task_tecla_led+0xa0>
		{
		  if(index==0) vPrintString( "VALORES DEL VECTOR_IN \r\n" );
 80006ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <task_tecla_led+0x66>
 80006d4:	489b      	ldr	r0, [pc, #620]	; (8000944 <task_tecla_led+0x2d0>)
 80006d6:	f7ff ff97 	bl	8000608 <vPrintString>

		  sprintf( buffer, "Vector_In [%d] = %u \r\n", index,vectorIn[index]);
 80006da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	3378      	adds	r3, #120	; 0x78
 80006e0:	443b      	add	r3, r7
 80006e2:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 80006e6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80006ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006ec:	4996      	ldr	r1, [pc, #600]	; (8000948 <task_tecla_led+0x2d4>)
 80006ee:	f004 f8d5 	bl	800489c <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 80006f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd8b 	bl	8000212 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000708:	4890      	ldr	r0, [pc, #576]	; (800094c <task_tecla_led+0x2d8>)
 800070a:	f001 fc16 	bl	8001f3a <HAL_UART_Transmit>
		  index++;
 800070e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000710:	3301      	adds	r3, #1
 8000712:	677b      	str	r3, [r7, #116]	; 0x74
		    while(index<longitud)
 8000714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000716:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000718:	429a      	cmp	r2, r3
 800071a:	d8d8      	bhi.n	80006ce <task_tecla_led+0x5a>

		}


		  sprintf( buffer,"Escalar= %u \r\n",escalar);
 800071c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000720:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000724:	498a      	ldr	r1, [pc, #552]	; (8000950 <task_tecla_led+0x2dc>)
 8000726:	4618      	mov	r0, r3
 8000728:	f004 f8b8 	bl	800489c <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 800072c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd6e 	bl	8000212 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	4882      	ldr	r0, [pc, #520]	; (800094c <task_tecla_led+0x2d8>)
 8000744:	f001 fbf9 	bl	8001f3a <HAL_UART_Transmit>

		 vPrintString( "Presionar boton para realizar producto \r\n" );
 8000748:	4882      	ldr	r0, [pc, #520]	; (8000954 <task_tecla_led+0x2e0>)
 800074a:	f7ff ff5d 	bl	8000608 <vPrintString>
        // zeros (vector,longitud);

	tecla_led_state_t tecla_led_state = TECLA;
 800074e:	2300      	movs	r3, #0
 8000750:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	TickType_t dif;

	keys_data.state          = STATE_BUTTON_UP;  		// Set initial state
 8000754:	4b80      	ldr	r3, [pc, #512]	; (8000958 <task_tecla_led+0x2e4>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
    keys_data.time_down      = KEYS_INVALID_TIME;
 800075a:	4b7f      	ldr	r3, [pc, #508]	; (8000958 <task_tecla_led+0x2e4>)
 800075c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000760:	605a      	str	r2, [r3, #4]
    keys_data.time_up        = KEYS_INVALID_TIME;
 8000762:	4b7d      	ldr	r3, [pc, #500]	; (8000958 <task_tecla_led+0x2e4>)
 8000764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000768:	609a      	str	r2, [r3, #8]
    keys_data.time_diff      = KEYS_INVALID_TIME;
 800076a:	4b7b      	ldr	r3, [pc, #492]	; (8000958 <task_tecla_led+0x2e4>)
 800076c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000770:	60da      	str	r2, [r3, #12]
    //vPrintString( "      Task: task_tecla_led\r\n" );

	// ---------- REPETIR POR SIEMPRE --------------------------
    while( 1 )
    {
    	if( tecla_led_state == TECLA)
 8000772:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000776:	2b00      	cmp	r3, #0
 8000778:	d171      	bne.n	800085e <task_tecla_led+0x1ea>
    	{
    		switch( keys_data.state )
 800077a:	4b77      	ldr	r3, [pc, #476]	; (8000958 <task_tecla_led+0x2e4>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d861      	bhi.n	8000846 <task_tecla_led+0x1d2>
 8000782:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <task_tecla_led+0x114>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	08000799 	.word	0x08000799
 800078c:	080007db 	.word	0x080007db
 8000790:	080007b1 	.word	0x080007b1
 8000794:	080007f3 	.word	0x080007f3
    		{
            	case STATE_BUTTON_UP:
            		/* CHECK TRANSITION CONDITIONS */
            		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	486f      	ldr	r0, [pc, #444]	; (800095c <task_tecla_led+0x2e8>)
 800079e:	f000 feb5 	bl	800150c <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d052      	beq.n	800084e <task_tecla_led+0x1da>
            		{
            			keys_data.state = STATE_BUTTON_FALLING;
 80007a8:	4b6b      	ldr	r3, [pc, #428]	; (8000958 <task_tecla_led+0x2e4>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_FALLING\r\n" );
            		}
            		break;
 80007ae:	e04e      	b.n	800084e <task_tecla_led+0x1da>

            	case STATE_BUTTON_FALLING:
            		/* ENTRY */

            		/* CHECK TRANSITION CONDITIONS */
            		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	4869      	ldr	r0, [pc, #420]	; (800095c <task_tecla_led+0x2e8>)
 80007b6:	f000 fea9 	bl	800150c <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d008      	beq.n	80007d2 <task_tecla_led+0x15e>
            		{
            			keys_data.state = STATE_BUTTON_DOWN;
 80007c0:	4b65      	ldr	r3, [pc, #404]	; (8000958 <task_tecla_led+0x2e4>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );

            			/* ACCION DEL EVENTO !*/
            			keys_data.time_down = xTaskGetTickCount();
 80007c6:	f002 ff09 	bl	80035dc <xTaskGetTickCount>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a62      	ldr	r2, [pc, #392]	; (8000958 <task_tecla_led+0x2e4>)
 80007ce:	6053      	str	r3, [r2, #4]
            			keys_data.state = STATE_BUTTON_UP;
                    	//vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
            		}

            		/* LEAVE */
            		break;
 80007d0:	e042      	b.n	8000858 <task_tecla_led+0x1e4>
            			keys_data.state = STATE_BUTTON_UP;
 80007d2:	4b61      	ldr	r3, [pc, #388]	; (8000958 <task_tecla_led+0x2e4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
            		break;
 80007d8:	e03e      	b.n	8000858 <task_tecla_led+0x1e4>

            	case STATE_BUTTON_DOWN:
            		/* CHECK TRANSITION CONDITIONS */
            		if (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 80007da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007de:	485f      	ldr	r0, [pc, #380]	; (800095c <task_tecla_led+0x2e8>)
 80007e0:	f000 fe94 	bl	800150c <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d133      	bne.n	8000852 <task_tecla_led+0x1de>
            		{
            			keys_data.state = STATE_BUTTON_RISING;
 80007ea:	4b5b      	ldr	r3, [pc, #364]	; (8000958 <task_tecla_led+0x2e4>)
 80007ec:	2203      	movs	r2, #3
 80007ee:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_RISING\r\n" );
            		}
            		break;
 80007f0:	e02f      	b.n	8000852 <task_tecla_led+0x1de>
            	case STATE_BUTTON_RISING:
            		/* ENTRY */

            		/* CHECK TRANSITION CONDITIONS */

            		if (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4859      	ldr	r0, [pc, #356]	; (800095c <task_tecla_led+0x2e8>)
 80007f8:	f000 fe88 	bl	800150c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d11d      	bne.n	800083e <task_tecla_led+0x1ca>
            		{
            			tecla_led_state = LED;
 8000802:	2301      	movs	r3, #1
 8000804:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            			keys_data.state = STATE_BUTTON_UP;
 8000808:	4b53      	ldr	r3, [pc, #332]	; (8000958 <task_tecla_led+0x2e4>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
            			//vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );

            			/* ACCION DEL EVENTO ! */
            			keys_data.time_up    = xTaskGetTickCount();
 800080e:	f002 fee5 	bl	80035dc <xTaskGetTickCount>
 8000812:	4603      	mov	r3, r0
 8000814:	4a50      	ldr	r2, [pc, #320]	; (8000958 <task_tecla_led+0x2e4>)
 8000816:	6093      	str	r3, [r2, #8]
            			keys_data.time_diff  = keys_data.time_up - keys_data.time_down;
 8000818:	4b4f      	ldr	r3, [pc, #316]	; (8000958 <task_tecla_led+0x2e4>)
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	4b4e      	ldr	r3, [pc, #312]	; (8000958 <task_tecla_led+0x2e4>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	4a4d      	ldr	r2, [pc, #308]	; (8000958 <task_tecla_led+0x2e4>)
 8000824:	60d3      	str	r3, [r2, #12]
            			 if ( keys_data.time_diff  > 0 ) xSemaphoreGive( sem_btn );
 8000826:	4b4c      	ldr	r3, [pc, #304]	; (8000958 <task_tecla_led+0x2e4>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d013      	beq.n	8000856 <task_tecla_led+0x1e2>
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <task_tecla_led+0x2ec>)
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	f002 f8ea 	bl	8002a10 <xQueueGenericSend>
            			keys_data.state = STATE_BUTTON_DOWN;
            			//vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );
            		}

            		/* LEAVE */
            		break;
 800083c:	e00b      	b.n	8000856 <task_tecla_led+0x1e2>
            			keys_data.state = STATE_BUTTON_DOWN;
 800083e:	4b46      	ldr	r3, [pc, #280]	; (8000958 <task_tecla_led+0x2e4>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
            		break;
 8000844:	e007      	b.n	8000856 <task_tecla_led+0x1e2>

            	default:
            		keys_data.state = STATE_BUTTON_UP;
 8000846:	4b44      	ldr	r3, [pc, #272]	; (8000958 <task_tecla_led+0x2e4>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
            		//vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );

            		break;
 800084c:	e004      	b.n	8000858 <task_tecla_led+0x1e4>
            		break;
 800084e:	bf00      	nop
 8000850:	e002      	b.n	8000858 <task_tecla_led+0x1e4>
            		break;
 8000852:	bf00      	nop
 8000854:	e000      	b.n	8000858 <task_tecla_led+0x1e4>
            		break;
 8000856:	bf00      	nop
    		}
    		// Envia la tarea al estado bloqueado durante DEBOUNCE_TIME_MS
    		vTaskDelay( DEBOUNCE_TIME_MS / portTICK_RATE_MS );
 8000858:	2028      	movs	r0, #40	; 0x28
 800085a:	f002 fd81 	bl	8003360 <vTaskDelay>
    	}

    	if( tecla_led_state == LED)
 800085e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000862:	2b01      	cmp	r3, #1
 8000864:	d185      	bne.n	8000772 <task_tecla_led+0xfe>
    	{

    		 //vPrintString( "Presionar boton para inicializar el vector a cero\r\n" );
    		        xSemaphoreTake( sem_btn, portMAX_DELAY );			// Esperamos tecla
 8000866:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <task_tecla_led+0x2ec>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f9cc 	bl	8002c0c <xQueueSemaphoreTake>
    		        asm_productoEscalar12 (vectorIn,vectorOut,longitud,escalar);
 8000874:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000878:	f107 010c 	add.w	r1, r7, #12
 800087c:	f107 0020 	add.w	r0, r7, #32
 8000880:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000882:	f7ff fcb9 	bl	80001f8 <asm_productoEscalar12>
    		        vPrintString( "INGRESO A LA FUNCION ASM_PRODUCTO_ESCALAR \r\n" );
 8000886:	4837      	ldr	r0, [pc, #220]	; (8000964 <task_tecla_led+0x2f0>)
 8000888:	f7ff febe 	bl	8000608 <vPrintString>
    		        vPrintString( "LOS VALORES DEL VECTOR_OUT SON: \r\n" );
 800088c:	4836      	ldr	r0, [pc, #216]	; (8000968 <task_tecla_led+0x2f4>)
 800088e:	f7ff febb 	bl	8000608 <vPrintString>
    		        index=0;
 8000892:	2300      	movs	r3, #0
 8000894:	677b      	str	r3, [r7, #116]	; 0x74

    		        //muestra el vector
    		        while(index<longitud)
 8000896:	e01c      	b.n	80008d2 <task_tecla_led+0x25e>
    		        {
    		        //sprintf( buffer, "Elemento nuevo %d = %lu del vector de entrada \r\n", index,vector[index]);
    		         sprintf( buffer, "VectorOut [%d] = %u \r\n", index,vectorOut[index]);
 8000898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	3378      	adds	r3, #120	; 0x78
 800089e:	443b      	add	r3, r7
 80008a0:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 80008a4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80008a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80008aa:	4930      	ldr	r1, [pc, #192]	; (800096c <task_tecla_led+0x2f8>)
 80008ac:	f003 fff6 	bl	800489c <siprintf>
    		        HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 80008b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fcac 	bl	8000212 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	4821      	ldr	r0, [pc, #132]	; (800094c <task_tecla_led+0x2d8>)
 80008c8:	f001 fb37 	bl	8001f3a <HAL_UART_Transmit>
    		        index++;
 80008cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008ce:	3301      	adds	r3, #1
 80008d0:	677b      	str	r3, [r7, #116]	; 0x74
    		        while(index<longitud)
 80008d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d8de      	bhi.n	8000898 <task_tecla_led+0x224>
    		        }


            dif = get_diff();
 80008da:	f7ff fead 	bl	8000638 <get_diff>
 80008de:	66f8      	str	r0, [r7, #108]	; 0x6c

            if( dif != KEYS_INVALID_TIME )
 80008e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008e6:	d028      	beq.n	800093a <task_tecla_led+0x2c6>
            {
                if( dif > LED_RATE_MS )
 80008e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008ee:	d902      	bls.n	80008f6 <task_tecla_led+0x282>
                {
                    dif = LED_RATE_MS;
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
    			tecla_led_state = TECLA;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

        		sprintf( buffer, "            led_state: Encendido - dif %u\r\n", (unsigned int)dif );
 80008fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000902:	491b      	ldr	r1, [pc, #108]	; (8000970 <task_tecla_led+0x2fc>)
 8000904:	4618      	mov	r0, r3
 8000906:	f003 ffc9 	bl	800489c <siprintf>
        		vPrintString( buffer );
 800090a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe7a 	bl	8000608 <vPrintString>
            	HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET );
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4816      	ldr	r0, [pc, #88]	; (8000974 <task_tecla_led+0x300>)
 800091a:	f000 fe0f 	bl	800153c <HAL_GPIO_WritePin>

                // Envia la tarea al estado bloqueado durante dif
                vTaskDelay( dif / portTICK_RATE_MS );
 800091e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000920:	f002 fd1e 	bl	8003360 <vTaskDelay>

            	vPrintString( "            led_state: Apagado\r\n" );
 8000924:	4814      	ldr	r0, [pc, #80]	; (8000978 <task_tecla_led+0x304>)
 8000926:	f7ff fe6f 	bl	8000608 <vPrintString>
            	HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET );
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	4811      	ldr	r0, [pc, #68]	; (8000974 <task_tecla_led+0x300>)
 8000930:	f000 fe04 	bl	800153c <HAL_GPIO_WritePin>

                clear_diff();
 8000934:	f7ff fe90 	bl	8000658 <clear_diff>
 8000938:	e71b      	b.n	8000772 <task_tecla_led+0xfe>
            }
            else
            {
                // Envia la tarea al estado bloqueado durante LED_RATE_MS
                vTaskDelay( LED_RATE_MS / portTICK_RATE_MS );
 800093a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093e:	f002 fd0f 	bl	8003360 <vTaskDelay>
    	if( tecla_led_state == TECLA)
 8000942:	e716      	b.n	8000772 <task_tecla_led+0xfe>
 8000944:	08005180 	.word	0x08005180
 8000948:	0800519c 	.word	0x0800519c
 800094c:	200002f8 	.word	0x200002f8
 8000950:	080051b4 	.word	0x080051b4
 8000954:	080051c4 	.word	0x080051c4
 8000958:	200002e4 	.word	0x200002e4
 800095c:	40020800 	.word	0x40020800
 8000960:	200002f4 	.word	0x200002f4
 8000964:	080051f0 	.word	0x080051f0
 8000968:	08005220 	.word	0x08005220
 800096c:	08005244 	.word	0x08005244
 8000970:	0800525c 	.word	0x0800525c
 8000974:	40020400 	.word	0x40020400
 8000978:	08005288 	.word	0x08005288

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main( void )
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b08e      	sub	sp, #56	; 0x38
 8000980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 fabf 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f863 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 f8f5 	bl	8000b78 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800098e:	f000 f8c9 	bl	8000b24 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
	vPrintString( "Main: Ejercicio 04 -Language C - AdM.\r\n" );
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <main+0xbc>)
 8000994:	f7ff fe38 	bl	8000608 <vPrintString>

  /* USER CODE END 2 */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <main+0xc0>)
 800099a:	1d3c      	adds	r4, r7, #4
 800099c:	461d      	mov	r5, r3
 800099e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fe57 	bl	8002662 <osThreadCreate>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <main+0xc4>)
 80009b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

    // Crear tareas en freeRTOS
    BaseType_t res =
    	xTaskCreate (
 80009ba:	2300      	movs	r3, #0
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	2301      	movs	r3, #1
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2300      	movs	r3, #0
 80009c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c8:	491e      	ldr	r1, [pc, #120]	; (8000a44 <main+0xc8>)
 80009ca:	481f      	ldr	r0, [pc, #124]	; (8000a48 <main+0xcc>)
 80009cc:	f002 fb89 	bl	80030e2 <xTaskCreate>
 80009d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    //{
    //	gpioWrite( LEDR, ON );
    //	vPrintString( "Error al crear las tareas.\r\n" );
    //	while(TRUE);						// VER ESTE LINK: https://pbs.twimg.com/media/BafQje7CcAAN5en.jpg
    //}
    configASSERT( res == pdPASS);	// gestion de errores
 80009d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d00a      	beq.n	80009ee <main+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009dc:	f383 8811 	msr	BASEPRI, r3
 80009e0:	f3bf 8f6f 	isb	sy
 80009e4:	f3bf 8f4f 	dsb	sy
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80009ea:	bf00      	nop
 80009ec:	e7fe      	b.n	80009ec <main+0x70>

  /* USER CODE END RTOS_THREADS */
    // Crear semaforo
    	sem_btn = xSemaphoreCreateBinary();
 80009ee:	2203      	movs	r2, #3
 80009f0:	2100      	movs	r1, #0
 80009f2:	2001      	movs	r0, #1
 80009f4:	f001 ffb2 	bl	800295c <xQueueGenericCreate>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <main+0xd0>)
 80009fc:	6013      	str	r3, [r2, #0]

    	// Gestion de errores de semaforos
    	configASSERT( sem_btn !=  NULL  );
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <main+0xd0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10a      	bne.n	8000a1c <main+0xa0>
	__asm volatile
 8000a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0a:	f383 8811 	msr	BASEPRI, r3
 8000a0e:	f3bf 8f6f 	isb	sy
 8000a12:	f3bf 8f4f 	dsb	sy
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000a18:	bf00      	nop
 8000a1a:	e7fe      	b.n	8000a1a <main+0x9e>

  /* Start scheduler */
  osKernelStart();
 8000a1c:	f001 fe1a 	bl	8002654 <osKernelStart>
	__asm volatile
 8000a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a24:	f383 8811 	msr	BASEPRI, r3
 8000a28:	f3bf 8f6f 	isb	sy
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	623b      	str	r3, [r7, #32]
}
 8000a32:	bf00      	nop
  // ---------- REPETIR POR SIEMPRE --------------------------
  //while( TRUE )
  //{
  // Si cae en este while 1 significa que no pudo iniciar el scheduler
  //}
  configASSERT( 0 );
 8000a34:	e7fe      	b.n	8000a34 <main+0xb8>
 8000a36:	bf00      	nop
 8000a38:	080052ac 	.word	0x080052ac
 8000a3c:	080052e4 	.word	0x080052e4
 8000a40:	2000033c 	.word	0x2000033c
 8000a44:	080052d4 	.word	0x080052d4
 8000a48:	08000675 	.word	0x08000675
 8000a4c:	200002f4 	.word	0x200002f4

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	; 0x50
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 ff14 	bl	800488c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac4:	23a8      	movs	r3, #168	; 0xa8
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000acc:	2307      	movs	r3, #7
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fd4b 	bl	8001570 <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae0:	f000 f900 	bl	8000ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2105      	movs	r1, #5
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 ffac 	bl	8001a60 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b0e:	f000 f8e9 	bl	8000ce4 <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3750      	adds	r7, #80	; 0x50
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <MX_USART3_UART_Init+0x50>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b5c:	f001 f9a0 	bl	8001ea0 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b66:	f000 f8bd 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200002f8 	.word	0x200002f8
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	4b4c      	ldr	r3, [pc, #304]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a4b      	ldr	r2, [pc, #300]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a44      	ldr	r2, [pc, #272]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a36      	ldr	r2, [pc, #216]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a2f      	ldr	r2, [pc, #188]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <MX_GPIO_Init+0x14c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c3c:	4822      	ldr	r0, [pc, #136]	; (8000cc8 <MX_GPIO_Init+0x150>)
 8000c3e:	f000 fc7d 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2140      	movs	r1, #64	; 0x40
 8000c46:	4821      	ldr	r0, [pc, #132]	; (8000ccc <MX_GPIO_Init+0x154>)
 8000c48:	f000 fc78 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	481b      	ldr	r0, [pc, #108]	; (8000cd0 <MX_GPIO_Init+0x158>)
 8000c64:	f000 faa6 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c68:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <MX_GPIO_Init+0x150>)
 8000c82:	f000 fa97 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c86:	2340      	movs	r3, #64	; 0x40
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_GPIO_Init+0x154>)
 8000c9e:	f000 fa89 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_GPIO_Init+0x154>)
 8000cb6:	f000 fa7d 	bl	80011b4 <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40021800 	.word	0x40021800
 8000cd0:	40020800 	.word	0x40020800

08000cd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f001 fd0c 	bl	80026fa <osDelay>
 8000ce2:	e7fb      	b.n	8000cdc <StartDefaultTask+0x8>

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	e7fe      	b.n	8000cec <Error_Handler+0x8>
	...

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_MspInit+0x54>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <HAL_MspInit+0x54>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x54>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_MspInit+0x54>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_MspInit+0x54>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_MspInit+0x54>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	210f      	movs	r1, #15
 8000d32:	f06f 0001 	mvn.w	r0, #1
 8000d36:	f000 fa14 	bl	8001162 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_UART_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12c      	bne.n	8000dc4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db4:	2307      	movs	r3, #7
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_UART_MspInit+0x8c>)
 8000dc0:	f000 f9f8 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f8ce 	bl	8000fa8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e0c:	f002 feea 	bl	8003be4 <xTaskGetSchedulerState>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d001      	beq.n	8000e1a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e16:	f003 fac7 	bl	80043a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f003 fce4 	bl	800481c <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20030000 	.word	0x20030000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	20000340 	.word	0x20000340
 8000e88:	200040b0 	.word	0x200040b0

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ecc:	4c0b      	ldr	r4, [pc, #44]	; (8000efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eda:	f7ff ffd7 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f003 fca3 	bl	8004828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fd4b 	bl	800097c <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ee8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ef4:	08005364 	.word	0x08005364
  ldr r2, =_sbss
 8000ef8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000efc:	200040ac 	.word	0x200040ac

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f90d 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	200f      	movs	r0, #15
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff feda 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f917 	bl	800119a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f84:	f000 f8ed 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000344 	.word	0x20000344

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000344 	.word	0x20000344

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff47 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff5c 	bl	8001030 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffb0 	bl	8001108 <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e177      	b.n	80014c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8166 	bne.w	80014ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	2b02      	cmp	r3, #2
 8001204:	d130      	bne.n	8001268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 0201 	and.w	r2, r3, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d017      	beq.n	80012a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80c0 	beq.w	80014ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b66      	ldr	r3, [pc, #408]	; (80014d8 <HAL_GPIO_Init+0x324>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a65      	ldr	r2, [pc, #404]	; (80014d8 <HAL_GPIO_Init+0x324>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b63      	ldr	r3, [pc, #396]	; (80014d8 <HAL_GPIO_Init+0x324>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001356:	4a61      	ldr	r2, [pc, #388]	; (80014dc <HAL_GPIO_Init+0x328>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a58      	ldr	r2, [pc, #352]	; (80014e0 <HAL_GPIO_Init+0x32c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d037      	beq.n	80013f2 <HAL_GPIO_Init+0x23e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a57      	ldr	r2, [pc, #348]	; (80014e4 <HAL_GPIO_Init+0x330>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d031      	beq.n	80013ee <HAL_GPIO_Init+0x23a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a56      	ldr	r2, [pc, #344]	; (80014e8 <HAL_GPIO_Init+0x334>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d02b      	beq.n	80013ea <HAL_GPIO_Init+0x236>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a55      	ldr	r2, [pc, #340]	; (80014ec <HAL_GPIO_Init+0x338>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d025      	beq.n	80013e6 <HAL_GPIO_Init+0x232>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a54      	ldr	r2, [pc, #336]	; (80014f0 <HAL_GPIO_Init+0x33c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d01f      	beq.n	80013e2 <HAL_GPIO_Init+0x22e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a53      	ldr	r2, [pc, #332]	; (80014f4 <HAL_GPIO_Init+0x340>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d019      	beq.n	80013de <HAL_GPIO_Init+0x22a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a52      	ldr	r2, [pc, #328]	; (80014f8 <HAL_GPIO_Init+0x344>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x226>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a51      	ldr	r2, [pc, #324]	; (80014fc <HAL_GPIO_Init+0x348>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x222>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a50      	ldr	r2, [pc, #320]	; (8001500 <HAL_GPIO_Init+0x34c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x21e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <HAL_GPIO_Init+0x350>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x21a>
 80013ca:	2309      	movs	r3, #9
 80013cc:	e012      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013ce:	230a      	movs	r3, #10
 80013d0:	e010      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013d2:	2308      	movs	r3, #8
 80013d4:	e00e      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00c      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013da:	2306      	movs	r3, #6
 80013dc:	e00a      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013de:	2305      	movs	r3, #5
 80013e0:	e008      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x240>
 80013f2:	2300      	movs	r3, #0
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	f002 0203 	and.w	r2, r2, #3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001404:	4935      	ldr	r1, [pc, #212]	; (80014dc <HAL_GPIO_Init+0x328>)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001412:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <HAL_GPIO_Init+0x354>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001436:	4a34      	ldr	r2, [pc, #208]	; (8001508 <HAL_GPIO_Init+0x354>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <HAL_GPIO_Init+0x354>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001460:	4a29      	ldr	r2, [pc, #164]	; (8001508 <HAL_GPIO_Init+0x354>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_GPIO_Init+0x354>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800148a:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <HAL_GPIO_Init+0x354>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_GPIO_Init+0x354>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <HAL_GPIO_Init+0x354>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3301      	adds	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	2b0f      	cmp	r3, #15
 80014c4:	f67f ae84 	bls.w	80011d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40013800 	.word	0x40013800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40021400 	.word	0x40021400
 80014f8:	40021800 	.word	0x40021800
 80014fc:	40021c00 	.word	0x40021c00
 8001500:	40022000 	.word	0x40022000
 8001504:	40022400 	.word	0x40022400
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e001      	b.n	800152e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e267      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d075      	beq.n	800167a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158e:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b04      	cmp	r3, #4
 8001598:	d00c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159a:	4b85      	ldr	r3, [pc, #532]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d112      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a6:	4b82      	ldr	r3, [pc, #520]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d05b      	beq.n	8001678 <HAL_RCC_OscConfig+0x108>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d157      	bne.n	8001678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e242      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x74>
 80015d6:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x98>
 80015ee:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6f      	ldr	r2, [pc, #444]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b6d      	ldr	r3, [pc, #436]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6c      	ldr	r2, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 8001608:	4b69      	ldr	r3, [pc, #420]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a68      	ldr	r2, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a65      	ldr	r2, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fcd2 	bl	8000fd0 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fcce 	bl	8000fd0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e207      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b5b      	ldr	r3, [pc, #364]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0xc0>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fcbe 	bl	8000fd0 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fcba 	bl	8000fd0 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1f3      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0xe8>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d063      	beq.n	800174e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	2b08      	cmp	r3, #8
 800169c:	d11c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d116      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e1c7      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	e03a      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x244>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff fc73 	bl	8000fd0 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff fc6f 	bl	8000fd0 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e1a8      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4925      	ldr	r1, [pc, #148]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0x244>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fc52 	bl	8000fd0 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff fc4e 	bl	8000fd0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e187      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d036      	beq.n	80017c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d016      	beq.n	8001790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_RCC_OscConfig+0x248>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fc32 	bl	8000fd0 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fc2e 	bl	8000fd0 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e167      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x200>
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_OscConfig+0x248>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fc1b 	bl	8000fd0 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	e00e      	b.n	80017bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fc17 	bl	8000fd0 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d907      	bls.n	80017bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e150      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
 80017b0:	40023800 	.word	0x40023800
 80017b4:	42470000 	.word	0x42470000
 80017b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ea      	bne.n	800179e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8097 	beq.w	8001904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017da:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10f      	bne.n	8001806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a7c      	ldr	r2, [pc, #496]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b77      	ldr	r3, [pc, #476]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001812:	4b74      	ldr	r3, [pc, #464]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a73      	ldr	r2, [pc, #460]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff fbd7 	bl	8000fd0 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001826:	f7ff fbd3 	bl	8000fd0 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e10c      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x2ea>
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x324>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x30c>
 8001862:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a5e      	ldr	r2, [pc, #376]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a5b      	ldr	r2, [pc, #364]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0x324>
 800187c:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a57      	ldr	r2, [pc, #348]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a54      	ldr	r2, [pc, #336]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 0304 	bic.w	r3, r3, #4
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d015      	beq.n	80018c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fb98 	bl	8000fd0 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff fb94 	bl	8000fd0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0cb      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ee      	beq.n	80018a4 <HAL_RCC_OscConfig+0x334>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff fb82 	bl	8000fd0 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fb7e 	bl	8000fd0 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0b5      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ee      	bne.n	80018d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f8:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a1 	beq.w	8001a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b08      	cmp	r3, #8
 8001918:	d05c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d141      	bne.n	80019a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001922:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <HAL_RCC_OscConfig+0x478>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fb52 	bl	8000fd0 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff fb4e 	bl	8000fd0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e087      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	491b      	ldr	r1, [pc, #108]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x478>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff fb27 	bl	8000fd0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff fb23 	bl	8000fd0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e05c      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x416>
 80019a4:	e054      	b.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x478>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb10 	bl	8000fd0 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fb0c 	bl	8000fd0 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e045      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x444>
 80019d2:	e03d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e038      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000
 80019e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x4ec>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d121      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d11a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d111      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0cc      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d90c      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001acc:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	494d      	ldr	r1, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d044      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e067      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 0203 	bic.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4934      	ldr	r1, [pc, #208]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b50:	f7ff fa3e 	bl	8000fd0 <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7ff fa3a 	bl	8000fd0 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e04f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 020c 	and.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d20c      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e032      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4916      	ldr	r1, [pc, #88]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	490e      	ldr	r1, [pc, #56]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be6:	f000 f821 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490a      	ldr	r1, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f99e 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08005308 	.word	0x08005308
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c30:	b094      	sub	sp, #80	; 0x50
 8001c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	647b      	str	r3, [r7, #68]	; 0x44
 8001c38:	2300      	movs	r3, #0
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c44:	4b79      	ldr	r3, [pc, #484]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d00d      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x40>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	f200 80e1 	bhi.w	8001e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x34>
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5e:	e0db      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c64:	e0db      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c66:	4b73      	ldr	r3, [pc, #460]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c6a:	e0d8      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6c:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d063      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	2200      	movs	r2, #0
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c9e:	4622      	mov	r2, r4
 8001ca0:	462b      	mov	r3, r5
 8001ca2:	f04f 0000 	mov.w	r0, #0
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	0159      	lsls	r1, r3, #5
 8001cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb0:	0150      	lsls	r0, r2, #5
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	1a51      	subs	r1, r2, r1
 8001cba:	6139      	str	r1, [r7, #16]
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cd0:	4659      	mov	r1, fp
 8001cd2:	018b      	lsls	r3, r1, #6
 8001cd4:	4651      	mov	r1, sl
 8001cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cda:	4651      	mov	r1, sl
 8001cdc:	018a      	lsls	r2, r1, #6
 8001cde:	4651      	mov	r1, sl
 8001ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cfe:	4690      	mov	r8, r2
 8001d00:	4699      	mov	r9, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	eb18 0303 	adds.w	r3, r8, r3
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	eb49 0303 	adc.w	r3, r9, r3
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d1e:	4629      	mov	r1, r5
 8001d20:	024b      	lsls	r3, r1, #9
 8001d22:	4621      	mov	r1, r4
 8001d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d28:	4621      	mov	r1, r4
 8001d2a:	024a      	lsls	r2, r1, #9
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d32:	2200      	movs	r2, #0
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d3c:	f7fe fac8 	bl	80002d0 <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4613      	mov	r3, r2
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d48:	e058      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4a:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	099b      	lsrs	r3, r3, #6
 8001d50:	2200      	movs	r2, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	4611      	mov	r1, r2
 8001d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d64:	4642      	mov	r2, r8
 8001d66:	464b      	mov	r3, r9
 8001d68:	f04f 0000 	mov.w	r0, #0
 8001d6c:	f04f 0100 	mov.w	r1, #0
 8001d70:	0159      	lsls	r1, r3, #5
 8001d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d76:	0150      	lsls	r0, r2, #5
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4641      	mov	r1, r8
 8001d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d82:	4649      	mov	r1, r9
 8001d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001da0:	eb63 050b 	sbc.w	r5, r3, fp
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	00eb      	lsls	r3, r5, #3
 8001dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db2:	00e2      	lsls	r2, r4, #3
 8001db4:	4614      	mov	r4, r2
 8001db6:	461d      	mov	r5, r3
 8001db8:	4643      	mov	r3, r8
 8001dba:	18e3      	adds	r3, r4, r3
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	eb45 0303 	adc.w	r3, r5, r3
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	028b      	lsls	r3, r1, #10
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ddc:	4621      	mov	r1, r4
 8001dde:	028a      	lsls	r2, r1, #10
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de6:	2200      	movs	r2, #0
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	61fa      	str	r2, [r7, #28]
 8001dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df0:	f7fe fa6e 	bl	80002d0 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	3301      	adds	r3, #1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3750      	adds	r7, #80	; 0x50
 8001e24:	46bd      	mov	sp, r7
 8001e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	007a1200 	.word	0x007a1200

08001e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0a9b      	lsrs	r3, r3, #10
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08005318 	.word	0x08005318

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffdc 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0b5b      	lsrs	r3, r3, #13
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08005318 	.word	0x08005318

08001ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e03f      	b.n	8001f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe ff3e 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	; 0x24
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f929 	bl	800213c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b08a      	sub	sp, #40	; 0x28
 8001f3e:	af02      	add	r7, sp, #8
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d17c      	bne.n	8002054 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_UART_Transmit+0x2c>
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e075      	b.n	8002056 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_UART_Transmit+0x3e>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e06e      	b.n	8002056 <HAL_UART_Transmit+0x11c>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2221      	movs	r2, #33	; 0x21
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f8e:	f7ff f81f 	bl	8000fd0 <HAL_GetTick>
 8001f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	88fa      	ldrh	r2, [r7, #6]
 8001f98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa8:	d108      	bne.n	8001fbc <HAL_UART_Transmit+0x82>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d104      	bne.n	8001fbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	e003      	b.n	8001fc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fcc:	e02a      	b.n	8002024 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f840 	bl	800205e <UART_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e036      	b.n	8002056 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10b      	bne.n	8002006 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ffc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	3302      	adds	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	e007      	b.n	8002016 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	3301      	adds	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1cf      	bne.n	8001fce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2200      	movs	r2, #0
 8002036:	2140      	movs	r1, #64	; 0x40
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f810 	bl	800205e <UART_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e006      	b.n	8002056 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b090      	sub	sp, #64	; 0x40
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800206e:	e050      	b.n	8002112 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002076:	d04c      	beq.n	8002112 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <UART_WaitOnFlagUntilTimeout+0x30>
 800207e:	f7fe ffa7 	bl	8000fd0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800208a:	429a      	cmp	r2, r3
 800208c:	d241      	bcs.n	8002112 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	330c      	adds	r3, #12
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	e853 3f00 	ldrex	r3, [r3]
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	330c      	adds	r3, #12
 80020ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ae:	637a      	str	r2, [r7, #52]	; 0x34
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b6:	e841 2300 	strex	r3, r2, [r1]
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1e5      	bne.n	800208e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3314      	adds	r3, #20
 80020c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	e853 3f00 	ldrex	r3, [r3]
 80020d0:	613b      	str	r3, [r7, #16]
   return(result);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3314      	adds	r3, #20
 80020e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020e2:	623a      	str	r2, [r7, #32]
 80020e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e6:	69f9      	ldr	r1, [r7, #28]
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	e841 2300 	strex	r3, r2, [r1]
 80020ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1e5      	bne.n	80020c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e00f      	b.n	8002132 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4013      	ands	r3, r2
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	bf0c      	ite	eq
 8002122:	2301      	moveq	r3, #1
 8002124:	2300      	movne	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	429a      	cmp	r2, r3
 800212e:	d09f      	beq.n	8002070 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3740      	adds	r7, #64	; 0x40
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800213c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002140:	b0c0      	sub	sp, #256	; 0x100
 8002142:	af00      	add	r7, sp, #0
 8002144:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002158:	68d9      	ldr	r1, [r3, #12]
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	ea40 0301 	orr.w	r3, r0, r1
 8002164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	431a      	orrs	r2, r3
 8002174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	431a      	orrs	r2, r3
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002194:	f021 010c 	bic.w	r1, r1, #12
 8002198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80021a2:	430b      	orrs	r3, r1
 80021a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b6:	6999      	ldr	r1, [r3, #24]
 80021b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	ea40 0301 	orr.w	r3, r0, r1
 80021c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b8f      	ldr	r3, [pc, #572]	; (8002408 <UART_SetConfig+0x2cc>)
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d005      	beq.n	80021dc <UART_SetConfig+0xa0>
 80021d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b8d      	ldr	r3, [pc, #564]	; (800240c <UART_SetConfig+0x2d0>)
 80021d8:	429a      	cmp	r2, r3
 80021da:	d104      	bne.n	80021e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021dc:	f7ff fe4c 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 80021e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021e4:	e003      	b.n	80021ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021e6:	f7ff fe33 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 80021ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f8:	f040 810c 	bne.w	8002414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002200:	2200      	movs	r2, #0
 8002202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002206:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800220a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800220e:	4622      	mov	r2, r4
 8002210:	462b      	mov	r3, r5
 8002212:	1891      	adds	r1, r2, r2
 8002214:	65b9      	str	r1, [r7, #88]	; 0x58
 8002216:	415b      	adcs	r3, r3
 8002218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800221a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800221e:	4621      	mov	r1, r4
 8002220:	eb12 0801 	adds.w	r8, r2, r1
 8002224:	4629      	mov	r1, r5
 8002226:	eb43 0901 	adc.w	r9, r3, r1
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800223a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800223e:	4690      	mov	r8, r2
 8002240:	4699      	mov	r9, r3
 8002242:	4623      	mov	r3, r4
 8002244:	eb18 0303 	adds.w	r3, r8, r3
 8002248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800224c:	462b      	mov	r3, r5
 800224e:	eb49 0303 	adc.w	r3, r9, r3
 8002252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002262:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800226a:	460b      	mov	r3, r1
 800226c:	18db      	adds	r3, r3, r3
 800226e:	653b      	str	r3, [r7, #80]	; 0x50
 8002270:	4613      	mov	r3, r2
 8002272:	eb42 0303 	adc.w	r3, r2, r3
 8002276:	657b      	str	r3, [r7, #84]	; 0x54
 8002278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800227c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002280:	f7fe f826 	bl	80002d0 <__aeabi_uldivmod>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4b61      	ldr	r3, [pc, #388]	; (8002410 <UART_SetConfig+0x2d4>)
 800228a:	fba3 2302 	umull	r2, r3, r3, r2
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	011c      	lsls	r4, r3, #4
 8002292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002296:	2200      	movs	r2, #0
 8002298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800229c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022a4:	4642      	mov	r2, r8
 80022a6:	464b      	mov	r3, r9
 80022a8:	1891      	adds	r1, r2, r2
 80022aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80022ac:	415b      	adcs	r3, r3
 80022ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022b4:	4641      	mov	r1, r8
 80022b6:	eb12 0a01 	adds.w	sl, r2, r1
 80022ba:	4649      	mov	r1, r9
 80022bc:	eb43 0b01 	adc.w	fp, r3, r1
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022d4:	4692      	mov	sl, r2
 80022d6:	469b      	mov	fp, r3
 80022d8:	4643      	mov	r3, r8
 80022da:	eb1a 0303 	adds.w	r3, sl, r3
 80022de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022e2:	464b      	mov	r3, r9
 80022e4:	eb4b 0303 	adc.w	r3, fp, r3
 80022e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002300:	460b      	mov	r3, r1
 8002302:	18db      	adds	r3, r3, r3
 8002304:	643b      	str	r3, [r7, #64]	; 0x40
 8002306:	4613      	mov	r3, r2
 8002308:	eb42 0303 	adc.w	r3, r2, r3
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
 800230e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002316:	f7fd ffdb 	bl	80002d0 <__aeabi_uldivmod>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4611      	mov	r1, r2
 8002320:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <UART_SetConfig+0x2d4>)
 8002322:	fba3 2301 	umull	r2, r3, r3, r1
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2264      	movs	r2, #100	; 0x64
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	1acb      	subs	r3, r1, r3
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <UART_SetConfig+0x2d4>)
 8002338:	fba3 2302 	umull	r2, r3, r3, r2
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002344:	441c      	add	r4, r3
 8002346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800234a:	2200      	movs	r2, #0
 800234c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002350:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002358:	4642      	mov	r2, r8
 800235a:	464b      	mov	r3, r9
 800235c:	1891      	adds	r1, r2, r2
 800235e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002360:	415b      	adcs	r3, r3
 8002362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002368:	4641      	mov	r1, r8
 800236a:	1851      	adds	r1, r2, r1
 800236c:	6339      	str	r1, [r7, #48]	; 0x30
 800236e:	4649      	mov	r1, r9
 8002370:	414b      	adcs	r3, r1
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002380:	4659      	mov	r1, fp
 8002382:	00cb      	lsls	r3, r1, #3
 8002384:	4651      	mov	r1, sl
 8002386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800238a:	4651      	mov	r1, sl
 800238c:	00ca      	lsls	r2, r1, #3
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	4603      	mov	r3, r0
 8002394:	4642      	mov	r2, r8
 8002396:	189b      	adds	r3, r3, r2
 8002398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800239c:	464b      	mov	r3, r9
 800239e:	460a      	mov	r2, r1
 80023a0:	eb42 0303 	adc.w	r3, r2, r3
 80023a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023bc:	460b      	mov	r3, r1
 80023be:	18db      	adds	r3, r3, r3
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c2:	4613      	mov	r3, r2
 80023c4:	eb42 0303 	adc.w	r3, r2, r3
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023d2:	f7fd ff7d 	bl	80002d0 <__aeabi_uldivmod>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <UART_SetConfig+0x2d4>)
 80023dc:	fba3 1302 	umull	r1, r3, r3, r2
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	2164      	movs	r1, #100	; 0x64
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	3332      	adds	r3, #50	; 0x32
 80023ee:	4a08      	ldr	r2, [pc, #32]	; (8002410 <UART_SetConfig+0x2d4>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	f003 0207 	and.w	r2, r3, #7
 80023fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4422      	add	r2, r4
 8002402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002404:	e105      	b.n	8002612 <UART_SetConfig+0x4d6>
 8002406:	bf00      	nop
 8002408:	40011000 	.word	0x40011000
 800240c:	40011400 	.word	0x40011400
 8002410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800241e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002426:	4642      	mov	r2, r8
 8002428:	464b      	mov	r3, r9
 800242a:	1891      	adds	r1, r2, r2
 800242c:	6239      	str	r1, [r7, #32]
 800242e:	415b      	adcs	r3, r3
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002436:	4641      	mov	r1, r8
 8002438:	1854      	adds	r4, r2, r1
 800243a:	4649      	mov	r1, r9
 800243c:	eb43 0501 	adc.w	r5, r3, r1
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	00eb      	lsls	r3, r5, #3
 800244a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800244e:	00e2      	lsls	r2, r4, #3
 8002450:	4614      	mov	r4, r2
 8002452:	461d      	mov	r5, r3
 8002454:	4643      	mov	r3, r8
 8002456:	18e3      	adds	r3, r4, r3
 8002458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800245c:	464b      	mov	r3, r9
 800245e:	eb45 0303 	adc.w	r3, r5, r3
 8002462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002482:	4629      	mov	r1, r5
 8002484:	008b      	lsls	r3, r1, #2
 8002486:	4621      	mov	r1, r4
 8002488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800248c:	4621      	mov	r1, r4
 800248e:	008a      	lsls	r2, r1, #2
 8002490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002494:	f7fd ff1c 	bl	80002d0 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4b60      	ldr	r3, [pc, #384]	; (8002620 <UART_SetConfig+0x4e4>)
 800249e:	fba3 2302 	umull	r2, r3, r3, r2
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	011c      	lsls	r4, r3, #4
 80024a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	1891      	adds	r1, r2, r2
 80024be:	61b9      	str	r1, [r7, #24]
 80024c0:	415b      	adcs	r3, r3
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c8:	4641      	mov	r1, r8
 80024ca:	1851      	adds	r1, r2, r1
 80024cc:	6139      	str	r1, [r7, #16]
 80024ce:	4649      	mov	r1, r9
 80024d0:	414b      	adcs	r3, r1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024e0:	4659      	mov	r1, fp
 80024e2:	00cb      	lsls	r3, r1, #3
 80024e4:	4651      	mov	r1, sl
 80024e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ea:	4651      	mov	r1, sl
 80024ec:	00ca      	lsls	r2, r1, #3
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	4642      	mov	r2, r8
 80024f6:	189b      	adds	r3, r3, r2
 80024f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024fc:	464b      	mov	r3, r9
 80024fe:	460a      	mov	r2, r1
 8002500:	eb42 0303 	adc.w	r3, r2, r3
 8002504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	67bb      	str	r3, [r7, #120]	; 0x78
 8002512:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002520:	4649      	mov	r1, r9
 8002522:	008b      	lsls	r3, r1, #2
 8002524:	4641      	mov	r1, r8
 8002526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800252a:	4641      	mov	r1, r8
 800252c:	008a      	lsls	r2, r1, #2
 800252e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002532:	f7fd fecd 	bl	80002d0 <__aeabi_uldivmod>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <UART_SetConfig+0x4e4>)
 800253c:	fba3 1302 	umull	r1, r3, r3, r2
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	2164      	movs	r1, #100	; 0x64
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	3332      	adds	r3, #50	; 0x32
 800254e:	4a34      	ldr	r2, [pc, #208]	; (8002620 <UART_SetConfig+0x4e4>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800255a:	441c      	add	r4, r3
 800255c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002560:	2200      	movs	r2, #0
 8002562:	673b      	str	r3, [r7, #112]	; 0x70
 8002564:	677a      	str	r2, [r7, #116]	; 0x74
 8002566:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800256a:	4642      	mov	r2, r8
 800256c:	464b      	mov	r3, r9
 800256e:	1891      	adds	r1, r2, r2
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	415b      	adcs	r3, r3
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800257a:	4641      	mov	r1, r8
 800257c:	1851      	adds	r1, r2, r1
 800257e:	6039      	str	r1, [r7, #0]
 8002580:	4649      	mov	r1, r9
 8002582:	414b      	adcs	r3, r1
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002592:	4659      	mov	r1, fp
 8002594:	00cb      	lsls	r3, r1, #3
 8002596:	4651      	mov	r1, sl
 8002598:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259c:	4651      	mov	r1, sl
 800259e:	00ca      	lsls	r2, r1, #3
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	4603      	mov	r3, r0
 80025a6:	4642      	mov	r2, r8
 80025a8:	189b      	adds	r3, r3, r2
 80025aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ac:	464b      	mov	r3, r9
 80025ae:	460a      	mov	r2, r1
 80025b0:	eb42 0303 	adc.w	r3, r2, r3
 80025b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	663b      	str	r3, [r7, #96]	; 0x60
 80025c0:	667a      	str	r2, [r7, #100]	; 0x64
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025ce:	4649      	mov	r1, r9
 80025d0:	008b      	lsls	r3, r1, #2
 80025d2:	4641      	mov	r1, r8
 80025d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025d8:	4641      	mov	r1, r8
 80025da:	008a      	lsls	r2, r1, #2
 80025dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025e0:	f7fd fe76 	bl	80002d0 <__aeabi_uldivmod>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <UART_SetConfig+0x4e4>)
 80025ea:	fba3 1302 	umull	r1, r3, r3, r2
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2164      	movs	r1, #100	; 0x64
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	3332      	adds	r3, #50	; 0x32
 80025fc:	4a08      	ldr	r2, [pc, #32]	; (8002620 <UART_SetConfig+0x4e4>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	f003 020f 	and.w	r2, r3, #15
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4422      	add	r2, r4
 8002610:	609a      	str	r2, [r3, #8]
}
 8002612:	bf00      	nop
 8002614:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002618:	46bd      	mov	sp, r7
 800261a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800261e:	bf00      	nop
 8002620:	51eb851f 	.word	0x51eb851f

08002624 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002636:	2b84      	cmp	r3, #132	; 0x84
 8002638:	d005      	beq.n	8002646 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800263a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	3303      	adds	r3, #3
 8002644:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002658:	f000 feb6 	bl	80033c8 <vTaskStartScheduler>
  
  return osOK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	bd80      	pop	{r7, pc}

08002662 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002664:	b089      	sub	sp, #36	; 0x24
 8002666:	af04      	add	r7, sp, #16
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <osThreadCreate+0x54>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01c      	beq.n	80026b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685c      	ldr	r4, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681d      	ldr	r5, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691e      	ldr	r6, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ffc8 	bl	8002624 <makeFreeRtosPriority>
 8002694:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800269e:	9202      	str	r2, [sp, #8]
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	9100      	str	r1, [sp, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4632      	mov	r2, r6
 80026a8:	4629      	mov	r1, r5
 80026aa:	4620      	mov	r0, r4
 80026ac:	f000 fcbc 	bl	8003028 <xTaskCreateStatic>
 80026b0:	4603      	mov	r3, r0
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e01c      	b.n	80026f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685c      	ldr	r4, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026c2:	b29e      	uxth	r6, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ffaa 	bl	8002624 <makeFreeRtosPriority>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	9200      	str	r2, [sp, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	4632      	mov	r2, r6
 80026de:	4629      	mov	r1, r5
 80026e0:	4620      	mov	r0, r4
 80026e2:	f000 fcfe 	bl	80030e2 <xTaskCreate>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d001      	beq.n	80026f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e000      	b.n	80026f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <osDelay+0x16>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	e000      	b.n	8002712 <osDelay+0x18>
 8002710:	2301      	movs	r3, #1
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fe24 	bl	8003360 <vTaskDelay>
  
  return osOK;
 8002718:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f103 0208 	add.w	r2, r3, #8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800273a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f103 0208 	add.w	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0208 	add.w	r2, r3, #8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027da:	d103      	bne.n	80027e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e00c      	b.n	80027fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3308      	adds	r3, #8
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e002      	b.n	80027f2 <vListInsert+0x2e>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d2f6      	bcs.n	80027ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6892      	ldr	r2, [r2, #8]
 800284c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6852      	ldr	r2, [r2, #4]
 8002856:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d103      	bne.n	800286a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028b6:	f001 fce5 	bl	8004284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	68f9      	ldr	r1, [r7, #12]
 80028c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	441a      	add	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	3b01      	subs	r3, #1
 80028e8:	68f9      	ldr	r1, [r7, #12]
 80028ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	441a      	add	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	22ff      	movs	r2, #255	; 0xff
 80028fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	22ff      	movs	r2, #255	; 0xff
 8002902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d114      	bne.n	8002936 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01a      	beq.n	800294a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3310      	adds	r3, #16
 8002918:	4618      	mov	r0, r3
 800291a:	f000 ffa7 	bl	800386c <xTaskRemoveFromEventList>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <xQueueGenericReset+0xcc>)
 8002926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	e009      	b.n	800294a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3310      	adds	r3, #16
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fef1 	bl	8002722 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3324      	adds	r3, #36	; 0x24
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff feec 	bl	8002722 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800294a:	f001 fccb 	bl	80042e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	e000ed04 	.word	0xe000ed04

0800295c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	613b      	str	r3, [r7, #16]
}
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3348      	adds	r3, #72	; 0x48
 8002994:	4618      	mov	r0, r3
 8002996:	f001 fd57 	bl	8004448 <pvPortMalloc>
 800299a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d011      	beq.n	80029c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3348      	adds	r3, #72	; 0x48
 80029aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029b4:	79fa      	ldrb	r2, [r7, #7]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f805 	bl	80029d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029c6:	69bb      	ldr	r3, [r7, #24]
	}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d103      	bne.n	80029ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e002      	b.n	80029f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029fe:	2101      	movs	r1, #1
 8002a00:	69b8      	ldr	r0, [r7, #24]
 8002a02:	f7ff ff43 	bl	800288c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08e      	sub	sp, #56	; 0x38
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericSend+0x32>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d103      	bne.n	8002a50 <xQueueGenericSend+0x40>
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <xQueueGenericSend+0x44>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <xQueueGenericSend+0x46>
 8002a54:	2300      	movs	r3, #0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10a      	bne.n	8002a70 <xQueueGenericSend+0x60>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a6c:	bf00      	nop
 8002a6e:	e7fe      	b.n	8002a6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d103      	bne.n	8002a7e <xQueueGenericSend+0x6e>
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <xQueueGenericSend+0x72>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <xQueueGenericSend+0x74>
 8002a82:	2300      	movs	r3, #0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <xQueueGenericSend+0x8e>
	__asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	623b      	str	r3, [r7, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	e7fe      	b.n	8002a9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a9e:	f001 f8a1 	bl	8003be4 <xTaskGetSchedulerState>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <xQueueGenericSend+0x9e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <xQueueGenericSend+0xa2>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <xQueueGenericSend+0xa4>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <xQueueGenericSend+0xbe>
	__asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	61fb      	str	r3, [r7, #28]
}
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ace:	f001 fbd9 	bl	8004284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d302      	bcc.n	8002ae4 <xQueueGenericSend+0xd4>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d129      	bne.n	8002b38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aea:	f000 f9b3 	bl	8002e54 <prvCopyDataToQueue>
 8002aee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	3324      	adds	r3, #36	; 0x24
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 feb5 	bl	800386c <xTaskRemoveFromEventList>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b08:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <xQueueGenericSend+0x1f8>)
 8002b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	e00a      	b.n	8002b30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b20:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <xQueueGenericSend+0x1f8>)
 8002b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b30:	f001 fbd8 	bl	80042e4 <vPortExitCritical>
				return pdPASS;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e063      	b.n	8002c00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b3e:	f001 fbd1 	bl	80042e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e05c      	b.n	8002c00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 feed 	bl	8003930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b5a:	f001 fbc3 	bl	80042e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b5e:	f000 fc93 	bl	8003488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b62:	f001 fb8f 	bl	8004284 <vPortEnterCritical>
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b72:	d103      	bne.n	8002b7c <xQueueGenericSend+0x16c>
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b88:	d103      	bne.n	8002b92 <xQueueGenericSend+0x182>
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b92:	f001 fba7 	bl	80042e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b96:	1d3a      	adds	r2, r7, #4
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fedc 	bl	800395c <xTaskCheckForTimeOut>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d124      	bne.n	8002bf4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bac:	f000 fa24 	bl	8002ff8 <prvIsQueueFull>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	3310      	adds	r3, #16
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fe30 	bl	8003824 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bc6:	f000 f9af 	bl	8002f28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bca:	f000 fc6b 	bl	80034a4 <xTaskResumeAll>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f af7c 	bne.w	8002ace <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <xQueueGenericSend+0x1f8>)
 8002bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	e772      	b.n	8002ace <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bea:	f000 f99d 	bl	8002f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bee:	f000 fc59 	bl	80034a4 <xTaskResumeAll>
 8002bf2:	e76c      	b.n	8002ace <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf6:	f000 f997 	bl	8002f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bfa:	f000 fc53 	bl	80034a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3738      	adds	r7, #56	; 0x38
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	e000ed04 	.word	0xe000ed04

08002c0c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	; 0x38
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	623b      	str	r3, [r7, #32]
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	61fb      	str	r3, [r7, #28]
}
 8002c58:	bf00      	nop
 8002c5a:	e7fe      	b.n	8002c5a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c5c:	f000 ffc2 	bl	8003be4 <xTaskGetSchedulerState>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <xQueueSemaphoreTake+0x60>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <xQueueSemaphoreTake+0x64>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <xQueueSemaphoreTake+0x66>
 8002c70:	2300      	movs	r3, #0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	61bb      	str	r3, [r7, #24]
}
 8002c88:	bf00      	nop
 8002c8a:	e7fe      	b.n	8002c8a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c8c:	f001 fafa 	bl	8004284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d024      	beq.n	8002ce6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	1e5a      	subs	r2, r3, #1
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002cac:	f001 f942 	bl	8003f34 <pvTaskIncrementMutexHeldCount>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00f      	beq.n	8002cde <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	3310      	adds	r3, #16
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fdd2 	bl	800386c <xTaskRemoveFromEventList>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cce:	4b54      	ldr	r3, [pc, #336]	; (8002e20 <xQueueSemaphoreTake+0x214>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cde:	f001 fb01 	bl	80042e4 <vPortExitCritical>
				return pdPASS;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e097      	b.n	8002e16 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d111      	bne.n	8002d10 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	617b      	str	r3, [r7, #20]
}
 8002d04:	bf00      	nop
 8002d06:	e7fe      	b.n	8002d06 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002d08:	f001 faec 	bl	80042e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e082      	b.n	8002e16 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fe08 	bl	8003930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d24:	f001 fade 	bl	80042e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d28:	f000 fbae 	bl	8003488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d2c:	f001 faaa 	bl	8004284 <vPortEnterCritical>
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d3c:	d103      	bne.n	8002d46 <xQueueSemaphoreTake+0x13a>
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d4c:	b25b      	sxtb	r3, r3
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d52:	d103      	bne.n	8002d5c <xQueueSemaphoreTake+0x150>
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d5c:	f001 fac2 	bl	80042e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d60:	463a      	mov	r2, r7
 8002d62:	f107 030c 	add.w	r3, r7, #12
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fdf7 	bl	800395c <xTaskCheckForTimeOut>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d132      	bne.n	8002dda <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d76:	f000 f929 	bl	8002fcc <prvIsQueueEmpty>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d026      	beq.n	8002dce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002d88:	f001 fa7c 	bl	8004284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 ff45 	bl	8003c20 <xTaskPriorityInherit>
 8002d96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002d98:	f001 faa4 	bl	80042e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9e:	3324      	adds	r3, #36	; 0x24
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fd3d 	bl	8003824 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dac:	f000 f8bc 	bl	8002f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002db0:	f000 fb78 	bl	80034a4 <xTaskResumeAll>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f47f af68 	bne.w	8002c8c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <xQueueSemaphoreTake+0x214>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	e75e      	b.n	8002c8c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002dce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dd0:	f000 f8aa 	bl	8002f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dd4:	f000 fb66 	bl	80034a4 <xTaskResumeAll>
 8002dd8:	e758      	b.n	8002c8c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ddc:	f000 f8a4 	bl	8002f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002de0:	f000 fb60 	bl	80034a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002de6:	f000 f8f1 	bl	8002fcc <prvIsQueueEmpty>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f43f af4d 	beq.w	8002c8c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002df8:	f001 fa44 	bl	8004284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dfe:	f000 f811 	bl	8002e24 <prvGetDisinheritPriorityAfterTimeout>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f001 f804 	bl	8003e18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002e10:	f001 fa68 	bl	80042e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3738      	adds	r7, #56	; 0x38
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	e000ed04 	.word	0xe000ed04

08002e24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1c3 0307 	rsb	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e001      	b.n	8002e46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002e46:	68fb      	ldr	r3, [r7, #12]
	}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10d      	bne.n	8002e8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d14d      	bne.n	8002f16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 ff44 	bl	8003d0c <xTaskPriorityDisinherit>
 8002e84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	e043      	b.n	8002f16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d119      	bne.n	8002ec8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6858      	ldr	r0, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	f001 fce6 	bl	8004870 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	441a      	add	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d32b      	bcc.n	8002f16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	e026      	b.n	8002f16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68d8      	ldr	r0, [r3, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	f001 fccc 	bl	8004870 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	425b      	negs	r3, r3
 8002ee2:	441a      	add	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d207      	bcs.n	8002f04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	425b      	negs	r3, r3
 8002efe:	441a      	add	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d105      	bne.n	8002f16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f1e:	697b      	ldr	r3, [r7, #20]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f30:	f001 f9a8 	bl	8004284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f3c:	e011      	b.n	8002f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3324      	adds	r3, #36	; 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fc8e 	bl	800386c <xTaskRemoveFromEventList>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f56:	f000 fd63 	bl	8003a20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	dce9      	bgt.n	8002f3e <prvUnlockQueue+0x16>
 8002f6a:	e000      	b.n	8002f6e <prvUnlockQueue+0x46>
					break;
 8002f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	22ff      	movs	r2, #255	; 0xff
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f76:	f001 f9b5 	bl	80042e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f7a:	f001 f983 	bl	8004284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f86:	e011      	b.n	8002fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3310      	adds	r3, #16
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fc69 	bl	800386c <xTaskRemoveFromEventList>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fa0:	f000 fd3e 	bl	8003a20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fa4:	7bbb      	ldrb	r3, [r7, #14]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	dce9      	bgt.n	8002f88 <prvUnlockQueue+0x60>
 8002fb4:	e000      	b.n	8002fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	22ff      	movs	r2, #255	; 0xff
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fc0:	f001 f990 	bl	80042e4 <vPortExitCritical>
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fd4:	f001 f956 	bl	8004284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e001      	b.n	8002fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fea:	f001 f97b 	bl	80042e4 <vPortExitCritical>

	return xReturn;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003000:	f001 f940 	bl	8004284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	429a      	cmp	r2, r3
 800300e:	d102      	bne.n	8003016 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003010:	2301      	movs	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e001      	b.n	800301a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800301a:	f001 f963 	bl	80042e4 <vPortExitCritical>

	return xReturn;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08e      	sub	sp, #56	; 0x38
 800302c:	af04      	add	r7, sp, #16
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <xTaskCreateStatic+0x2a>
	__asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	623b      	str	r3, [r7, #32]
}
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <xTaskCreateStatic+0x46>
	__asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	61fb      	str	r3, [r7, #28]
}
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800306e:	2354      	movs	r3, #84	; 0x54
 8003070:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b54      	cmp	r3, #84	; 0x54
 8003076:	d00a      	beq.n	800308e <xTaskCreateStatic+0x66>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	61bb      	str	r3, [r7, #24]
}
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800308e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01e      	beq.n	80030d4 <xTaskCreateStatic+0xac>
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01b      	beq.n	80030d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030ae:	2300      	movs	r3, #0
 80030b0:	9303      	str	r3, [sp, #12]
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	9302      	str	r3, [sp, #8]
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f850 	bl	800316c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ce:	f000 f8dd 	bl	800328c <prvAddNewTaskToReadyList>
 80030d2:	e001      	b.n	80030d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030d8:	697b      	ldr	r3, [r7, #20]
	}
 80030da:	4618      	mov	r0, r3
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b08c      	sub	sp, #48	; 0x30
 80030e6:	af04      	add	r7, sp, #16
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f001 f9a6 	bl	8004448 <pvPortMalloc>
 80030fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003104:	2054      	movs	r0, #84	; 0x54
 8003106:	f001 f99f 	bl	8004448 <pvPortMalloc>
 800310a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
 8003118:	e005      	b.n	8003126 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f001 fa60 	bl	80045e0 <vPortFree>
 8003120:	e001      	b.n	8003126 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d017      	beq.n	800315c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	2300      	movs	r3, #0
 8003138:	9303      	str	r3, [sp, #12]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	9302      	str	r3, [sp, #8]
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f80e 	bl	800316c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003150:	69f8      	ldr	r0, [r7, #28]
 8003152:	f000 f89b 	bl	800328c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003156:	2301      	movs	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e002      	b.n	8003162 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003160:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003162:	69bb      	ldr	r3, [r7, #24]
	}
 8003164:	4618      	mov	r0, r3
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	461a      	mov	r2, r3
 8003184:	21a5      	movs	r1, #165	; 0xa5
 8003186:	f001 fb81 	bl	800488c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003194:	3b01      	subs	r3, #1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f023 0307 	bic.w	r3, r3, #7
 80031a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	617b      	str	r3, [r7, #20]
}
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01f      	beq.n	800320a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e012      	b.n	80031f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	7819      	ldrb	r1, [r3, #0]
 80031d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	3334      	adds	r3, #52	; 0x34
 80031e0:	460a      	mov	r2, r1
 80031e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3301      	adds	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b0f      	cmp	r3, #15
 80031fa:	d9e9      	bls.n	80031d0 <prvInitialiseNewTask+0x64>
 80031fc:	e000      	b.n	8003200 <prvInitialiseNewTask+0x94>
			{
				break;
 80031fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003208:	e003      	b.n	8003212 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	2b06      	cmp	r3, #6
 8003216:	d901      	bls.n	800321c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003218:	2306      	movs	r3, #6
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003226:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	2200      	movs	r2, #0
 800322c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	3304      	adds	r3, #4
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fa95 	bl	8002762 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	3318      	adds	r3, #24
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fa90 	bl	8002762 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	f1c3 0207 	rsb	r2, r3, #7
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	2200      	movs	r2, #0
 800325c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	68f9      	ldr	r1, [r7, #12]
 800326a:	69b8      	ldr	r0, [r7, #24]
 800326c:	f000 fedc 	bl	8004028 <pxPortInitialiseStack>
 8003270:	4602      	mov	r2, r0
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003282:	bf00      	nop
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003294:	f000 fff6 	bl	8004284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <prvAddNewTaskToReadyList+0xb8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	4a29      	ldr	r2, [pc, #164]	; (8003344 <prvAddNewTaskToReadyList+0xb8>)
 80032a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <prvAddNewTaskToReadyList+0xbc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032aa:	4a27      	ldr	r2, [pc, #156]	; (8003348 <prvAddNewTaskToReadyList+0xbc>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032b0:	4b24      	ldr	r3, [pc, #144]	; (8003344 <prvAddNewTaskToReadyList+0xb8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d110      	bne.n	80032da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032b8:	f000 fbd6 	bl	8003a68 <prvInitialiseTaskLists>
 80032bc:	e00d      	b.n	80032da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032be:	4b23      	ldr	r3, [pc, #140]	; (800334c <prvAddNewTaskToReadyList+0xc0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <prvAddNewTaskToReadyList+0xbc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d802      	bhi.n	80032da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032d4:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <prvAddNewTaskToReadyList+0xbc>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <prvAddNewTaskToReadyList+0xc4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3301      	adds	r3, #1
 80032e0:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <prvAddNewTaskToReadyList+0xc4>)
 80032e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	2201      	movs	r2, #1
 80032ea:	409a      	lsls	r2, r3
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <prvAddNewTaskToReadyList+0xc8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <prvAddNewTaskToReadyList+0xc8>)
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4a15      	ldr	r2, [pc, #84]	; (8003358 <prvAddNewTaskToReadyList+0xcc>)
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f7ff fa35 	bl	800277c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003312:	f000 ffe7 	bl	80042e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <prvAddNewTaskToReadyList+0xc0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00e      	beq.n	800333c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <prvAddNewTaskToReadyList+0xbc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	429a      	cmp	r2, r3
 800332a:	d207      	bcs.n	800333c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <prvAddNewTaskToReadyList+0xd0>)
 800332e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000448 	.word	0x20000448
 8003348:	20000348 	.word	0x20000348
 800334c:	20000454 	.word	0x20000454
 8003350:	20000464 	.word	0x20000464
 8003354:	20000450 	.word	0x20000450
 8003358:	2000034c 	.word	0x2000034c
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d017      	beq.n	80033a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003372:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <vTaskDelay+0x60>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <vTaskDelay+0x30>
	__asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	60bb      	str	r3, [r7, #8]
}
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003390:	f000 f87a 	bl	8003488 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003394:	2100      	movs	r1, #0
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fde0 	bl	8003f5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800339c:	f000 f882 	bl	80034a4 <xTaskResumeAll>
 80033a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <vTaskDelay+0x64>)
 80033aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000470 	.word	0x20000470
 80033c4:	e000ed04 	.word	0xe000ed04

080033c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033d6:	463a      	mov	r2, r7
 80033d8:	1d39      	adds	r1, r7, #4
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f8f8 	bl	80005d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	9202      	str	r2, [sp, #8]
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2300      	movs	r3, #0
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2300      	movs	r3, #0
 80033f4:	460a      	mov	r2, r1
 80033f6:	491e      	ldr	r1, [pc, #120]	; (8003470 <vTaskStartScheduler+0xa8>)
 80033f8:	481e      	ldr	r0, [pc, #120]	; (8003474 <vTaskStartScheduler+0xac>)
 80033fa:	f7ff fe15 	bl	8003028 <xTaskCreateStatic>
 80033fe:	4603      	mov	r3, r0
 8003400:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <vTaskStartScheduler+0xb0>)
 8003402:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003404:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <vTaskStartScheduler+0xb0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e001      	b.n	8003416 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d116      	bne.n	800344a <vTaskStartScheduler+0x82>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	613b      	str	r3, [r7, #16]
}
 800342e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <vTaskStartScheduler+0xb4>)
 8003432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003436:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <vTaskStartScheduler+0xb8>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <vTaskStartScheduler+0xbc>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003444:	f000 fe7c 	bl	8004140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003448:	e00e      	b.n	8003468 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003450:	d10a      	bne.n	8003468 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	60fb      	str	r3, [r7, #12]
}
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <vTaskStartScheduler+0x9e>
}
 8003468:	bf00      	nop
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	08005300 	.word	0x08005300
 8003474:	08003a39 	.word	0x08003a39
 8003478:	2000046c 	.word	0x2000046c
 800347c:	20000468 	.word	0x20000468
 8003480:	20000454 	.word	0x20000454
 8003484:	2000044c 	.word	0x2000044c

08003488 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <vTaskSuspendAll+0x18>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	4a03      	ldr	r2, [pc, #12]	; (80034a0 <vTaskSuspendAll+0x18>)
 8003494:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	20000470 	.word	0x20000470

080034a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <xTaskResumeAll+0x114>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	603b      	str	r3, [r7, #0]
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034d0:	f000 fed8 	bl	8004284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034d4:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <xTaskResumeAll+0x114>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3b01      	subs	r3, #1
 80034da:	4a37      	ldr	r2, [pc, #220]	; (80035b8 <xTaskResumeAll+0x114>)
 80034dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034de:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <xTaskResumeAll+0x114>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d161      	bne.n	80035aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034e6:	4b35      	ldr	r3, [pc, #212]	; (80035bc <xTaskResumeAll+0x118>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d05d      	beq.n	80035aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034ee:	e02e      	b.n	800354e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f0:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <xTaskResumeAll+0x11c>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	3318      	adds	r3, #24
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff f99a 	bl	8002836 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3304      	adds	r3, #4
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff f995 	bl	8002836 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <xTaskResumeAll+0x120>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4313      	orrs	r3, r2
 800351a:	4a2a      	ldr	r2, [pc, #168]	; (80035c4 <xTaskResumeAll+0x120>)
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <xTaskResumeAll+0x124>)
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3304      	adds	r3, #4
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f7ff f921 	bl	800277c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <xTaskResumeAll+0x128>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <xTaskResumeAll+0x12c>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800354e:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <xTaskResumeAll+0x11c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1cc      	bne.n	80034f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800355c:	f000 fb22 	bl	8003ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003560:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <xTaskResumeAll+0x130>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d010      	beq.n	800358e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800356c:	f000 f846 	bl	80035fc <xTaskIncrementTick>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003576:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <xTaskResumeAll+0x12c>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f1      	bne.n	800356c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <xTaskResumeAll+0x130>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <xTaskResumeAll+0x12c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003596:	2301      	movs	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <xTaskResumeAll+0x134>)
 800359c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035aa:	f000 fe9b 	bl	80042e4 <vPortExitCritical>

	return xAlreadyYielded;
 80035ae:	68bb      	ldr	r3, [r7, #8]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000470 	.word	0x20000470
 80035bc:	20000448 	.word	0x20000448
 80035c0:	20000408 	.word	0x20000408
 80035c4:	20000450 	.word	0x20000450
 80035c8:	2000034c 	.word	0x2000034c
 80035cc:	20000348 	.word	0x20000348
 80035d0:	2000045c 	.word	0x2000045c
 80035d4:	20000458 	.word	0x20000458
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <xTaskGetTickCount+0x1c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035e8:	687b      	ldr	r3, [r7, #4]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	2000044c 	.word	0x2000044c

080035fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003606:	4b4e      	ldr	r3, [pc, #312]	; (8003740 <xTaskIncrementTick+0x144>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 808e 	bne.w	800372c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003610:	4b4c      	ldr	r3, [pc, #304]	; (8003744 <xTaskIncrementTick+0x148>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003618:	4a4a      	ldr	r2, [pc, #296]	; (8003744 <xTaskIncrementTick+0x148>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d120      	bne.n	8003666 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003624:	4b48      	ldr	r3, [pc, #288]	; (8003748 <xTaskIncrementTick+0x14c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <xTaskIncrementTick+0x48>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	603b      	str	r3, [r7, #0]
}
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <xTaskIncrementTick+0x46>
 8003644:	4b40      	ldr	r3, [pc, #256]	; (8003748 <xTaskIncrementTick+0x14c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b40      	ldr	r3, [pc, #256]	; (800374c <xTaskIncrementTick+0x150>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a3e      	ldr	r2, [pc, #248]	; (8003748 <xTaskIncrementTick+0x14c>)
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4a3e      	ldr	r2, [pc, #248]	; (800374c <xTaskIncrementTick+0x150>)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <xTaskIncrementTick+0x154>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	4a3c      	ldr	r2, [pc, #240]	; (8003750 <xTaskIncrementTick+0x154>)
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	f000 fa9f 	bl	8003ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003666:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <xTaskIncrementTick+0x158>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	429a      	cmp	r2, r3
 800366e:	d348      	bcc.n	8003702 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003670:	4b35      	ldr	r3, [pc, #212]	; (8003748 <xTaskIncrementTick+0x14c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800367a:	4b36      	ldr	r3, [pc, #216]	; (8003754 <xTaskIncrementTick+0x158>)
 800367c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003680:	601a      	str	r2, [r3, #0]
					break;
 8003682:	e03e      	b.n	8003702 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003684:	4b30      	ldr	r3, [pc, #192]	; (8003748 <xTaskIncrementTick+0x14c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	d203      	bcs.n	80036a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800369c:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <xTaskIncrementTick+0x158>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036a2:	e02e      	b.n	8003702 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f8c4 	bl	8002836 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3318      	adds	r3, #24
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff f8bb 	bl	8002836 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	2201      	movs	r2, #1
 80036c6:	409a      	lsls	r2, r3
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <xTaskIncrementTick+0x15c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	4a22      	ldr	r2, [pc, #136]	; (8003758 <xTaskIncrementTick+0x15c>)
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4a1f      	ldr	r2, [pc, #124]	; (800375c <xTaskIncrementTick+0x160>)
 80036e0:	441a      	add	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f7ff f847 	bl	800277c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f2:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <xTaskIncrementTick+0x164>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d3b9      	bcc.n	8003670 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80036fc:	2301      	movs	r3, #1
 80036fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003700:	e7b6      	b.n	8003670 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <xTaskIncrementTick+0x164>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	4914      	ldr	r1, [pc, #80]	; (800375c <xTaskIncrementTick+0x160>)
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d901      	bls.n	800371e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800371a:	2301      	movs	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <xTaskIncrementTick+0x168>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003726:	2301      	movs	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e004      	b.n	8003736 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <xTaskIncrementTick+0x16c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <xTaskIncrementTick+0x16c>)
 8003734:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003736:	697b      	ldr	r3, [r7, #20]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000470 	.word	0x20000470
 8003744:	2000044c 	.word	0x2000044c
 8003748:	20000400 	.word	0x20000400
 800374c:	20000404 	.word	0x20000404
 8003750:	20000460 	.word	0x20000460
 8003754:	20000468 	.word	0x20000468
 8003758:	20000450 	.word	0x20000450
 800375c:	2000034c 	.word	0x2000034c
 8003760:	20000348 	.word	0x20000348
 8003764:	2000045c 	.word	0x2000045c
 8003768:	20000458 	.word	0x20000458

0800376c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003772:	4b27      	ldr	r3, [pc, #156]	; (8003810 <vTaskSwitchContext+0xa4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <vTaskSwitchContext+0xa8>)
 800377c:	2201      	movs	r2, #1
 800377e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003780:	e03f      	b.n	8003802 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <vTaskSwitchContext+0xa8>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <vTaskSwitchContext+0xac>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	fab3 f383 	clz	r3, r3
 8003794:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003796:	7afb      	ldrb	r3, [r7, #11]
 8003798:	f1c3 031f 	rsb	r3, r3, #31
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	491f      	ldr	r1, [pc, #124]	; (800381c <vTaskSwitchContext+0xb0>)
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	607b      	str	r3, [r7, #4]
}
 80037c4:	bf00      	nop
 80037c6:	e7fe      	b.n	80037c6 <vTaskSwitchContext+0x5a>
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <vTaskSwitchContext+0xb0>)
 80037d4:	4413      	add	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	3308      	adds	r3, #8
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d104      	bne.n	80037f8 <vTaskSwitchContext+0x8c>
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4a08      	ldr	r2, [pc, #32]	; (8003820 <vTaskSwitchContext+0xb4>)
 8003800:	6013      	str	r3, [r2, #0]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000470 	.word	0x20000470
 8003814:	2000045c 	.word	0x2000045c
 8003818:	20000450 	.word	0x20000450
 800381c:	2000034c 	.word	0x2000034c
 8003820:	20000348 	.word	0x20000348

08003824 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	60fb      	str	r3, [r7, #12]
}
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800384a:	4b07      	ldr	r3, [pc, #28]	; (8003868 <vTaskPlaceOnEventList+0x44>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3318      	adds	r3, #24
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe ffb6 	bl	80027c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003858:	2101      	movs	r1, #1
 800385a:	6838      	ldr	r0, [r7, #0]
 800385c:	f000 fb7e 	bl	8003f5c <prvAddCurrentTaskToDelayedList>
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000348 	.word	0x20000348

0800386c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	60fb      	str	r3, [r7, #12]
}
 8003894:	bf00      	nop
 8003896:	e7fe      	b.n	8003896 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	3318      	adds	r3, #24
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe ffca 	bl	8002836 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <xTaskRemoveFromEventList+0xac>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11c      	bne.n	80038e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe ffc1 	bl	8002836 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	2201      	movs	r2, #1
 80038ba:	409a      	lsls	r2, r3
 80038bc:	4b17      	ldr	r3, [pc, #92]	; (800391c <xTaskRemoveFromEventList+0xb0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	4a16      	ldr	r2, [pc, #88]	; (800391c <xTaskRemoveFromEventList+0xb0>)
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4a13      	ldr	r2, [pc, #76]	; (8003920 <xTaskRemoveFromEventList+0xb4>)
 80038d4:	441a      	add	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	3304      	adds	r3, #4
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f7fe ff4d 	bl	800277c <vListInsertEnd>
 80038e2:	e005      	b.n	80038f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	3318      	adds	r3, #24
 80038e8:	4619      	mov	r1, r3
 80038ea:	480e      	ldr	r0, [pc, #56]	; (8003924 <xTaskRemoveFromEventList+0xb8>)
 80038ec:	f7fe ff46 	bl	800277c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <xTaskRemoveFromEventList+0xbc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d905      	bls.n	800390a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <xTaskRemoveFromEventList+0xc0>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e001      	b.n	800390e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800390e:	697b      	ldr	r3, [r7, #20]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000470 	.word	0x20000470
 800391c:	20000450 	.word	0x20000450
 8003920:	2000034c 	.word	0x2000034c
 8003924:	20000408 	.word	0x20000408
 8003928:	20000348 	.word	0x20000348
 800392c:	2000045c 	.word	0x2000045c

08003930 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <vTaskInternalSetTimeOutState+0x24>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <vTaskInternalSetTimeOutState+0x28>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	605a      	str	r2, [r3, #4]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	20000460 	.word	0x20000460
 8003958:	2000044c 	.word	0x2000044c

0800395c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	613b      	str	r3, [r7, #16]
}
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	60fb      	str	r3, [r7, #12]
}
 800399a:	bf00      	nop
 800399c:	e7fe      	b.n	800399c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800399e:	f000 fc71 	bl	8004284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039a2:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <xTaskCheckForTimeOut+0xbc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ba:	d102      	bne.n	80039c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e023      	b.n	8003a0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <xTaskCheckForTimeOut+0xc0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d007      	beq.n	80039de <xTaskCheckForTimeOut+0x82>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e015      	b.n	8003a0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d20b      	bcs.n	8003a00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	1ad2      	subs	r2, r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff9b 	bl	8003930 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	e004      	b.n	8003a0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a0a:	f000 fc6b 	bl	80042e4 <vPortExitCritical>

	return xReturn;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	2000044c 	.word	0x2000044c
 8003a1c:	20000460 	.word	0x20000460

08003a20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <vTaskMissedYield+0x14>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	2000045c 	.word	0x2000045c

08003a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a40:	f000 f852 	bl	8003ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <prvIdleTask+0x28>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d9f9      	bls.n	8003a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <prvIdleTask+0x2c>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a5c:	e7f0      	b.n	8003a40 <prvIdleTask+0x8>
 8003a5e:	bf00      	nop
 8003a60:	2000034c 	.word	0x2000034c
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	e00c      	b.n	8003a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <prvInitialiseTaskLists+0x60>)
 8003a80:	4413      	add	r3, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fe4d 	bl	8002722 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d9ef      	bls.n	8003a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a94:	480d      	ldr	r0, [pc, #52]	; (8003acc <prvInitialiseTaskLists+0x64>)
 8003a96:	f7fe fe44 	bl	8002722 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a9a:	480d      	ldr	r0, [pc, #52]	; (8003ad0 <prvInitialiseTaskLists+0x68>)
 8003a9c:	f7fe fe41 	bl	8002722 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003aa0:	480c      	ldr	r0, [pc, #48]	; (8003ad4 <prvInitialiseTaskLists+0x6c>)
 8003aa2:	f7fe fe3e 	bl	8002722 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003aa6:	480c      	ldr	r0, [pc, #48]	; (8003ad8 <prvInitialiseTaskLists+0x70>)
 8003aa8:	f7fe fe3b 	bl	8002722 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003aac:	480b      	ldr	r0, [pc, #44]	; (8003adc <prvInitialiseTaskLists+0x74>)
 8003aae:	f7fe fe38 	bl	8002722 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <prvInitialiseTaskLists+0x78>)
 8003ab4:	4a05      	ldr	r2, [pc, #20]	; (8003acc <prvInitialiseTaskLists+0x64>)
 8003ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <prvInitialiseTaskLists+0x7c>)
 8003aba:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <prvInitialiseTaskLists+0x68>)
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2000034c 	.word	0x2000034c
 8003acc:	200003d8 	.word	0x200003d8
 8003ad0:	200003ec 	.word	0x200003ec
 8003ad4:	20000408 	.word	0x20000408
 8003ad8:	2000041c 	.word	0x2000041c
 8003adc:	20000434 	.word	0x20000434
 8003ae0:	20000400 	.word	0x20000400
 8003ae4:	20000404 	.word	0x20000404

08003ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aee:	e019      	b.n	8003b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003af0:	f000 fbc8 	bl	8004284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <prvCheckTasksWaitingTermination+0x50>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fe98 	bl	8002836 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <prvCheckTasksWaitingTermination+0x54>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	4a0b      	ldr	r2, [pc, #44]	; (8003b3c <prvCheckTasksWaitingTermination+0x54>)
 8003b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <prvCheckTasksWaitingTermination+0x58>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <prvCheckTasksWaitingTermination+0x58>)
 8003b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b1a:	f000 fbe3 	bl	80042e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f810 	bl	8003b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <prvCheckTasksWaitingTermination+0x58>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e1      	bne.n	8003af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	2000041c 	.word	0x2000041c
 8003b3c:	20000448 	.word	0x20000448
 8003b40:	20000430 	.word	0x20000430

08003b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fd40 	bl	80045e0 <vPortFree>
				vPortFree( pxTCB );
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fd3d 	bl	80045e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b66:	e018      	b.n	8003b9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d103      	bne.n	8003b7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fd34 	bl	80045e0 <vPortFree>
	}
 8003b78:	e00f      	b.n	8003b9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d00a      	beq.n	8003b9a <prvDeleteTCB+0x56>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60fb      	str	r3, [r7, #12]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <prvDeleteTCB+0x54>
	}
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <prvResetNextTaskUnblockTime+0x38>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <prvResetNextTaskUnblockTime+0x3c>)
 8003bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bbc:	e008      	b.n	8003bd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <prvResetNextTaskUnblockTime+0x38>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <prvResetNextTaskUnblockTime+0x3c>)
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	20000400 	.word	0x20000400
 8003be0:	20000468 	.word	0x20000468

08003be4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <xTaskGetSchedulerState+0x34>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	e008      	b.n	8003c0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <xTaskGetSchedulerState+0x38>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d102      	bne.n	8003c06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c00:	2302      	movs	r3, #2
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	e001      	b.n	8003c0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c0a:	687b      	ldr	r3, [r7, #4]
	}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	20000454 	.word	0x20000454
 8003c1c:	20000470 	.word	0x20000470

08003c20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d05e      	beq.n	8003cf4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <xTaskPriorityInherit+0xe0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d24e      	bcs.n	8003ce2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	db06      	blt.n	8003c5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	; (8003d00 <xTaskPriorityInherit+0xe0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	f1c3 0207 	rsb	r2, r3, #7
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6959      	ldr	r1, [r3, #20]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a26      	ldr	r2, [pc, #152]	; (8003d04 <xTaskPriorityInherit+0xe4>)
 8003c6c:	4413      	add	r3, r2
 8003c6e:	4299      	cmp	r1, r3
 8003c70:	d12f      	bne.n	8003cd2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fddd 	bl	8002836 <uxListRemove>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <xTaskPriorityInherit+0xe8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4013      	ands	r3, r2
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <xTaskPriorityInherit+0xe8>)
 8003c96:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <xTaskPriorityInherit+0xe0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <xTaskPriorityInherit+0xe8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <xTaskPriorityInherit+0xe8>)
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <xTaskPriorityInherit+0xe4>)
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f7fe fd56 	bl	800277c <vListInsertEnd>
 8003cd0:	e004      	b.n	8003cdc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <xTaskPriorityInherit+0xe0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e008      	b.n	8003cf4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <xTaskPriorityInherit+0xe0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d201      	bcs.n	8003cf4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
	}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000348 	.word	0x20000348
 8003d04:	2000034c 	.word	0x2000034c
 8003d08:	20000450 	.word	0x20000450

08003d0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d06e      	beq.n	8003e00 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d22:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <xTaskPriorityDisinherit+0x100>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d00a      	beq.n	8003d42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60fb      	str	r3, [r7, #12]
}
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	60bb      	str	r3, [r7, #8]
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d044      	beq.n	8003e00 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d140      	bne.n	8003e00 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fd57 	bl	8002836 <uxListRemove>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d115      	bne.n	8003dba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d92:	491f      	ldr	r1, [pc, #124]	; (8003e10 <xTaskPriorityDisinherit+0x104>)
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <xTaskPriorityDisinherit+0xae>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	2201      	movs	r2, #1
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43da      	mvns	r2, r3
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <xTaskPriorityDisinherit+0x108>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4013      	ands	r3, r2
 8003db6:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <xTaskPriorityDisinherit+0x108>)
 8003db8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f1c3 0207 	rsb	r2, r3, #7
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <xTaskPriorityDisinherit+0x108>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <xTaskPriorityDisinherit+0x108>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4a08      	ldr	r2, [pc, #32]	; (8003e10 <xTaskPriorityDisinherit+0x104>)
 8003dee:	441a      	add	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7fe fcc0 	bl	800277c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e00:	697b      	ldr	r3, [r7, #20]
	}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000348 	.word	0x20000348
 8003e10:	2000034c 	.word	0x2000034c
 8003e14:	20000450 	.word	0x20000450

08003e18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d077      	beq.n	8003f20 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	60fb      	str	r3, [r7, #12]
}
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d902      	bls.n	8003e5e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	e002      	b.n	8003e64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d058      	beq.n	8003f20 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d153      	bne.n	8003f20 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d10a      	bne.n	8003e98 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	60bb      	str	r3, [r7, #8]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	db04      	blt.n	8003eb6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f1c3 0207 	rsb	r2, r3, #7
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	6959      	ldr	r1, [r3, #20]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003ec6:	4413      	add	r3, r2
 8003ec8:	4299      	cmp	r1, r3
 8003eca:	d129      	bne.n	8003f20 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fcb0 	bl	8002836 <uxListRemove>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4013      	ands	r3, r2
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003ef0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	4a0b      	ldr	r2, [pc, #44]	; (8003f30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003f12:	441a      	add	r2, r3
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f7fe fc2e 	bl	800277c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f20:	bf00      	nop
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000348 	.word	0x20000348
 8003f2c:	2000034c 	.word	0x2000034c
 8003f30:	20000450 	.word	0x20000450

08003f34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003f38:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f46:	3201      	adds	r2, #1
 8003f48:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003f4a:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
	}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	20000348 	.word	0x20000348

08003f5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f66:	4b29      	ldr	r3, [pc, #164]	; (800400c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f6c:	4b28      	ldr	r3, [pc, #160]	; (8004010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fc5f 	bl	8002836 <uxListRemove>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10b      	bne.n	8003f96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	2201      	movs	r2, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43da      	mvns	r2, r3
 8003f8c:	4b21      	ldr	r3, [pc, #132]	; (8004014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4013      	ands	r3, r2
 8003f92:	4a20      	ldr	r2, [pc, #128]	; (8004014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f9c:	d10a      	bne.n	8003fb4 <prvAddCurrentTaskToDelayedList+0x58>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	481a      	ldr	r0, [pc, #104]	; (8004018 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003fae:	f7fe fbe5 	bl	800277c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fb2:	e026      	b.n	8004002 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fbc:	4b14      	ldr	r3, [pc, #80]	; (8004010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d209      	bcs.n	8003fe0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7fe fbf3 	bl	80027c4 <vListInsert>
}
 8003fde:	e010      	b.n	8004002 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7fe fbe9 	bl	80027c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d202      	bcs.n	8004002 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ffc:	4a09      	ldr	r2, [pc, #36]	; (8004024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	6013      	str	r3, [r2, #0]
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	2000044c 	.word	0x2000044c
 8004010:	20000348 	.word	0x20000348
 8004014:	20000450 	.word	0x20000450
 8004018:	20000434 	.word	0x20000434
 800401c:	20000404 	.word	0x20000404
 8004020:	20000400 	.word	0x20000400
 8004024:	20000468 	.word	0x20000468

08004028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b04      	subs	r3, #4
 8004038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3b04      	subs	r3, #4
 8004046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f023 0201 	bic.w	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3b04      	subs	r3, #4
 8004056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004058:	4a0c      	ldr	r2, [pc, #48]	; (800408c <pxPortInitialiseStack+0x64>)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b14      	subs	r3, #20
 8004062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3b04      	subs	r3, #4
 800406e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f06f 0202 	mvn.w	r2, #2
 8004076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3b20      	subs	r3, #32
 800407c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800407e:	68fb      	ldr	r3, [r7, #12]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	08004091 	.word	0x08004091

08004090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <prvTaskExitError+0x54>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a2:	d00a      	beq.n	80040ba <prvTaskExitError+0x2a>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	60fb      	str	r3, [r7, #12]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <prvTaskExitError+0x28>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	60bb      	str	r3, [r7, #8]
}
 80040cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ce:	bf00      	nop
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0fc      	beq.n	80040d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	2000000c 	.word	0x2000000c
	...

080040f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <pxCurrentTCBConst2>)
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fa:	f380 8809 	msr	PSP, r0
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8811 	msr	BASEPRI, r0
 800410a:	4770      	bx	lr
 800410c:	f3af 8000 	nop.w

08004110 <pxCurrentTCBConst2>:
 8004110:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004118:	4808      	ldr	r0, [pc, #32]	; (800413c <prvPortStartFirstTask+0x24>)
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	6800      	ldr	r0, [r0, #0]
 800411e:	f380 8808 	msr	MSP, r0
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8814 	msr	CONTROL, r0
 800412a:	b662      	cpsie	i
 800412c:	b661      	cpsie	f
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	df00      	svc	0
 8004138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800413a:	bf00      	nop
 800413c:	e000ed08 	.word	0xe000ed08

08004140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004146:	4b46      	ldr	r3, [pc, #280]	; (8004260 <xPortStartScheduler+0x120>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a46      	ldr	r2, [pc, #280]	; (8004264 <xPortStartScheduler+0x124>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10a      	bne.n	8004166 <xPortStartScheduler+0x26>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	613b      	str	r3, [r7, #16]
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <xPortStartScheduler+0x120>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a3f      	ldr	r2, [pc, #252]	; (8004268 <xPortStartScheduler+0x128>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10a      	bne.n	8004186 <xPortStartScheduler+0x46>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	60fb      	str	r3, [r7, #12]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <xPortStartScheduler+0x12c>)
 8004188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	22ff      	movs	r2, #255	; 0xff
 8004196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4b31      	ldr	r3, [pc, #196]	; (8004270 <xPortStartScheduler+0x130>)
 80041ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <xPortStartScheduler+0x134>)
 80041b0:	2207      	movs	r2, #7
 80041b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041b4:	e009      	b.n	80041ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <xPortStartScheduler+0x134>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <xPortStartScheduler+0x134>)
 80041be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b80      	cmp	r3, #128	; 0x80
 80041d4:	d0ef      	beq.n	80041b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041d6:	4b27      	ldr	r3, [pc, #156]	; (8004274 <xPortStartScheduler+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1c3 0307 	rsb	r3, r3, #7
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d00a      	beq.n	80041f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60bb      	str	r3, [r7, #8]
}
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041f8:	4b1e      	ldr	r3, [pc, #120]	; (8004274 <xPortStartScheduler+0x134>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	4a1d      	ldr	r2, [pc, #116]	; (8004274 <xPortStartScheduler+0x134>)
 8004200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <xPortStartScheduler+0x134>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <xPortStartScheduler+0x134>)
 800420c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <xPortStartScheduler+0x138>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <xPortStartScheduler+0x138>)
 800421c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <xPortStartScheduler+0x138>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a14      	ldr	r2, [pc, #80]	; (8004278 <xPortStartScheduler+0x138>)
 8004228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800422c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800422e:	f000 f8dd 	bl	80043ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <xPortStartScheduler+0x13c>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004238:	f000 f8fc 	bl	8004434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800423c:	4b10      	ldr	r3, [pc, #64]	; (8004280 <xPortStartScheduler+0x140>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0f      	ldr	r2, [pc, #60]	; (8004280 <xPortStartScheduler+0x140>)
 8004242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004248:	f7ff ff66 	bl	8004118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800424c:	f7ff fa8e 	bl	800376c <vTaskSwitchContext>
	prvTaskExitError();
 8004250:	f7ff ff1e 	bl	8004090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000ed00 	.word	0xe000ed00
 8004264:	410fc271 	.word	0x410fc271
 8004268:	410fc270 	.word	0x410fc270
 800426c:	e000e400 	.word	0xe000e400
 8004270:	20000474 	.word	0x20000474
 8004274:	20000478 	.word	0x20000478
 8004278:	e000ed20 	.word	0xe000ed20
 800427c:	2000000c 	.word	0x2000000c
 8004280:	e000ef34 	.word	0xe000ef34

08004284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	607b      	str	r3, [r7, #4]
}
 800429c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <vPortEnterCritical+0x58>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3301      	adds	r3, #1
 80042a4:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <vPortEnterCritical+0x58>)
 80042a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <vPortEnterCritical+0x58>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d10f      	bne.n	80042d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <vPortEnterCritical+0x5c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	603b      	str	r3, [r7, #0]
}
 80042cc:	bf00      	nop
 80042ce:	e7fe      	b.n	80042ce <vPortEnterCritical+0x4a>
	}
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	2000000c 	.word	0x2000000c
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042ea:	4b12      	ldr	r3, [pc, #72]	; (8004334 <vPortExitCritical+0x50>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <vPortExitCritical+0x24>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	607b      	str	r3, [r7, #4]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <vPortExitCritical+0x50>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3b01      	subs	r3, #1
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <vPortExitCritical+0x50>)
 8004310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <vPortExitCritical+0x50>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <vPortExitCritical+0x42>
 800431a:	2300      	movs	r3, #0
 800431c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c
	...

08004340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004340:	f3ef 8009 	mrs	r0, PSP
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <pxCurrentTCBConst>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	f01e 0f10 	tst.w	lr, #16
 8004350:	bf08      	it	eq
 8004352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435a:	6010      	str	r0, [r2, #0]
 800435c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004364:	f380 8811 	msr	BASEPRI, r0
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f7ff f9fc 	bl	800376c <vTaskSwitchContext>
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f380 8811 	msr	BASEPRI, r0
 800437c:	bc09      	pop	{r0, r3}
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	6808      	ldr	r0, [r1, #0]
 8004382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004386:	f01e 0f10 	tst.w	lr, #16
 800438a:	bf08      	it	eq
 800438c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004390:	f380 8809 	msr	PSP, r0
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst>:
 80043a0:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	607b      	str	r3, [r7, #4]
}
 80043c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043c2:	f7ff f91b 	bl	80035fc <xTaskIncrementTick>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <xPortSysTickHandler+0x40>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	2300      	movs	r3, #0
 80043d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f383 8811 	msr	BASEPRI, r3
}
 80043de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <vPortSetupTimerInterrupt+0x34>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <vPortSetupTimerInterrupt+0x38>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <vPortSetupTimerInterrupt+0x3c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a0a      	ldr	r2, [pc, #40]	; (800442c <vPortSetupTimerInterrupt+0x40>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	4a09      	ldr	r2, [pc, #36]	; (8004430 <vPortSetupTimerInterrupt+0x44>)
 800440a:	3b01      	subs	r3, #1
 800440c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <vPortSetupTimerInterrupt+0x34>)
 8004410:	2207      	movs	r2, #7
 8004412:	601a      	str	r2, [r3, #0]
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	e000e010 	.word	0xe000e010
 8004424:	e000e018 	.word	0xe000e018
 8004428:	20000000 	.word	0x20000000
 800442c:	10624dd3 	.word	0x10624dd3
 8004430:	e000e014 	.word	0xe000e014

08004434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004444 <vPortEnableVFP+0x10>
 8004438:	6801      	ldr	r1, [r0, #0]
 800443a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800443e:	6001      	str	r1, [r0, #0]
 8004440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004442:	bf00      	nop
 8004444:	e000ed88 	.word	0xe000ed88

08004448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004454:	f7ff f818 	bl	8003488 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004458:	4b5b      	ldr	r3, [pc, #364]	; (80045c8 <pvPortMalloc+0x180>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004460:	f000 f920 	bl	80046a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <pvPortMalloc+0x184>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 8093 	bne.w	8004598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01d      	beq.n	80044b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004478:	2208      	movs	r2, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	2b00      	cmp	r3, #0
 8004488:	d014      	beq.n	80044b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f023 0307 	bic.w	r3, r3, #7
 8004490:	3308      	adds	r3, #8
 8004492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <pvPortMalloc+0x6c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	617b      	str	r3, [r7, #20]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d06e      	beq.n	8004598 <pvPortMalloc+0x150>
 80044ba:	4b45      	ldr	r3, [pc, #276]	; (80045d0 <pvPortMalloc+0x188>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d869      	bhi.n	8004598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044c4:	4b43      	ldr	r3, [pc, #268]	; (80045d4 <pvPortMalloc+0x18c>)
 80044c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044c8:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <pvPortMalloc+0x18c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044ce:	e004      	b.n	80044da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d903      	bls.n	80044ec <pvPortMalloc+0xa4>
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f1      	bne.n	80044d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <pvPortMalloc+0x180>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d050      	beq.n	8004598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2208      	movs	r2, #8
 80044fc:	4413      	add	r3, r2
 80044fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	1ad2      	subs	r2, r2, r3
 8004510:	2308      	movs	r3, #8
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	429a      	cmp	r2, r3
 8004516:	d91f      	bls.n	8004558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <pvPortMalloc+0xf8>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	613b      	str	r3, [r7, #16]
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1ad2      	subs	r2, r2, r3
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004552:	69b8      	ldr	r0, [r7, #24]
 8004554:	f000 f908 	bl	8004768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <pvPortMalloc+0x188>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <pvPortMalloc+0x188>)
 8004564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004566:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <pvPortMalloc+0x188>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <pvPortMalloc+0x190>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d203      	bcs.n	800457a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004572:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <pvPortMalloc+0x188>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <pvPortMalloc+0x190>)
 8004578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <pvPortMalloc+0x184>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	431a      	orrs	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <pvPortMalloc+0x194>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3301      	adds	r3, #1
 8004594:	4a11      	ldr	r2, [pc, #68]	; (80045dc <pvPortMalloc+0x194>)
 8004596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004598:	f7fe ff84 	bl	80034a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <pvPortMalloc+0x174>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	60fb      	str	r3, [r7, #12]
}
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <pvPortMalloc+0x172>
	return pvReturn;
 80045bc:	69fb      	ldr	r3, [r7, #28]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3728      	adds	r7, #40	; 0x28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20004084 	.word	0x20004084
 80045cc:	20004098 	.word	0x20004098
 80045d0:	20004088 	.word	0x20004088
 80045d4:	2000407c 	.word	0x2000407c
 80045d8:	2000408c 	.word	0x2000408c
 80045dc:	20004090 	.word	0x20004090

080045e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04d      	beq.n	800468e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045f2:	2308      	movs	r3, #8
 80045f4:	425b      	negs	r3, r3
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4413      	add	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4b24      	ldr	r3, [pc, #144]	; (8004698 <vPortFree+0xb8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <vPortFree+0x44>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60fb      	str	r3, [r7, #12]
}
 8004620:	bf00      	nop
 8004622:	e7fe      	b.n	8004622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <vPortFree+0x62>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	60bb      	str	r3, [r7, #8]
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	4b14      	ldr	r3, [pc, #80]	; (8004698 <vPortFree+0xb8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01e      	beq.n	800468e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d11a      	bne.n	800468e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <vPortFree+0xb8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004668:	f7fe ff0e 	bl	8003488 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <vPortFree+0xbc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4413      	add	r3, r2
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <vPortFree+0xbc>)
 8004678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800467a:	6938      	ldr	r0, [r7, #16]
 800467c:	f000 f874 	bl	8004768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <vPortFree+0xc0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	4a06      	ldr	r2, [pc, #24]	; (80046a0 <vPortFree+0xc0>)
 8004688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800468a:	f7fe ff0b 	bl	80034a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20004098 	.word	0x20004098
 800469c:	20004088 	.word	0x20004088
 80046a0:	20004094 	.word	0x20004094

080046a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80046ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046b0:	4b27      	ldr	r3, [pc, #156]	; (8004750 <prvHeapInit+0xac>)
 80046b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00c      	beq.n	80046d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3307      	adds	r3, #7
 80046c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0307 	bic.w	r3, r3, #7
 80046ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <prvHeapInit+0xac>)
 80046d4:	4413      	add	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046dc:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <prvHeapInit+0xb0>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046e2:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <prvHeapInit+0xb0>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4413      	add	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046f0:	2208      	movs	r2, #8
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0307 	bic.w	r3, r3, #7
 80046fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <prvHeapInit+0xb4>)
 8004704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004706:	4b14      	ldr	r3, [pc, #80]	; (8004758 <prvHeapInit+0xb4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <prvHeapInit+0xb4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <prvHeapInit+0xb4>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	4a0a      	ldr	r2, [pc, #40]	; (800475c <prvHeapInit+0xb8>)
 8004732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	4a09      	ldr	r2, [pc, #36]	; (8004760 <prvHeapInit+0xbc>)
 800473a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <prvHeapInit+0xc0>)
 800473e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004742:	601a      	str	r2, [r3, #0]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	2000047c 	.word	0x2000047c
 8004754:	2000407c 	.word	0x2000407c
 8004758:	20004084 	.word	0x20004084
 800475c:	2000408c 	.word	0x2000408c
 8004760:	20004088 	.word	0x20004088
 8004764:	20004098 	.word	0x20004098

08004768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004770:	4b28      	ldr	r3, [pc, #160]	; (8004814 <prvInsertBlockIntoFreeList+0xac>)
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e002      	b.n	800477c <prvInsertBlockIntoFreeList+0x14>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	429a      	cmp	r2, r3
 8004784:	d8f7      	bhi.n	8004776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	4413      	add	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d108      	bne.n	80047aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	441a      	add	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	441a      	add	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d118      	bne.n	80047f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <prvInsertBlockIntoFreeList+0xb0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d00d      	beq.n	80047e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	441a      	add	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e008      	b.n	80047f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <prvInsertBlockIntoFreeList+0xb0>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e003      	b.n	80047f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d002      	beq.n	8004806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000407c 	.word	0x2000407c
 8004818:	20004084 	.word	0x20004084

0800481c <__errno>:
 800481c:	4b01      	ldr	r3, [pc, #4]	; (8004824 <__errno+0x8>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000010 	.word	0x20000010

08004828 <__libc_init_array>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4d0d      	ldr	r5, [pc, #52]	; (8004860 <__libc_init_array+0x38>)
 800482c:	4c0d      	ldr	r4, [pc, #52]	; (8004864 <__libc_init_array+0x3c>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	2600      	movs	r6, #0
 8004834:	42a6      	cmp	r6, r4
 8004836:	d109      	bne.n	800484c <__libc_init_array+0x24>
 8004838:	4d0b      	ldr	r5, [pc, #44]	; (8004868 <__libc_init_array+0x40>)
 800483a:	4c0c      	ldr	r4, [pc, #48]	; (800486c <__libc_init_array+0x44>)
 800483c:	f000 fc8e 	bl	800515c <_init>
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	2600      	movs	r6, #0
 8004846:	42a6      	cmp	r6, r4
 8004848:	d105      	bne.n	8004856 <__libc_init_array+0x2e>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004850:	4798      	blx	r3
 8004852:	3601      	adds	r6, #1
 8004854:	e7ee      	b.n	8004834 <__libc_init_array+0xc>
 8004856:	f855 3b04 	ldr.w	r3, [r5], #4
 800485a:	4798      	blx	r3
 800485c:	3601      	adds	r6, #1
 800485e:	e7f2      	b.n	8004846 <__libc_init_array+0x1e>
 8004860:	0800535c 	.word	0x0800535c
 8004864:	0800535c 	.word	0x0800535c
 8004868:	0800535c 	.word	0x0800535c
 800486c:	08005360 	.word	0x08005360

08004870 <memcpy>:
 8004870:	440a      	add	r2, r1
 8004872:	4291      	cmp	r1, r2
 8004874:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004878:	d100      	bne.n	800487c <memcpy+0xc>
 800487a:	4770      	bx	lr
 800487c:	b510      	push	{r4, lr}
 800487e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004886:	4291      	cmp	r1, r2
 8004888:	d1f9      	bne.n	800487e <memcpy+0xe>
 800488a:	bd10      	pop	{r4, pc}

0800488c <memset>:
 800488c:	4402      	add	r2, r0
 800488e:	4603      	mov	r3, r0
 8004890:	4293      	cmp	r3, r2
 8004892:	d100      	bne.n	8004896 <memset+0xa>
 8004894:	4770      	bx	lr
 8004896:	f803 1b01 	strb.w	r1, [r3], #1
 800489a:	e7f9      	b.n	8004890 <memset+0x4>

0800489c <siprintf>:
 800489c:	b40e      	push	{r1, r2, r3}
 800489e:	b500      	push	{lr}
 80048a0:	b09c      	sub	sp, #112	; 0x70
 80048a2:	ab1d      	add	r3, sp, #116	; 0x74
 80048a4:	9002      	str	r0, [sp, #8]
 80048a6:	9006      	str	r0, [sp, #24]
 80048a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048ac:	4809      	ldr	r0, [pc, #36]	; (80048d4 <siprintf+0x38>)
 80048ae:	9107      	str	r1, [sp, #28]
 80048b0:	9104      	str	r1, [sp, #16]
 80048b2:	4909      	ldr	r1, [pc, #36]	; (80048d8 <siprintf+0x3c>)
 80048b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b8:	9105      	str	r1, [sp, #20]
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	a902      	add	r1, sp, #8
 80048c0:	f000 f868 	bl	8004994 <_svfiprintf_r>
 80048c4:	9b02      	ldr	r3, [sp, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	b01c      	add	sp, #112	; 0x70
 80048cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048d0:	b003      	add	sp, #12
 80048d2:	4770      	bx	lr
 80048d4:	20000010 	.word	0x20000010
 80048d8:	ffff0208 	.word	0xffff0208

080048dc <__ssputs_r>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	688e      	ldr	r6, [r1, #8]
 80048e2:	429e      	cmp	r6, r3
 80048e4:	4682      	mov	sl, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	4690      	mov	r8, r2
 80048ea:	461f      	mov	r7, r3
 80048ec:	d838      	bhi.n	8004960 <__ssputs_r+0x84>
 80048ee:	898a      	ldrh	r2, [r1, #12]
 80048f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048f4:	d032      	beq.n	800495c <__ssputs_r+0x80>
 80048f6:	6825      	ldr	r5, [r4, #0]
 80048f8:	6909      	ldr	r1, [r1, #16]
 80048fa:	eba5 0901 	sub.w	r9, r5, r1
 80048fe:	6965      	ldr	r5, [r4, #20]
 8004900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004908:	3301      	adds	r3, #1
 800490a:	444b      	add	r3, r9
 800490c:	106d      	asrs	r5, r5, #1
 800490e:	429d      	cmp	r5, r3
 8004910:	bf38      	it	cc
 8004912:	461d      	movcc	r5, r3
 8004914:	0553      	lsls	r3, r2, #21
 8004916:	d531      	bpl.n	800497c <__ssputs_r+0xa0>
 8004918:	4629      	mov	r1, r5
 800491a:	f000 fb55 	bl	8004fc8 <_malloc_r>
 800491e:	4606      	mov	r6, r0
 8004920:	b950      	cbnz	r0, 8004938 <__ssputs_r+0x5c>
 8004922:	230c      	movs	r3, #12
 8004924:	f8ca 3000 	str.w	r3, [sl]
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004938:	6921      	ldr	r1, [r4, #16]
 800493a:	464a      	mov	r2, r9
 800493c:	f7ff ff98 	bl	8004870 <memcpy>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494a:	81a3      	strh	r3, [r4, #12]
 800494c:	6126      	str	r6, [r4, #16]
 800494e:	6165      	str	r5, [r4, #20]
 8004950:	444e      	add	r6, r9
 8004952:	eba5 0509 	sub.w	r5, r5, r9
 8004956:	6026      	str	r6, [r4, #0]
 8004958:	60a5      	str	r5, [r4, #8]
 800495a:	463e      	mov	r6, r7
 800495c:	42be      	cmp	r6, r7
 800495e:	d900      	bls.n	8004962 <__ssputs_r+0x86>
 8004960:	463e      	mov	r6, r7
 8004962:	6820      	ldr	r0, [r4, #0]
 8004964:	4632      	mov	r2, r6
 8004966:	4641      	mov	r1, r8
 8004968:	f000 faa8 	bl	8004ebc <memmove>
 800496c:	68a3      	ldr	r3, [r4, #8]
 800496e:	1b9b      	subs	r3, r3, r6
 8004970:	60a3      	str	r3, [r4, #8]
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	4433      	add	r3, r6
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	2000      	movs	r0, #0
 800497a:	e7db      	b.n	8004934 <__ssputs_r+0x58>
 800497c:	462a      	mov	r2, r5
 800497e:	f000 fb97 	bl	80050b0 <_realloc_r>
 8004982:	4606      	mov	r6, r0
 8004984:	2800      	cmp	r0, #0
 8004986:	d1e1      	bne.n	800494c <__ssputs_r+0x70>
 8004988:	6921      	ldr	r1, [r4, #16]
 800498a:	4650      	mov	r0, sl
 800498c:	f000 fab0 	bl	8004ef0 <_free_r>
 8004990:	e7c7      	b.n	8004922 <__ssputs_r+0x46>
	...

08004994 <_svfiprintf_r>:
 8004994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004998:	4698      	mov	r8, r3
 800499a:	898b      	ldrh	r3, [r1, #12]
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	b09d      	sub	sp, #116	; 0x74
 80049a0:	4607      	mov	r7, r0
 80049a2:	460d      	mov	r5, r1
 80049a4:	4614      	mov	r4, r2
 80049a6:	d50e      	bpl.n	80049c6 <_svfiprintf_r+0x32>
 80049a8:	690b      	ldr	r3, [r1, #16]
 80049aa:	b963      	cbnz	r3, 80049c6 <_svfiprintf_r+0x32>
 80049ac:	2140      	movs	r1, #64	; 0x40
 80049ae:	f000 fb0b 	bl	8004fc8 <_malloc_r>
 80049b2:	6028      	str	r0, [r5, #0]
 80049b4:	6128      	str	r0, [r5, #16]
 80049b6:	b920      	cbnz	r0, 80049c2 <_svfiprintf_r+0x2e>
 80049b8:	230c      	movs	r3, #12
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049c0:	e0d1      	b.n	8004b66 <_svfiprintf_r+0x1d2>
 80049c2:	2340      	movs	r3, #64	; 0x40
 80049c4:	616b      	str	r3, [r5, #20]
 80049c6:	2300      	movs	r3, #0
 80049c8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ca:	2320      	movs	r3, #32
 80049cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80049d4:	2330      	movs	r3, #48	; 0x30
 80049d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b80 <_svfiprintf_r+0x1ec>
 80049da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049de:	f04f 0901 	mov.w	r9, #1
 80049e2:	4623      	mov	r3, r4
 80049e4:	469a      	mov	sl, r3
 80049e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ea:	b10a      	cbz	r2, 80049f0 <_svfiprintf_r+0x5c>
 80049ec:	2a25      	cmp	r2, #37	; 0x25
 80049ee:	d1f9      	bne.n	80049e4 <_svfiprintf_r+0x50>
 80049f0:	ebba 0b04 	subs.w	fp, sl, r4
 80049f4:	d00b      	beq.n	8004a0e <_svfiprintf_r+0x7a>
 80049f6:	465b      	mov	r3, fp
 80049f8:	4622      	mov	r2, r4
 80049fa:	4629      	mov	r1, r5
 80049fc:	4638      	mov	r0, r7
 80049fe:	f7ff ff6d 	bl	80048dc <__ssputs_r>
 8004a02:	3001      	adds	r0, #1
 8004a04:	f000 80aa 	beq.w	8004b5c <_svfiprintf_r+0x1c8>
 8004a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a0a:	445a      	add	r2, fp
 8004a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80a2 	beq.w	8004b5c <_svfiprintf_r+0x1c8>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a22:	f10a 0a01 	add.w	sl, sl, #1
 8004a26:	9304      	str	r3, [sp, #16]
 8004a28:	9307      	str	r3, [sp, #28]
 8004a2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a2e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a30:	4654      	mov	r4, sl
 8004a32:	2205      	movs	r2, #5
 8004a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a38:	4851      	ldr	r0, [pc, #324]	; (8004b80 <_svfiprintf_r+0x1ec>)
 8004a3a:	f7fb fbf9 	bl	8000230 <memchr>
 8004a3e:	9a04      	ldr	r2, [sp, #16]
 8004a40:	b9d8      	cbnz	r0, 8004a7a <_svfiprintf_r+0xe6>
 8004a42:	06d0      	lsls	r0, r2, #27
 8004a44:	bf44      	itt	mi
 8004a46:	2320      	movmi	r3, #32
 8004a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a4c:	0711      	lsls	r1, r2, #28
 8004a4e:	bf44      	itt	mi
 8004a50:	232b      	movmi	r3, #43	; 0x2b
 8004a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a56:	f89a 3000 	ldrb.w	r3, [sl]
 8004a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5c:	d015      	beq.n	8004a8a <_svfiprintf_r+0xf6>
 8004a5e:	9a07      	ldr	r2, [sp, #28]
 8004a60:	4654      	mov	r4, sl
 8004a62:	2000      	movs	r0, #0
 8004a64:	f04f 0c0a 	mov.w	ip, #10
 8004a68:	4621      	mov	r1, r4
 8004a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a6e:	3b30      	subs	r3, #48	; 0x30
 8004a70:	2b09      	cmp	r3, #9
 8004a72:	d94e      	bls.n	8004b12 <_svfiprintf_r+0x17e>
 8004a74:	b1b0      	cbz	r0, 8004aa4 <_svfiprintf_r+0x110>
 8004a76:	9207      	str	r2, [sp, #28]
 8004a78:	e014      	b.n	8004aa4 <_svfiprintf_r+0x110>
 8004a7a:	eba0 0308 	sub.w	r3, r0, r8
 8004a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a82:	4313      	orrs	r3, r2
 8004a84:	9304      	str	r3, [sp, #16]
 8004a86:	46a2      	mov	sl, r4
 8004a88:	e7d2      	b.n	8004a30 <_svfiprintf_r+0x9c>
 8004a8a:	9b03      	ldr	r3, [sp, #12]
 8004a8c:	1d19      	adds	r1, r3, #4
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	9103      	str	r1, [sp, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bfbb      	ittet	lt
 8004a96:	425b      	neglt	r3, r3
 8004a98:	f042 0202 	orrlt.w	r2, r2, #2
 8004a9c:	9307      	strge	r3, [sp, #28]
 8004a9e:	9307      	strlt	r3, [sp, #28]
 8004aa0:	bfb8      	it	lt
 8004aa2:	9204      	strlt	r2, [sp, #16]
 8004aa4:	7823      	ldrb	r3, [r4, #0]
 8004aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8004aa8:	d10c      	bne.n	8004ac4 <_svfiprintf_r+0x130>
 8004aaa:	7863      	ldrb	r3, [r4, #1]
 8004aac:	2b2a      	cmp	r3, #42	; 0x2a
 8004aae:	d135      	bne.n	8004b1c <_svfiprintf_r+0x188>
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	9203      	str	r2, [sp, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bfb8      	it	lt
 8004abc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ac0:	3402      	adds	r4, #2
 8004ac2:	9305      	str	r3, [sp, #20]
 8004ac4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b90 <_svfiprintf_r+0x1fc>
 8004ac8:	7821      	ldrb	r1, [r4, #0]
 8004aca:	2203      	movs	r2, #3
 8004acc:	4650      	mov	r0, sl
 8004ace:	f7fb fbaf 	bl	8000230 <memchr>
 8004ad2:	b140      	cbz	r0, 8004ae6 <_svfiprintf_r+0x152>
 8004ad4:	2340      	movs	r3, #64	; 0x40
 8004ad6:	eba0 000a 	sub.w	r0, r0, sl
 8004ada:	fa03 f000 	lsl.w	r0, r3, r0
 8004ade:	9b04      	ldr	r3, [sp, #16]
 8004ae0:	4303      	orrs	r3, r0
 8004ae2:	3401      	adds	r4, #1
 8004ae4:	9304      	str	r3, [sp, #16]
 8004ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aea:	4826      	ldr	r0, [pc, #152]	; (8004b84 <_svfiprintf_r+0x1f0>)
 8004aec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004af0:	2206      	movs	r2, #6
 8004af2:	f7fb fb9d 	bl	8000230 <memchr>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d038      	beq.n	8004b6c <_svfiprintf_r+0x1d8>
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <_svfiprintf_r+0x1f4>)
 8004afc:	bb1b      	cbnz	r3, 8004b46 <_svfiprintf_r+0x1b2>
 8004afe:	9b03      	ldr	r3, [sp, #12]
 8004b00:	3307      	adds	r3, #7
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	3308      	adds	r3, #8
 8004b08:	9303      	str	r3, [sp, #12]
 8004b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0c:	4433      	add	r3, r6
 8004b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b10:	e767      	b.n	80049e2 <_svfiprintf_r+0x4e>
 8004b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b16:	460c      	mov	r4, r1
 8004b18:	2001      	movs	r0, #1
 8004b1a:	e7a5      	b.n	8004a68 <_svfiprintf_r+0xd4>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	3401      	adds	r4, #1
 8004b20:	9305      	str	r3, [sp, #20]
 8004b22:	4619      	mov	r1, r3
 8004b24:	f04f 0c0a 	mov.w	ip, #10
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b2e:	3a30      	subs	r2, #48	; 0x30
 8004b30:	2a09      	cmp	r2, #9
 8004b32:	d903      	bls.n	8004b3c <_svfiprintf_r+0x1a8>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0c5      	beq.n	8004ac4 <_svfiprintf_r+0x130>
 8004b38:	9105      	str	r1, [sp, #20]
 8004b3a:	e7c3      	b.n	8004ac4 <_svfiprintf_r+0x130>
 8004b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b40:	4604      	mov	r4, r0
 8004b42:	2301      	movs	r3, #1
 8004b44:	e7f0      	b.n	8004b28 <_svfiprintf_r+0x194>
 8004b46:	ab03      	add	r3, sp, #12
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	462a      	mov	r2, r5
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <_svfiprintf_r+0x1f8>)
 8004b4e:	a904      	add	r1, sp, #16
 8004b50:	4638      	mov	r0, r7
 8004b52:	f3af 8000 	nop.w
 8004b56:	1c42      	adds	r2, r0, #1
 8004b58:	4606      	mov	r6, r0
 8004b5a:	d1d6      	bne.n	8004b0a <_svfiprintf_r+0x176>
 8004b5c:	89ab      	ldrh	r3, [r5, #12]
 8004b5e:	065b      	lsls	r3, r3, #25
 8004b60:	f53f af2c 	bmi.w	80049bc <_svfiprintf_r+0x28>
 8004b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b66:	b01d      	add	sp, #116	; 0x74
 8004b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6c:	ab03      	add	r3, sp, #12
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	462a      	mov	r2, r5
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <_svfiprintf_r+0x1f8>)
 8004b74:	a904      	add	r1, sp, #16
 8004b76:	4638      	mov	r0, r7
 8004b78:	f000 f87a 	bl	8004c70 <_printf_i>
 8004b7c:	e7eb      	b.n	8004b56 <_svfiprintf_r+0x1c2>
 8004b7e:	bf00      	nop
 8004b80:	08005320 	.word	0x08005320
 8004b84:	0800532a 	.word	0x0800532a
 8004b88:	00000000 	.word	0x00000000
 8004b8c:	080048dd 	.word	0x080048dd
 8004b90:	08005326 	.word	0x08005326

08004b94 <_printf_common>:
 8004b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b98:	4616      	mov	r6, r2
 8004b9a:	4699      	mov	r9, r3
 8004b9c:	688a      	ldr	r2, [r1, #8]
 8004b9e:	690b      	ldr	r3, [r1, #16]
 8004ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	bfb8      	it	lt
 8004ba8:	4613      	movlt	r3, r2
 8004baa:	6033      	str	r3, [r6, #0]
 8004bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	b10a      	cbz	r2, 8004bba <_printf_common+0x26>
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	6033      	str	r3, [r6, #0]
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	0699      	lsls	r1, r3, #26
 8004bbe:	bf42      	ittt	mi
 8004bc0:	6833      	ldrmi	r3, [r6, #0]
 8004bc2:	3302      	addmi	r3, #2
 8004bc4:	6033      	strmi	r3, [r6, #0]
 8004bc6:	6825      	ldr	r5, [r4, #0]
 8004bc8:	f015 0506 	ands.w	r5, r5, #6
 8004bcc:	d106      	bne.n	8004bdc <_printf_common+0x48>
 8004bce:	f104 0a19 	add.w	sl, r4, #25
 8004bd2:	68e3      	ldr	r3, [r4, #12]
 8004bd4:	6832      	ldr	r2, [r6, #0]
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	42ab      	cmp	r3, r5
 8004bda:	dc26      	bgt.n	8004c2a <_printf_common+0x96>
 8004bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004be0:	1e13      	subs	r3, r2, #0
 8004be2:	6822      	ldr	r2, [r4, #0]
 8004be4:	bf18      	it	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	0692      	lsls	r2, r2, #26
 8004bea:	d42b      	bmi.n	8004c44 <_printf_common+0xb0>
 8004bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	47c0      	blx	r8
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d01e      	beq.n	8004c38 <_printf_common+0xa4>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	68e5      	ldr	r5, [r4, #12]
 8004bfe:	6832      	ldr	r2, [r6, #0]
 8004c00:	f003 0306 	and.w	r3, r3, #6
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	bf08      	it	eq
 8004c08:	1aad      	subeq	r5, r5, r2
 8004c0a:	68a3      	ldr	r3, [r4, #8]
 8004c0c:	6922      	ldr	r2, [r4, #16]
 8004c0e:	bf0c      	ite	eq
 8004c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c14:	2500      	movne	r5, #0
 8004c16:	4293      	cmp	r3, r2
 8004c18:	bfc4      	itt	gt
 8004c1a:	1a9b      	subgt	r3, r3, r2
 8004c1c:	18ed      	addgt	r5, r5, r3
 8004c1e:	2600      	movs	r6, #0
 8004c20:	341a      	adds	r4, #26
 8004c22:	42b5      	cmp	r5, r6
 8004c24:	d11a      	bne.n	8004c5c <_printf_common+0xc8>
 8004c26:	2000      	movs	r0, #0
 8004c28:	e008      	b.n	8004c3c <_printf_common+0xa8>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4652      	mov	r2, sl
 8004c2e:	4649      	mov	r1, r9
 8004c30:	4638      	mov	r0, r7
 8004c32:	47c0      	blx	r8
 8004c34:	3001      	adds	r0, #1
 8004c36:	d103      	bne.n	8004c40 <_printf_common+0xac>
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c40:	3501      	adds	r5, #1
 8004c42:	e7c6      	b.n	8004bd2 <_printf_common+0x3e>
 8004c44:	18e1      	adds	r1, r4, r3
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	2030      	movs	r0, #48	; 0x30
 8004c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c4e:	4422      	add	r2, r4
 8004c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c58:	3302      	adds	r3, #2
 8004c5a:	e7c7      	b.n	8004bec <_printf_common+0x58>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4622      	mov	r2, r4
 8004c60:	4649      	mov	r1, r9
 8004c62:	4638      	mov	r0, r7
 8004c64:	47c0      	blx	r8
 8004c66:	3001      	adds	r0, #1
 8004c68:	d0e6      	beq.n	8004c38 <_printf_common+0xa4>
 8004c6a:	3601      	adds	r6, #1
 8004c6c:	e7d9      	b.n	8004c22 <_printf_common+0x8e>
	...

08004c70 <_printf_i>:
 8004c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	7e0f      	ldrb	r7, [r1, #24]
 8004c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c78:	2f78      	cmp	r7, #120	; 0x78
 8004c7a:	4691      	mov	r9, r2
 8004c7c:	4680      	mov	r8, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	469a      	mov	sl, r3
 8004c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c86:	d807      	bhi.n	8004c98 <_printf_i+0x28>
 8004c88:	2f62      	cmp	r7, #98	; 0x62
 8004c8a:	d80a      	bhi.n	8004ca2 <_printf_i+0x32>
 8004c8c:	2f00      	cmp	r7, #0
 8004c8e:	f000 80d8 	beq.w	8004e42 <_printf_i+0x1d2>
 8004c92:	2f58      	cmp	r7, #88	; 0x58
 8004c94:	f000 80a3 	beq.w	8004dde <_printf_i+0x16e>
 8004c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ca0:	e03a      	b.n	8004d18 <_printf_i+0xa8>
 8004ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ca6:	2b15      	cmp	r3, #21
 8004ca8:	d8f6      	bhi.n	8004c98 <_printf_i+0x28>
 8004caa:	a101      	add	r1, pc, #4	; (adr r1, 8004cb0 <_printf_i+0x40>)
 8004cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cb0:	08004d09 	.word	0x08004d09
 8004cb4:	08004d1d 	.word	0x08004d1d
 8004cb8:	08004c99 	.word	0x08004c99
 8004cbc:	08004c99 	.word	0x08004c99
 8004cc0:	08004c99 	.word	0x08004c99
 8004cc4:	08004c99 	.word	0x08004c99
 8004cc8:	08004d1d 	.word	0x08004d1d
 8004ccc:	08004c99 	.word	0x08004c99
 8004cd0:	08004c99 	.word	0x08004c99
 8004cd4:	08004c99 	.word	0x08004c99
 8004cd8:	08004c99 	.word	0x08004c99
 8004cdc:	08004e29 	.word	0x08004e29
 8004ce0:	08004d4d 	.word	0x08004d4d
 8004ce4:	08004e0b 	.word	0x08004e0b
 8004ce8:	08004c99 	.word	0x08004c99
 8004cec:	08004c99 	.word	0x08004c99
 8004cf0:	08004e4b 	.word	0x08004e4b
 8004cf4:	08004c99 	.word	0x08004c99
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004c99 	.word	0x08004c99
 8004d00:	08004c99 	.word	0x08004c99
 8004d04:	08004e13 	.word	0x08004e13
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	1d1a      	adds	r2, r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	602a      	str	r2, [r5, #0]
 8004d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0a3      	b.n	8004e64 <_printf_i+0x1f4>
 8004d1c:	6820      	ldr	r0, [r4, #0]
 8004d1e:	6829      	ldr	r1, [r5, #0]
 8004d20:	0606      	lsls	r6, r0, #24
 8004d22:	f101 0304 	add.w	r3, r1, #4
 8004d26:	d50a      	bpl.n	8004d3e <_printf_i+0xce>
 8004d28:	680e      	ldr	r6, [r1, #0]
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	2e00      	cmp	r6, #0
 8004d2e:	da03      	bge.n	8004d38 <_printf_i+0xc8>
 8004d30:	232d      	movs	r3, #45	; 0x2d
 8004d32:	4276      	negs	r6, r6
 8004d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d38:	485e      	ldr	r0, [pc, #376]	; (8004eb4 <_printf_i+0x244>)
 8004d3a:	230a      	movs	r3, #10
 8004d3c:	e019      	b.n	8004d72 <_printf_i+0x102>
 8004d3e:	680e      	ldr	r6, [r1, #0]
 8004d40:	602b      	str	r3, [r5, #0]
 8004d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d46:	bf18      	it	ne
 8004d48:	b236      	sxthne	r6, r6
 8004d4a:	e7ef      	b.n	8004d2c <_printf_i+0xbc>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	1d19      	adds	r1, r3, #4
 8004d52:	6029      	str	r1, [r5, #0]
 8004d54:	0601      	lsls	r1, r0, #24
 8004d56:	d501      	bpl.n	8004d5c <_printf_i+0xec>
 8004d58:	681e      	ldr	r6, [r3, #0]
 8004d5a:	e002      	b.n	8004d62 <_printf_i+0xf2>
 8004d5c:	0646      	lsls	r6, r0, #25
 8004d5e:	d5fb      	bpl.n	8004d58 <_printf_i+0xe8>
 8004d60:	881e      	ldrh	r6, [r3, #0]
 8004d62:	4854      	ldr	r0, [pc, #336]	; (8004eb4 <_printf_i+0x244>)
 8004d64:	2f6f      	cmp	r7, #111	; 0x6f
 8004d66:	bf0c      	ite	eq
 8004d68:	2308      	moveq	r3, #8
 8004d6a:	230a      	movne	r3, #10
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d72:	6865      	ldr	r5, [r4, #4]
 8004d74:	60a5      	str	r5, [r4, #8]
 8004d76:	2d00      	cmp	r5, #0
 8004d78:	bfa2      	ittt	ge
 8004d7a:	6821      	ldrge	r1, [r4, #0]
 8004d7c:	f021 0104 	bicge.w	r1, r1, #4
 8004d80:	6021      	strge	r1, [r4, #0]
 8004d82:	b90e      	cbnz	r6, 8004d88 <_printf_i+0x118>
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	d04d      	beq.n	8004e24 <_printf_i+0x1b4>
 8004d88:	4615      	mov	r5, r2
 8004d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d92:	5dc7      	ldrb	r7, [r0, r7]
 8004d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d98:	4637      	mov	r7, r6
 8004d9a:	42bb      	cmp	r3, r7
 8004d9c:	460e      	mov	r6, r1
 8004d9e:	d9f4      	bls.n	8004d8a <_printf_i+0x11a>
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d10b      	bne.n	8004dbc <_printf_i+0x14c>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	07de      	lsls	r6, r3, #31
 8004da8:	d508      	bpl.n	8004dbc <_printf_i+0x14c>
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	6861      	ldr	r1, [r4, #4]
 8004dae:	4299      	cmp	r1, r3
 8004db0:	bfde      	ittt	le
 8004db2:	2330      	movle	r3, #48	; 0x30
 8004db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004db8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004dbc:	1b52      	subs	r2, r2, r5
 8004dbe:	6122      	str	r2, [r4, #16]
 8004dc0:	f8cd a000 	str.w	sl, [sp]
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	aa03      	add	r2, sp, #12
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4640      	mov	r0, r8
 8004dcc:	f7ff fee2 	bl	8004b94 <_printf_common>
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d14c      	bne.n	8004e6e <_printf_i+0x1fe>
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd8:	b004      	add	sp, #16
 8004dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dde:	4835      	ldr	r0, [pc, #212]	; (8004eb4 <_printf_i+0x244>)
 8004de0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004de4:	6829      	ldr	r1, [r5, #0]
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dec:	6029      	str	r1, [r5, #0]
 8004dee:	061d      	lsls	r5, r3, #24
 8004df0:	d514      	bpl.n	8004e1c <_printf_i+0x1ac>
 8004df2:	07df      	lsls	r7, r3, #31
 8004df4:	bf44      	itt	mi
 8004df6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dfa:	6023      	strmi	r3, [r4, #0]
 8004dfc:	b91e      	cbnz	r6, 8004e06 <_printf_i+0x196>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	f023 0320 	bic.w	r3, r3, #32
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	2310      	movs	r3, #16
 8004e08:	e7b0      	b.n	8004d6c <_printf_i+0xfc>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f043 0320 	orr.w	r3, r3, #32
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	2378      	movs	r3, #120	; 0x78
 8004e14:	4828      	ldr	r0, [pc, #160]	; (8004eb8 <_printf_i+0x248>)
 8004e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e1a:	e7e3      	b.n	8004de4 <_printf_i+0x174>
 8004e1c:	0659      	lsls	r1, r3, #25
 8004e1e:	bf48      	it	mi
 8004e20:	b2b6      	uxthmi	r6, r6
 8004e22:	e7e6      	b.n	8004df2 <_printf_i+0x182>
 8004e24:	4615      	mov	r5, r2
 8004e26:	e7bb      	b.n	8004da0 <_printf_i+0x130>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	6826      	ldr	r6, [r4, #0]
 8004e2c:	6961      	ldr	r1, [r4, #20]
 8004e2e:	1d18      	adds	r0, r3, #4
 8004e30:	6028      	str	r0, [r5, #0]
 8004e32:	0635      	lsls	r5, r6, #24
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	d501      	bpl.n	8004e3c <_printf_i+0x1cc>
 8004e38:	6019      	str	r1, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <_printf_i+0x1d2>
 8004e3c:	0670      	lsls	r0, r6, #25
 8004e3e:	d5fb      	bpl.n	8004e38 <_printf_i+0x1c8>
 8004e40:	8019      	strh	r1, [r3, #0]
 8004e42:	2300      	movs	r3, #0
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	4615      	mov	r5, r2
 8004e48:	e7ba      	b.n	8004dc0 <_printf_i+0x150>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	1d1a      	adds	r2, r3, #4
 8004e4e:	602a      	str	r2, [r5, #0]
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	6862      	ldr	r2, [r4, #4]
 8004e54:	2100      	movs	r1, #0
 8004e56:	4628      	mov	r0, r5
 8004e58:	f7fb f9ea 	bl	8000230 <memchr>
 8004e5c:	b108      	cbz	r0, 8004e62 <_printf_i+0x1f2>
 8004e5e:	1b40      	subs	r0, r0, r5
 8004e60:	6060      	str	r0, [r4, #4]
 8004e62:	6863      	ldr	r3, [r4, #4]
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	2300      	movs	r3, #0
 8004e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e6c:	e7a8      	b.n	8004dc0 <_printf_i+0x150>
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	462a      	mov	r2, r5
 8004e72:	4649      	mov	r1, r9
 8004e74:	4640      	mov	r0, r8
 8004e76:	47d0      	blx	sl
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d0ab      	beq.n	8004dd4 <_printf_i+0x164>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	079b      	lsls	r3, r3, #30
 8004e80:	d413      	bmi.n	8004eaa <_printf_i+0x23a>
 8004e82:	68e0      	ldr	r0, [r4, #12]
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	4298      	cmp	r0, r3
 8004e88:	bfb8      	it	lt
 8004e8a:	4618      	movlt	r0, r3
 8004e8c:	e7a4      	b.n	8004dd8 <_printf_i+0x168>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4632      	mov	r2, r6
 8004e92:	4649      	mov	r1, r9
 8004e94:	4640      	mov	r0, r8
 8004e96:	47d0      	blx	sl
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d09b      	beq.n	8004dd4 <_printf_i+0x164>
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	68e3      	ldr	r3, [r4, #12]
 8004ea0:	9903      	ldr	r1, [sp, #12]
 8004ea2:	1a5b      	subs	r3, r3, r1
 8004ea4:	42ab      	cmp	r3, r5
 8004ea6:	dcf2      	bgt.n	8004e8e <_printf_i+0x21e>
 8004ea8:	e7eb      	b.n	8004e82 <_printf_i+0x212>
 8004eaa:	2500      	movs	r5, #0
 8004eac:	f104 0619 	add.w	r6, r4, #25
 8004eb0:	e7f5      	b.n	8004e9e <_printf_i+0x22e>
 8004eb2:	bf00      	nop
 8004eb4:	08005331 	.word	0x08005331
 8004eb8:	08005342 	.word	0x08005342

08004ebc <memmove>:
 8004ebc:	4288      	cmp	r0, r1
 8004ebe:	b510      	push	{r4, lr}
 8004ec0:	eb01 0402 	add.w	r4, r1, r2
 8004ec4:	d902      	bls.n	8004ecc <memmove+0x10>
 8004ec6:	4284      	cmp	r4, r0
 8004ec8:	4623      	mov	r3, r4
 8004eca:	d807      	bhi.n	8004edc <memmove+0x20>
 8004ecc:	1e43      	subs	r3, r0, #1
 8004ece:	42a1      	cmp	r1, r4
 8004ed0:	d008      	beq.n	8004ee4 <memmove+0x28>
 8004ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eda:	e7f8      	b.n	8004ece <memmove+0x12>
 8004edc:	4402      	add	r2, r0
 8004ede:	4601      	mov	r1, r0
 8004ee0:	428a      	cmp	r2, r1
 8004ee2:	d100      	bne.n	8004ee6 <memmove+0x2a>
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eee:	e7f7      	b.n	8004ee0 <memmove+0x24>

08004ef0 <_free_r>:
 8004ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d044      	beq.n	8004f80 <_free_r+0x90>
 8004ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004efa:	9001      	str	r0, [sp, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f1a1 0404 	sub.w	r4, r1, #4
 8004f02:	bfb8      	it	lt
 8004f04:	18e4      	addlt	r4, r4, r3
 8004f06:	f000 f913 	bl	8005130 <__malloc_lock>
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <_free_r+0x94>)
 8004f0c:	9801      	ldr	r0, [sp, #4]
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	b933      	cbnz	r3, 8004f20 <_free_r+0x30>
 8004f12:	6063      	str	r3, [r4, #4]
 8004f14:	6014      	str	r4, [r2, #0]
 8004f16:	b003      	add	sp, #12
 8004f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f1c:	f000 b90e 	b.w	800513c <__malloc_unlock>
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	d908      	bls.n	8004f36 <_free_r+0x46>
 8004f24:	6825      	ldr	r5, [r4, #0]
 8004f26:	1961      	adds	r1, r4, r5
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	bf01      	itttt	eq
 8004f2c:	6819      	ldreq	r1, [r3, #0]
 8004f2e:	685b      	ldreq	r3, [r3, #4]
 8004f30:	1949      	addeq	r1, r1, r5
 8004f32:	6021      	streq	r1, [r4, #0]
 8004f34:	e7ed      	b.n	8004f12 <_free_r+0x22>
 8004f36:	461a      	mov	r2, r3
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b10b      	cbz	r3, 8004f40 <_free_r+0x50>
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	d9fa      	bls.n	8004f36 <_free_r+0x46>
 8004f40:	6811      	ldr	r1, [r2, #0]
 8004f42:	1855      	adds	r5, r2, r1
 8004f44:	42a5      	cmp	r5, r4
 8004f46:	d10b      	bne.n	8004f60 <_free_r+0x70>
 8004f48:	6824      	ldr	r4, [r4, #0]
 8004f4a:	4421      	add	r1, r4
 8004f4c:	1854      	adds	r4, r2, r1
 8004f4e:	42a3      	cmp	r3, r4
 8004f50:	6011      	str	r1, [r2, #0]
 8004f52:	d1e0      	bne.n	8004f16 <_free_r+0x26>
 8004f54:	681c      	ldr	r4, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	6053      	str	r3, [r2, #4]
 8004f5a:	4421      	add	r1, r4
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	e7da      	b.n	8004f16 <_free_r+0x26>
 8004f60:	d902      	bls.n	8004f68 <_free_r+0x78>
 8004f62:	230c      	movs	r3, #12
 8004f64:	6003      	str	r3, [r0, #0]
 8004f66:	e7d6      	b.n	8004f16 <_free_r+0x26>
 8004f68:	6825      	ldr	r5, [r4, #0]
 8004f6a:	1961      	adds	r1, r4, r5
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	bf04      	itt	eq
 8004f70:	6819      	ldreq	r1, [r3, #0]
 8004f72:	685b      	ldreq	r3, [r3, #4]
 8004f74:	6063      	str	r3, [r4, #4]
 8004f76:	bf04      	itt	eq
 8004f78:	1949      	addeq	r1, r1, r5
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	6054      	str	r4, [r2, #4]
 8004f7e:	e7ca      	b.n	8004f16 <_free_r+0x26>
 8004f80:	b003      	add	sp, #12
 8004f82:	bd30      	pop	{r4, r5, pc}
 8004f84:	2000409c 	.word	0x2000409c

08004f88 <sbrk_aligned>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4e0e      	ldr	r6, [pc, #56]	; (8004fc4 <sbrk_aligned+0x3c>)
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	6831      	ldr	r1, [r6, #0]
 8004f90:	4605      	mov	r5, r0
 8004f92:	b911      	cbnz	r1, 8004f9a <sbrk_aligned+0x12>
 8004f94:	f000 f8bc 	bl	8005110 <_sbrk_r>
 8004f98:	6030      	str	r0, [r6, #0]
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 f8b7 	bl	8005110 <_sbrk_r>
 8004fa2:	1c43      	adds	r3, r0, #1
 8004fa4:	d00a      	beq.n	8004fbc <sbrk_aligned+0x34>
 8004fa6:	1cc4      	adds	r4, r0, #3
 8004fa8:	f024 0403 	bic.w	r4, r4, #3
 8004fac:	42a0      	cmp	r0, r4
 8004fae:	d007      	beq.n	8004fc0 <sbrk_aligned+0x38>
 8004fb0:	1a21      	subs	r1, r4, r0
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 f8ac 	bl	8005110 <_sbrk_r>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d101      	bne.n	8004fc0 <sbrk_aligned+0x38>
 8004fbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	200040a0 	.word	0x200040a0

08004fc8 <_malloc_r>:
 8004fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fcc:	1ccd      	adds	r5, r1, #3
 8004fce:	f025 0503 	bic.w	r5, r5, #3
 8004fd2:	3508      	adds	r5, #8
 8004fd4:	2d0c      	cmp	r5, #12
 8004fd6:	bf38      	it	cc
 8004fd8:	250c      	movcc	r5, #12
 8004fda:	2d00      	cmp	r5, #0
 8004fdc:	4607      	mov	r7, r0
 8004fde:	db01      	blt.n	8004fe4 <_malloc_r+0x1c>
 8004fe0:	42a9      	cmp	r1, r5
 8004fe2:	d905      	bls.n	8004ff0 <_malloc_r+0x28>
 8004fe4:	230c      	movs	r3, #12
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	2600      	movs	r6, #0
 8004fea:	4630      	mov	r0, r6
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff0:	4e2e      	ldr	r6, [pc, #184]	; (80050ac <_malloc_r+0xe4>)
 8004ff2:	f000 f89d 	bl	8005130 <__malloc_lock>
 8004ff6:	6833      	ldr	r3, [r6, #0]
 8004ff8:	461c      	mov	r4, r3
 8004ffa:	bb34      	cbnz	r4, 800504a <_malloc_r+0x82>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4638      	mov	r0, r7
 8005000:	f7ff ffc2 	bl	8004f88 <sbrk_aligned>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	4604      	mov	r4, r0
 8005008:	d14d      	bne.n	80050a6 <_malloc_r+0xde>
 800500a:	6834      	ldr	r4, [r6, #0]
 800500c:	4626      	mov	r6, r4
 800500e:	2e00      	cmp	r6, #0
 8005010:	d140      	bne.n	8005094 <_malloc_r+0xcc>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	4631      	mov	r1, r6
 8005016:	4638      	mov	r0, r7
 8005018:	eb04 0803 	add.w	r8, r4, r3
 800501c:	f000 f878 	bl	8005110 <_sbrk_r>
 8005020:	4580      	cmp	r8, r0
 8005022:	d13a      	bne.n	800509a <_malloc_r+0xd2>
 8005024:	6821      	ldr	r1, [r4, #0]
 8005026:	3503      	adds	r5, #3
 8005028:	1a6d      	subs	r5, r5, r1
 800502a:	f025 0503 	bic.w	r5, r5, #3
 800502e:	3508      	adds	r5, #8
 8005030:	2d0c      	cmp	r5, #12
 8005032:	bf38      	it	cc
 8005034:	250c      	movcc	r5, #12
 8005036:	4629      	mov	r1, r5
 8005038:	4638      	mov	r0, r7
 800503a:	f7ff ffa5 	bl	8004f88 <sbrk_aligned>
 800503e:	3001      	adds	r0, #1
 8005040:	d02b      	beq.n	800509a <_malloc_r+0xd2>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	442b      	add	r3, r5
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	e00e      	b.n	8005068 <_malloc_r+0xa0>
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	1b52      	subs	r2, r2, r5
 800504e:	d41e      	bmi.n	800508e <_malloc_r+0xc6>
 8005050:	2a0b      	cmp	r2, #11
 8005052:	d916      	bls.n	8005082 <_malloc_r+0xba>
 8005054:	1961      	adds	r1, r4, r5
 8005056:	42a3      	cmp	r3, r4
 8005058:	6025      	str	r5, [r4, #0]
 800505a:	bf18      	it	ne
 800505c:	6059      	strne	r1, [r3, #4]
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	bf08      	it	eq
 8005062:	6031      	streq	r1, [r6, #0]
 8005064:	5162      	str	r2, [r4, r5]
 8005066:	604b      	str	r3, [r1, #4]
 8005068:	4638      	mov	r0, r7
 800506a:	f104 060b 	add.w	r6, r4, #11
 800506e:	f000 f865 	bl	800513c <__malloc_unlock>
 8005072:	f026 0607 	bic.w	r6, r6, #7
 8005076:	1d23      	adds	r3, r4, #4
 8005078:	1af2      	subs	r2, r6, r3
 800507a:	d0b6      	beq.n	8004fea <_malloc_r+0x22>
 800507c:	1b9b      	subs	r3, r3, r6
 800507e:	50a3      	str	r3, [r4, r2]
 8005080:	e7b3      	b.n	8004fea <_malloc_r+0x22>
 8005082:	6862      	ldr	r2, [r4, #4]
 8005084:	42a3      	cmp	r3, r4
 8005086:	bf0c      	ite	eq
 8005088:	6032      	streq	r2, [r6, #0]
 800508a:	605a      	strne	r2, [r3, #4]
 800508c:	e7ec      	b.n	8005068 <_malloc_r+0xa0>
 800508e:	4623      	mov	r3, r4
 8005090:	6864      	ldr	r4, [r4, #4]
 8005092:	e7b2      	b.n	8004ffa <_malloc_r+0x32>
 8005094:	4634      	mov	r4, r6
 8005096:	6876      	ldr	r6, [r6, #4]
 8005098:	e7b9      	b.n	800500e <_malloc_r+0x46>
 800509a:	230c      	movs	r3, #12
 800509c:	603b      	str	r3, [r7, #0]
 800509e:	4638      	mov	r0, r7
 80050a0:	f000 f84c 	bl	800513c <__malloc_unlock>
 80050a4:	e7a1      	b.n	8004fea <_malloc_r+0x22>
 80050a6:	6025      	str	r5, [r4, #0]
 80050a8:	e7de      	b.n	8005068 <_malloc_r+0xa0>
 80050aa:	bf00      	nop
 80050ac:	2000409c 	.word	0x2000409c

080050b0 <_realloc_r>:
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b4:	4680      	mov	r8, r0
 80050b6:	4614      	mov	r4, r2
 80050b8:	460e      	mov	r6, r1
 80050ba:	b921      	cbnz	r1, 80050c6 <_realloc_r+0x16>
 80050bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050c0:	4611      	mov	r1, r2
 80050c2:	f7ff bf81 	b.w	8004fc8 <_malloc_r>
 80050c6:	b92a      	cbnz	r2, 80050d4 <_realloc_r+0x24>
 80050c8:	f7ff ff12 	bl	8004ef0 <_free_r>
 80050cc:	4625      	mov	r5, r4
 80050ce:	4628      	mov	r0, r5
 80050d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d4:	f000 f838 	bl	8005148 <_malloc_usable_size_r>
 80050d8:	4284      	cmp	r4, r0
 80050da:	4607      	mov	r7, r0
 80050dc:	d802      	bhi.n	80050e4 <_realloc_r+0x34>
 80050de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050e2:	d812      	bhi.n	800510a <_realloc_r+0x5a>
 80050e4:	4621      	mov	r1, r4
 80050e6:	4640      	mov	r0, r8
 80050e8:	f7ff ff6e 	bl	8004fc8 <_malloc_r>
 80050ec:	4605      	mov	r5, r0
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0ed      	beq.n	80050ce <_realloc_r+0x1e>
 80050f2:	42bc      	cmp	r4, r7
 80050f4:	4622      	mov	r2, r4
 80050f6:	4631      	mov	r1, r6
 80050f8:	bf28      	it	cs
 80050fa:	463a      	movcs	r2, r7
 80050fc:	f7ff fbb8 	bl	8004870 <memcpy>
 8005100:	4631      	mov	r1, r6
 8005102:	4640      	mov	r0, r8
 8005104:	f7ff fef4 	bl	8004ef0 <_free_r>
 8005108:	e7e1      	b.n	80050ce <_realloc_r+0x1e>
 800510a:	4635      	mov	r5, r6
 800510c:	e7df      	b.n	80050ce <_realloc_r+0x1e>
	...

08005110 <_sbrk_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d06      	ldr	r5, [pc, #24]	; (800512c <_sbrk_r+0x1c>)
 8005114:	2300      	movs	r3, #0
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	f7fb fe80 	bl	8000e20 <_sbrk>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_sbrk_r+0x1a>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_sbrk_r+0x1a>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	200040a4 	.word	0x200040a4

08005130 <__malloc_lock>:
 8005130:	4801      	ldr	r0, [pc, #4]	; (8005138 <__malloc_lock+0x8>)
 8005132:	f000 b811 	b.w	8005158 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	200040a8 	.word	0x200040a8

0800513c <__malloc_unlock>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__malloc_unlock+0x8>)
 800513e:	f000 b80c 	b.w	800515a <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	200040a8 	.word	0x200040a8

08005148 <_malloc_usable_size_r>:
 8005148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514c:	1f18      	subs	r0, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfbc      	itt	lt
 8005152:	580b      	ldrlt	r3, [r1, r0]
 8005154:	18c0      	addlt	r0, r0, r3
 8005156:	4770      	bx	lr

08005158 <__retarget_lock_acquire_recursive>:
 8005158:	4770      	bx	lr

0800515a <__retarget_lock_release_recursive>:
 800515a:	4770      	bx	lr

0800515c <_init>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr

08005168 <_fini>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr
