
Ej03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08004474  08004474  00014474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004720  08004720  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004728  08004728  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004034  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200040a8  200040a8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df57  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002260  00000000  00000000  0002dffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  00030260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a80  00000000  00000000  00030db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025676  00000000  00000000  00031838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd9f  00000000  00000000  00056eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3e72  00000000  00000000  00063c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147abf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000312c  00000000  00000000  00147b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800445c 	.word	0x0800445c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800445c 	.word	0x0800445c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000090 	.word	0x20000090
 80005d4:	200000e4 	.word	0x200000e4

080005d8 <vPrintString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vPrintString( const char *pcString )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 80005e0:	f002 ffd0 	bl	8003584 <vPortEnterCritical>

		HAL_UART_Transmit(&huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fe03 	bl	80001f0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	230a      	movs	r3, #10
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <vPrintString+0x2c>)
 80005f4:	f001 fc9d 	bl	8001f32 <HAL_UART_Transmit>

	taskEXIT_CRITICAL();
 80005f8:	f002 fff4 	bl	80035e4 <vPortExitCritical>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200002f4 	.word	0x200002f4

08000608 <get_diff>:


TickType_t get_diff( void )
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
    TickType_t tiempo;

    tiempo = keys_data.time_diff;
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <get_diff+0x1c>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	607b      	str	r3, [r7, #4]

    return tiempo;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	200002e4 	.word	0x200002e4

08000628 <clear_diff>:


void clear_diff( void )
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
    keys_data.time_diff = KEYS_INVALID_TIME;
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <clear_diff+0x18>)
 800062e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000632:	60da      	str	r2, [r3, #12]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200002e4 	.word	0x200002e4

08000644 <productoEscalar16>:

void productoEscalar16 (uint16_t * vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{char buffer1 [50];
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	807b      	strh	r3, [r7, #2]
 int i=0;
 8000652:	2300      	movs	r3, #0
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
 uint32_t overflow;

    vPrintString( "INGRESO A LA FUNCION PRODUCTO \r\n" );
 8000656:	4833      	ldr	r0, [pc, #204]	; (8000724 <productoEscalar16+0xe0>)
 8000658:	f7ff ffbe 	bl	80005d8 <vPrintString>
    vPrintString ("Los valores de: ");
 800065c:	4832      	ldr	r0, [pc, #200]	; (8000728 <productoEscalar16+0xe4>)
 800065e:	f7ff ffbb 	bl	80005d8 <vPrintString>
    sprintf( buffer1, "Longitud = %lu y Escalar = %u \r\n", longitud,escalar);
 8000662:	887b      	ldrh	r3, [r7, #2]
 8000664:	f107 0014 	add.w	r0, r7, #20
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4930      	ldr	r1, [pc, #192]	; (800072c <productoEscalar16+0xe8>)
 800066c:	f003 fa96 	bl	8003b9c <siprintf>
       HAL_UART_Transmit(&huart3, (uint8_t*) buffer1, strlen(buffer1), 1000);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fdbb 	bl	80001f0 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b29a      	uxth	r2, r3
 800067e:	f107 0114 	add.w	r1, r7, #20
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	482a      	ldr	r0, [pc, #168]	; (8000730 <productoEscalar16+0xec>)
 8000688:	f001 fc53 	bl	8001f32 <HAL_UART_Transmit>

    //muestra los elementos del vectorOut
    while(i<longitud)
 800068c:	e041      	b.n	8000712 <productoEscalar16+0xce>
    {
      overflow = escalar*vectorIn[i];
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000692:	0052      	lsls	r2, r2, #1
 8000694:	68f9      	ldr	r1, [r7, #12]
 8000696:	440a      	add	r2, r1
 8000698:	8812      	ldrh	r2, [r2, #0]
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
    	if (overflow>0xFFFF)
 80006a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006a6:	d30a      	bcc.n	80006be <productoEscalar16+0x7a>
    	{
    		vPrintString ("OVERFLOW:");
 80006a8:	4822      	ldr	r0, [pc, #136]	; (8000734 <productoEscalar16+0xf0>)
 80006aa:	f7ff ff95 	bl	80005d8 <vPrintString>
    		vectorOut[i]=0xFFFF;
 80006ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	e00d      	b.n	80006da <productoEscalar16+0x96>
    	}
    	else vectorOut[i] = escalar*vectorIn[i];
 80006be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	68b9      	ldr	r1, [r7, #8]
 80006ce:	440b      	add	r3, r1
 80006d0:	8879      	ldrh	r1, [r7, #2]
 80006d2:	fb11 f202 	smulbb	r2, r1, r2
 80006d6:	b292      	uxth	r2, r2
 80006d8:	801a      	strh	r2, [r3, #0]

    sprintf( buffer1, "VectorOut [%d] = %u \r\n", i,vectorOut[i]);
 80006da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	4413      	add	r3, r2
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	f107 0014 	add.w	r0, r7, #20
 80006e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006ea:	4913      	ldr	r1, [pc, #76]	; (8000738 <productoEscalar16+0xf4>)
 80006ec:	f003 fa56 	bl	8003b9c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*) buffer1, strlen(buffer1), 1000);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fd7b 	bl	80001f0 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f107 0114 	add.w	r1, r7, #20
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <productoEscalar16+0xec>)
 8000708:	f001 fc13 	bl	8001f32 <HAL_UART_Transmit>
    i++;
 800070c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800070e:	3301      	adds	r3, #1
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
    while(i<longitud)
 8000712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	d8b9      	bhi.n	800068e <productoEscalar16+0x4a>
    }
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	08004480 	.word	0x08004480
 8000728:	080044a4 	.word	0x080044a4
 800072c:	080044b8 	.word	0x080044b8
 8000730:	200002f4 	.word	0x200002f4
 8000734:	080044dc 	.word	0x080044dc
 8000738:	080044e8 	.word	0x080044e8

0800073c <task_tecla_led>:



// Implementacion de funcion de la tarea
void task_tecla_led( void* taskParmPtr )
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09a      	sub	sp, #104	; 0x68
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    // ---------- CONFIGURACIONES ------------------------------
	char buffer [50];
	uint16_t vectorIn[10]={1,2,3,40000}, *vectorOut;
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	2301      	movs	r3, #1
 8000756:	823b      	strh	r3, [r7, #16]
 8000758:	2302      	movs	r3, #2
 800075a:	827b      	strh	r3, [r7, #18]
 800075c:	2303      	movs	r3, #3
 800075e:	82bb      	strh	r3, [r7, #20]
 8000760:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000764:	82fb      	strh	r3, [r7, #22]
		uint32_t longitud=4;
 8000766:	2304      	movs	r3, #4
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
		uint16_t escalar=5;
 800076a:	2305      	movs	r3, #5
 800076c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		int index=0;
 8000770:	2300      	movs	r3, #0
 8000772:	667b      	str	r3, [r7, #100]	; 0x64



		  //muestra el vector con los valores originales
		    while(index<longitud)
 8000774:	e022      	b.n	80007bc <task_tecla_led+0x80>
		{
		  if(index==0) vPrintString( "VALORES ORIGINALES DEL VECTOR_IN \r\n" );
 8000776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <task_tecla_led+0x46>
 800077c:	487d      	ldr	r0, [pc, #500]	; (8000974 <task_tecla_led+0x238>)
 800077e:	f7ff ff2b 	bl	80005d8 <vPrintString>

		  sprintf( buffer, "VECTOR_IN [%d] = %u \r\n", index,vectorIn[index]);
 8000782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	3368      	adds	r3, #104	; 0x68
 8000788:	443b      	add	r3, r7
 800078a:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 800078e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000792:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000794:	4978      	ldr	r1, [pc, #480]	; (8000978 <task_tecla_led+0x23c>)
 8000796:	f003 fa01 	bl	8003b9c <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd26 	bl	80001f0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80007ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b0:	4872      	ldr	r0, [pc, #456]	; (800097c <task_tecla_led+0x240>)
 80007b2:	f001 fbbe 	bl	8001f32 <HAL_UART_Transmit>
		  index++;
 80007b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007b8:	3301      	adds	r3, #1
 80007ba:	667b      	str	r3, [r7, #100]	; 0x64
		    while(index<longitud)
 80007bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d8d8      	bhi.n	8000776 <task_tecla_led+0x3a>

		}
         productoEscalar16 (vectorIn, &vectorOut,longitud,escalar);
 80007c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80007c8:	f107 010c 	add.w	r1, r7, #12
 80007cc:	f107 0010 	add.w	r0, r7, #16
 80007d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80007d2:	f7ff ff37 	bl	8000644 <productoEscalar16>

	tecla_led_state_t tecla_led_state = TECLA;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	TickType_t dif;

	keys_data.state          = STATE_BUTTON_UP;  		// Set initial state
 80007dc:	4b68      	ldr	r3, [pc, #416]	; (8000980 <task_tecla_led+0x244>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
    keys_data.time_down      = KEYS_INVALID_TIME;
 80007e2:	4b67      	ldr	r3, [pc, #412]	; (8000980 <task_tecla_led+0x244>)
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007e8:	605a      	str	r2, [r3, #4]
    keys_data.time_up        = KEYS_INVALID_TIME;
 80007ea:	4b65      	ldr	r3, [pc, #404]	; (8000980 <task_tecla_led+0x244>)
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007f0:	609a      	str	r2, [r3, #8]
    keys_data.time_diff      = KEYS_INVALID_TIME;
 80007f2:	4b63      	ldr	r3, [pc, #396]	; (8000980 <task_tecla_led+0x244>)
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007f8:	60da      	str	r2, [r3, #12]

    vPrintString( "      Task: task_tecla_led\r\n" );
 80007fa:	4862      	ldr	r0, [pc, #392]	; (8000984 <task_tecla_led+0x248>)
 80007fc:	f7ff feec 	bl	80005d8 <vPrintString>

	// ---------- REPETIR POR SIEMPRE --------------------------
    while( 1 )
    {
    	if( tecla_led_state == TECLA)
 8000800:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000804:	2b00      	cmp	r3, #0
 8000806:	d17a      	bne.n	80008fe <task_tecla_led+0x1c2>
    	{
    		switch( keys_data.state )
 8000808:	4b5d      	ldr	r3, [pc, #372]	; (8000980 <task_tecla_led+0x244>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d869      	bhi.n	80008e4 <task_tecla_led+0x1a8>
 8000810:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <task_tecla_led+0xdc>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000829 	.word	0x08000829
 800081c:	0800087d 	.word	0x0800087d
 8000820:	08000847 	.word	0x08000847
 8000824:	0800089b 	.word	0x0800089b
    		{
            	case STATE_BUTTON_UP:
            		/* CHECK TRANSITION CONDITIONS */
            		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082c:	4856      	ldr	r0, [pc, #344]	; (8000988 <task_tecla_led+0x24c>)
 800082e:	f000 fe69 	bl	8001504 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d05c      	beq.n	80008f2 <task_tecla_led+0x1b6>
            		{
            			keys_data.state = STATE_BUTTON_FALLING;
 8000838:	4b51      	ldr	r3, [pc, #324]	; (8000980 <task_tecla_led+0x244>)
 800083a:	2202      	movs	r2, #2
 800083c:	701a      	strb	r2, [r3, #0]
            			vPrintString( "            keys_data.state: STATE_BUTTON_FALLING\r\n" );
 800083e:	4853      	ldr	r0, [pc, #332]	; (800098c <task_tecla_led+0x250>)
 8000840:	f7ff feca 	bl	80005d8 <vPrintString>
            		}
            		break;
 8000844:	e055      	b.n	80008f2 <task_tecla_led+0x1b6>

            	case STATE_BUTTON_FALLING:
            		/* ENTRY */

            		/* CHECK TRANSITION CONDITIONS */
            		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	484f      	ldr	r0, [pc, #316]	; (8000988 <task_tecla_led+0x24c>)
 800084c:	f000 fe5a 	bl	8001504 <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00b      	beq.n	800086e <task_tecla_led+0x132>
            		{
            			keys_data.state = STATE_BUTTON_DOWN;
 8000856:	4b4a      	ldr	r3, [pc, #296]	; (8000980 <task_tecla_led+0x244>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
            			vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );
 800085c:	484c      	ldr	r0, [pc, #304]	; (8000990 <task_tecla_led+0x254>)
 800085e:	f7ff febb 	bl	80005d8 <vPrintString>

            			/* ACCION DEL EVENTO !*/
            			keys_data.time_down = xTaskGetTickCount();
 8000862:	f002 fae7 	bl	8002e34 <xTaskGetTickCount>
 8000866:	4603      	mov	r3, r0
 8000868:	4a45      	ldr	r2, [pc, #276]	; (8000980 <task_tecla_led+0x244>)
 800086a:	6053      	str	r3, [r2, #4]
            			keys_data.state = STATE_BUTTON_UP;
                    	vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
            		}

            		/* LEAVE */
            		break;
 800086c:	e044      	b.n	80008f8 <task_tecla_led+0x1bc>
            			keys_data.state = STATE_BUTTON_UP;
 800086e:	4b44      	ldr	r3, [pc, #272]	; (8000980 <task_tecla_led+0x244>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
                    	vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
 8000874:	4847      	ldr	r0, [pc, #284]	; (8000994 <task_tecla_led+0x258>)
 8000876:	f7ff feaf 	bl	80005d8 <vPrintString>
            		break;
 800087a:	e03d      	b.n	80008f8 <task_tecla_led+0x1bc>

            	case STATE_BUTTON_DOWN:
            		/* CHECK TRANSITION CONDITIONS */
            		if (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 800087c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000880:	4841      	ldr	r0, [pc, #260]	; (8000988 <task_tecla_led+0x24c>)
 8000882:	f000 fe3f 	bl	8001504 <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d134      	bne.n	80008f6 <task_tecla_led+0x1ba>
            		{
            			keys_data.state = STATE_BUTTON_RISING;
 800088c:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <task_tecla_led+0x244>)
 800088e:	2203      	movs	r2, #3
 8000890:	701a      	strb	r2, [r3, #0]
            			vPrintString( "            keys_data.state: STATE_BUTTON_RISING\r\n" );
 8000892:	4841      	ldr	r0, [pc, #260]	; (8000998 <task_tecla_led+0x25c>)
 8000894:	f7ff fea0 	bl	80005d8 <vPrintString>
            		}
            		break;
 8000898:	e02d      	b.n	80008f6 <task_tecla_led+0x1ba>
            	case STATE_BUTTON_RISING:
            		/* ENTRY */

            		/* CHECK TRANSITION CONDITIONS */

            		if (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 800089a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089e:	483a      	ldr	r0, [pc, #232]	; (8000988 <task_tecla_led+0x24c>)
 80008a0:	f000 fe30 	bl	8001504 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d115      	bne.n	80008d6 <task_tecla_led+0x19a>
            		{
            			tecla_led_state = LED;
 80008aa:	2301      	movs	r3, #1
 80008ac:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

            			keys_data.state = STATE_BUTTON_UP;
 80008b0:	4b33      	ldr	r3, [pc, #204]	; (8000980 <task_tecla_led+0x244>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
            			vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
 80008b6:	4837      	ldr	r0, [pc, #220]	; (8000994 <task_tecla_led+0x258>)
 80008b8:	f7ff fe8e 	bl	80005d8 <vPrintString>

            			/* ACCION DEL EVENTO ! */
            			keys_data.time_up    = xTaskGetTickCount();
 80008bc:	f002 faba 	bl	8002e34 <xTaskGetTickCount>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a2f      	ldr	r2, [pc, #188]	; (8000980 <task_tecla_led+0x244>)
 80008c4:	6093      	str	r3, [r2, #8]
            			keys_data.time_diff  = keys_data.time_up - keys_data.time_down;
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <task_tecla_led+0x244>)
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <task_tecla_led+0x244>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	4a2b      	ldr	r2, [pc, #172]	; (8000980 <task_tecla_led+0x244>)
 80008d2:	60d3      	str	r3, [r2, #12]
            			keys_data.state = STATE_BUTTON_DOWN;
            			vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );
            		}

            		/* LEAVE */
            		break;
 80008d4:	e010      	b.n	80008f8 <task_tecla_led+0x1bc>
            			keys_data.state = STATE_BUTTON_DOWN;
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <task_tecla_led+0x244>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
            			vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );
 80008dc:	482c      	ldr	r0, [pc, #176]	; (8000990 <task_tecla_led+0x254>)
 80008de:	f7ff fe7b 	bl	80005d8 <vPrintString>
            		break;
 80008e2:	e009      	b.n	80008f8 <task_tecla_led+0x1bc>

            	default:
            		keys_data.state = STATE_BUTTON_UP;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <task_tecla_led+0x244>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
            		vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
 80008ea:	482a      	ldr	r0, [pc, #168]	; (8000994 <task_tecla_led+0x258>)
 80008ec:	f7ff fe74 	bl	80005d8 <vPrintString>

            		break;
 80008f0:	e002      	b.n	80008f8 <task_tecla_led+0x1bc>
            		break;
 80008f2:	bf00      	nop
 80008f4:	e000      	b.n	80008f8 <task_tecla_led+0x1bc>
            		break;
 80008f6:	bf00      	nop
    		}
    		// Envia la tarea al estado bloqueado durante DEBOUNCE_TIME_MS
    		vTaskDelay( DEBOUNCE_TIME_MS / portTICK_RATE_MS );
 80008f8:	2028      	movs	r0, #40	; 0x28
 80008fa:	f002 f95d 	bl	8002bb8 <vTaskDelay>
    	}

    	if( tecla_led_state == LED)
 80008fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000902:	2b01      	cmp	r3, #1
 8000904:	f47f af7c 	bne.w	8000800 <task_tecla_led+0xc4>
    	{
            dif = get_diff();
 8000908:	f7ff fe7e 	bl	8000608 <get_diff>
 800090c:	65f8      	str	r0, [r7, #92]	; 0x5c

            if( dif != KEYS_INVALID_TIME )
 800090e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000914:	d028      	beq.n	8000968 <task_tecla_led+0x22c>
            {
                if( dif > LED_RATE_MS )
 8000916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800091c:	d902      	bls.n	8000924 <task_tecla_led+0x1e8>
                {
                    dif = LED_RATE_MS;
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
    			tecla_led_state = TECLA;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        		sprintf( buffer, "            led_state: Encendido - dif %u\r\n", (unsigned int)dif );
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000930:	491a      	ldr	r1, [pc, #104]	; (800099c <task_tecla_led+0x260>)
 8000932:	4618      	mov	r0, r3
 8000934:	f003 f932 	bl	8003b9c <siprintf>
        		vPrintString( buffer );
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe4b 	bl	80005d8 <vPrintString>
            	HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET );
 8000942:	2201      	movs	r2, #1
 8000944:	2101      	movs	r1, #1
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <task_tecla_led+0x264>)
 8000948:	f000 fdf4 	bl	8001534 <HAL_GPIO_WritePin>

                // Envia la tarea al estado bloqueado durante dif
                vTaskDelay( dif / portTICK_RATE_MS );
 800094c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800094e:	f002 f933 	bl	8002bb8 <vTaskDelay>

            	vPrintString( "            led_state: Apagado\r\n" );
 8000952:	4814      	ldr	r0, [pc, #80]	; (80009a4 <task_tecla_led+0x268>)
 8000954:	f7ff fe40 	bl	80005d8 <vPrintString>
            	HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET );
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4810      	ldr	r0, [pc, #64]	; (80009a0 <task_tecla_led+0x264>)
 800095e:	f000 fde9 	bl	8001534 <HAL_GPIO_WritePin>

                clear_diff();
 8000962:	f7ff fe61 	bl	8000628 <clear_diff>
 8000966:	e74b      	b.n	8000800 <task_tecla_led+0xc4>
            }
            else
            {
                // Envia la tarea al estado bloqueado durante LED_RATE_MS
                vTaskDelay( LED_RATE_MS / portTICK_RATE_MS );
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f002 f924 	bl	8002bb8 <vTaskDelay>
    	if( tecla_led_state == TECLA)
 8000970:	e746      	b.n	8000800 <task_tecla_led+0xc4>
 8000972:	bf00      	nop
 8000974:	08004500 	.word	0x08004500
 8000978:	08004524 	.word	0x08004524
 800097c:	200002f4 	.word	0x200002f4
 8000980:	200002e4 	.word	0x200002e4
 8000984:	0800453c 	.word	0x0800453c
 8000988:	40020800 	.word	0x40020800
 800098c:	0800455c 	.word	0x0800455c
 8000990:	08004590 	.word	0x08004590
 8000994:	080045c4 	.word	0x080045c4
 8000998:	080045f4 	.word	0x080045f4
 800099c:	08004628 	.word	0x08004628
 80009a0:	40020400 	.word	0x40020400
 80009a4:	08004654 	.word	0x08004654

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main( void )
{
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f000 faa5 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f849 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 f8db 	bl	8000b70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009ba:	f000 f8af 	bl	8000b1c <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
	vPrintString( "Main: Ejercicio 03 -Language C - AdM.\r\n" );
 80009be:	481d      	ldr	r0, [pc, #116]	; (8000a34 <main+0x8c>)
 80009c0:	f7ff fe0a 	bl	80005d8 <vPrintString>

  /* USER CODE END 2 */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <main+0x90>)
 80009c6:	463c      	mov	r4, r7
 80009c8:	461d      	mov	r5, r3
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009d6:	463b      	mov	r3, r7
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fe3d 	bl	800265a <osThreadCreate>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <main+0x94>)
 80009e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

    // Crear tareas en freeRTOS
    BaseType_t res =
    	xTaskCreate (
 80009e6:	2300      	movs	r3, #0
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	2301      	movs	r3, #1
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2300      	movs	r3, #0
 80009f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f4:	4912      	ldr	r1, [pc, #72]	; (8000a40 <main+0x98>)
 80009f6:	4813      	ldr	r0, [pc, #76]	; (8000a44 <main+0x9c>)
 80009f8:	f001 ffa0 	bl	800293c <xTaskCreate>
 80009fc:	6278      	str	r0, [r7, #36]	; 0x24
    //{
    //	gpioWrite( LEDR, ON );
    //	vPrintString( "Error al crear las tareas.\r\n" );
    //	while(TRUE);						// VER ESTE LINK: https://pbs.twimg.com/media/BafQje7CcAAN5en.jpg
    //}
    configASSERT( res == pdPASS);	// gestion de errores
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d00a      	beq.n	8000a1a <main+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a08:	f383 8811 	msr	BASEPRI, r3
 8000a0c:	f3bf 8f6f 	isb	sy
 8000a10:	f3bf 8f4f 	dsb	sy
 8000a14:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a16:	bf00      	nop
 8000a18:	e7fe      	b.n	8000a18 <main+0x70>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a1a:	f001 fe17 	bl	800264c <osKernelStart>
	__asm volatile
 8000a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a22:	f383 8811 	msr	BASEPRI, r3
 8000a26:	f3bf 8f6f 	isb	sy
 8000a2a:	f3bf 8f4f 	dsb	sy
 8000a2e:	61fb      	str	r3, [r7, #28]
}
 8000a30:	bf00      	nop
  // ---------- REPETIR POR SIEMPRE --------------------------
  //while( TRUE )
  //{
  // Si cae en este while 1 significa que no pudo iniciar el scheduler
  //}
  configASSERT( 0 );
 8000a32:	e7fe      	b.n	8000a32 <main+0x8a>
 8000a34:	08004678 	.word	0x08004678
 8000a38:	080046b0 	.word	0x080046b0
 8000a3c:	20000338 	.word	0x20000338
 8000a40:	080046a0 	.word	0x080046a0
 8000a44:	0800073d 	.word	0x0800073d

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2230      	movs	r2, #48	; 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 f898 	bl	8003b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000abc:	23a8      	movs	r3, #168	; 0xa8
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fd4b 	bl	8001568 <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ad8:	f000 f900 	bl	8000cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2105      	movs	r1, #5
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 ffac 	bl	8001a58 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b06:	f000 f8e9 	bl	8000cdc <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_USART3_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b54:	f001 f9a0 	bl	8001e98 <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b5e:	f000 f8bd 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200002f4 	.word	0x200002f4
 8000b6c:	40004800 	.word	0x40004800

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a4b      	ldr	r2, [pc, #300]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b49      	ldr	r3, [pc, #292]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b3e      	ldr	r3, [pc, #248]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a3d      	ldr	r2, [pc, #244]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a36      	ldr	r2, [pc, #216]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c34:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <MX_GPIO_Init+0x150>)
 8000c36:	f000 fc7d 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	4821      	ldr	r0, [pc, #132]	; (8000cc4 <MX_GPIO_Init+0x154>)
 8000c40:	f000 fc78 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481b      	ldr	r0, [pc, #108]	; (8000cc8 <MX_GPIO_Init+0x158>)
 8000c5c:	f000 faa6 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c60:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <MX_GPIO_Init+0x150>)
 8000c7a:	f000 fa97 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <MX_GPIO_Init+0x154>)
 8000c96:	f000 fa89 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_GPIO_Init+0x154>)
 8000cae:	f000 fa7d 	bl	80011ac <HAL_GPIO_Init>

}
 8000cb2:	bf00      	nop
 8000cb4:	3730      	adds	r7, #48	; 0x30
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020400 	.word	0x40020400
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	40020800 	.word	0x40020800

08000ccc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f001 fd0c 	bl	80026f2 <osDelay>
 8000cda:	e7fb      	b.n	8000cd4 <StartDefaultTask+0x8>

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_MspInit+0x54>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <HAL_MspInit+0x54>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_MspInit+0x54>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_MspInit+0x54>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_MspInit+0x54>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_MspInit+0x54>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	210f      	movs	r1, #15
 8000d2a:	f06f 0001 	mvn.w	r0, #1
 8000d2e:	f000 fa14 	bl	800115a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12c      	bne.n	8000dbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dac:	2307      	movs	r3, #7
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_UART_MspInit+0x8c>)
 8000db8:	f000 f9f8 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40004800 	.word	0x40004800
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020c00 	.word	0x40020c00

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f8ce 	bl	8000fa0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e04:	f002 fa10 	bl	8003228 <xTaskGetSchedulerState>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d001      	beq.n	8000e12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e0e:	f002 fc4b 	bl	80036a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f002 fe68 	bl	8003b1c <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20030000 	.word	0x20030000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	2000033c 	.word	0x2000033c
 8000e80:	200040a8 	.word	0x200040a8

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff ffd7 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 fe27 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fd65 	bl	80009a8 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ee0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000eec:	08004730 	.word	0x08004730
  ldr r2, =_sbss
 8000ef0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ef4:	200040a8 	.word	0x200040a8

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f90d 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff feda 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f917 	bl	8001192 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	f000 f8ed 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000340 	.word	0x20000340

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000340 	.word	0x20000340

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff47 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff5c 	bl	8001028 <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffb0 	bl	8001100 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	e177      	b.n	80014b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 8166 	bne.w	80014b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d130      	bne.n	8001260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 0201 	and.w	r2, r3, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b03      	cmp	r3, #3
 800126a:	d017      	beq.n	800129c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d123      	bne.n	80012f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	69b9      	ldr	r1, [r7, #24]
 80012ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0203 	and.w	r2, r3, #3
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80c0 	beq.w	80014b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_GPIO_Init+0x324>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134e:	4a61      	ldr	r2, [pc, #388]	; (80014d4 <HAL_GPIO_Init+0x328>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_GPIO_Init+0x32c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d037      	beq.n	80013ea <HAL_GPIO_Init+0x23e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a57      	ldr	r2, [pc, #348]	; (80014dc <HAL_GPIO_Init+0x330>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d031      	beq.n	80013e6 <HAL_GPIO_Init+0x23a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a56      	ldr	r2, [pc, #344]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0x236>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a55      	ldr	r2, [pc, #340]	; (80014e4 <HAL_GPIO_Init+0x338>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x232>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <HAL_GPIO_Init+0x33c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x22e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a53      	ldr	r2, [pc, #332]	; (80014ec <HAL_GPIO_Init+0x340>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x22a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_GPIO_Init+0x344>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x226>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a51      	ldr	r2, [pc, #324]	; (80014f4 <HAL_GPIO_Init+0x348>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x222>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <HAL_GPIO_Init+0x34c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x21e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4f      	ldr	r2, [pc, #316]	; (80014fc <HAL_GPIO_Init+0x350>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x21a>
 80013c2:	2309      	movs	r3, #9
 80013c4:	e012      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013c6:	230a      	movs	r3, #10
 80013c8:	e010      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013ca:	2308      	movs	r3, #8
 80013cc:	e00e      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e00c      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e00a      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013da:	2304      	movs	r3, #4
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013de:	2303      	movs	r3, #3
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013ea:	2300      	movs	r3, #0
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	f002 0203 	and.w	r2, r2, #3
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013fc:	4935      	ldr	r1, [pc, #212]	; (80014d4 <HAL_GPIO_Init+0x328>)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_GPIO_Init+0x354>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800142e:	4a34      	ldr	r2, [pc, #208]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001458:	4a29      	ldr	r2, [pc, #164]	; (8001500 <HAL_GPIO_Init+0x354>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_GPIO_Init+0x354>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_GPIO_Init+0x354>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	f67f ae84 	bls.w	80011c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40021400 	.word	0x40021400
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40021c00 	.word	0x40021c00
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40022400 	.word	0x40022400
 8001500:	40013c00 	.word	0x40013c00

08001504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e001      	b.n	8001526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e267      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d075      	beq.n	8001672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001586:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b04      	cmp	r3, #4
 8001590:	d00c      	beq.n	80015ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	4b85      	ldr	r3, [pc, #532]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d112      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159e:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015aa:	d10b      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	4b7e      	ldr	r3, [pc, #504]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d05b      	beq.n	8001670 <HAL_RCC_OscConfig+0x108>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d157      	bne.n	8001670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e242      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x74>
 80015ce:	4b76      	ldr	r3, [pc, #472]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a75      	ldr	r2, [pc, #468]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e01d      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x98>
 80015e6:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a6f      	ldr	r2, [pc, #444]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b6d      	ldr	r3, [pc, #436]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6c      	ldr	r2, [pc, #432]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 8001600:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a68      	ldr	r2, [pc, #416]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a65      	ldr	r2, [pc, #404]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fcd2 	bl	8000fc8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fcce 	bl	8000fc8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e207      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b5b      	ldr	r3, [pc, #364]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0xc0>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fcbe 	bl	8000fc8 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fcba 	bl	8000fc8 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1f3      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	4b51      	ldr	r3, [pc, #324]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0xe8>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d063      	beq.n	8001746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167e:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001692:	2b08      	cmp	r3, #8
 8001694:	d11c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001696:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d116      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e1c7      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4937      	ldr	r1, [pc, #220]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	e03a      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x244>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fc73 	bl	8000fc8 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fc6f 	bl	8000fc8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1a8      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4925      	ldr	r1, [pc, #148]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_RCC_OscConfig+0x244>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fc52 	bl	8000fc8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fc4e 	bl	8000fc8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e187      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d036      	beq.n	80017c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d016      	beq.n	8001788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x248>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fc32 	bl	8000fc8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fc2e 	bl	8000fc8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e167      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800177c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x200>
 8001786:	e01b      	b.n	80017c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_OscConfig+0x248>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff fc1b 	bl	8000fc8 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	e00e      	b.n	80017b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fc17 	bl	8000fc8 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d907      	bls.n	80017b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e150      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	42470000 	.word	0x42470000
 80017b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	4b88      	ldr	r3, [pc, #544]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ea      	bne.n	8001796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8097 	beq.w	80018fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d2:	4b81      	ldr	r3, [pc, #516]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10f      	bne.n	80017fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b7d      	ldr	r3, [pc, #500]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a7c      	ldr	r2, [pc, #496]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b7a      	ldr	r3, [pc, #488]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b77      	ldr	r3, [pc, #476]	; (80019dc <HAL_RCC_OscConfig+0x474>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b74      	ldr	r3, [pc, #464]	; (80019dc <HAL_RCC_OscConfig+0x474>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a73      	ldr	r2, [pc, #460]	; (80019dc <HAL_RCC_OscConfig+0x474>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7ff fbd7 	bl	8000fc8 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff fbd3 	bl	8000fc8 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e10c      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	4b6a      	ldr	r3, [pc, #424]	; (80019dc <HAL_RCC_OscConfig+0x474>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x2ea>
 8001844:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a63      	ldr	r2, [pc, #396]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
 8001850:	e01c      	b.n	800188c <HAL_RCC_OscConfig+0x324>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b05      	cmp	r3, #5
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x30c>
 800185a:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185e:	4a5e      	ldr	r2, [pc, #376]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6713      	str	r3, [r2, #112]	; 0x70
 8001866:	4b5c      	ldr	r3, [pc, #368]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	4a5b      	ldr	r2, [pc, #364]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
 8001872:	e00b      	b.n	800188c <HAL_RCC_OscConfig+0x324>
 8001874:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	6713      	str	r3, [r2, #112]	; 0x70
 8001880:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a54      	ldr	r2, [pc, #336]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001886:	f023 0304 	bic.w	r3, r3, #4
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d015      	beq.n	80018c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff fb98 	bl	8000fc8 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff fb94 	bl	8000fc8 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0cb      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0ee      	beq.n	800189c <HAL_RCC_OscConfig+0x334>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c0:	f7ff fb82 	bl	8000fc8 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c6:	e00a      	b.n	80018de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff fb7e 	bl	8000fc8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0b5      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018de:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ee      	bne.n	80018c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f0:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a1 	beq.w	8001a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001906:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	d05c      	beq.n	80019cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d141      	bne.n	800199e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <HAL_RCC_OscConfig+0x478>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fb52 	bl	8000fc8 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff fb4e 	bl	8000fc8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e087      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	019b      	lsls	r3, r3, #6
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	3b01      	subs	r3, #1
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	491b      	ldr	r1, [pc, #108]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_RCC_OscConfig+0x478>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fb27 	bl	8000fc8 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff fb23 	bl	8000fc8 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e05c      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x416>
 800199c:	e054      	b.n	8001a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_RCC_OscConfig+0x478>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fb10 	bl	8000fc8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff fb0c 	bl	8000fc8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e045      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x444>
 80019ca:	e03d      	b.n	8001a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e038      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000
 80019e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x4ec>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d028      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d121      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d11a      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d111      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	085b      	lsrs	r3, r3, #1
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d107      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0cc      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d90c      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	494d      	ldr	r1, [pc, #308]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d044      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d119      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e06f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e067      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4934      	ldr	r1, [pc, #208]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b48:	f7ff fa3e 	bl	8000fc8 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff fa3a 	bl	8000fc8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e04f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d20c      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e032      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	490a      	ldr	r1, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f99e 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00
 8001c14:	40023800 	.word	0x40023800
 8001c18:	080046d4 	.word	0x080046d4
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c28:	b094      	sub	sp, #80	; 0x50
 8001c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c30:	2300      	movs	r3, #0
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c34:	2300      	movs	r3, #0
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c3c:	4b79      	ldr	r3, [pc, #484]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d00d      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	f200 80e1 	bhi.w	8001e10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x34>
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c56:	e0db      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c5c:	e0db      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5e:	4b73      	ldr	r3, [pc, #460]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x208>)
 8001c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c62:	e0d8      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c64:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d063      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	2200      	movs	r2, #0
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8e:	2300      	movs	r3, #0
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
 8001c92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c96:	4622      	mov	r2, r4
 8001c98:	462b      	mov	r3, r5
 8001c9a:	f04f 0000 	mov.w	r0, #0
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	0159      	lsls	r1, r3, #5
 8001ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca8:	0150      	lsls	r0, r2, #5
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4621      	mov	r1, r4
 8001cb0:	1a51      	subs	r1, r2, r1
 8001cb2:	6139      	str	r1, [r7, #16]
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cc8:	4659      	mov	r1, fp
 8001cca:	018b      	lsls	r3, r1, #6
 8001ccc:	4651      	mov	r1, sl
 8001cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd2:	4651      	mov	r1, sl
 8001cd4:	018a      	lsls	r2, r1, #6
 8001cd6:	4651      	mov	r1, sl
 8001cd8:	ebb2 0801 	subs.w	r8, r2, r1
 8001cdc:	4659      	mov	r1, fp
 8001cde:	eb63 0901 	sbc.w	r9, r3, r1
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cf6:	4690      	mov	r8, r2
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	4623      	mov	r3, r4
 8001cfc:	eb18 0303 	adds.w	r3, r8, r3
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	462b      	mov	r3, r5
 8001d04:	eb49 0303 	adc.w	r3, r9, r3
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d16:	4629      	mov	r1, r5
 8001d18:	024b      	lsls	r3, r1, #9
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d20:	4621      	mov	r1, r4
 8001d22:	024a      	lsls	r2, r1, #9
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d34:	f7fe fab4 	bl	80002a0 <__aeabi_uldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d40:	e058      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d42:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	099b      	lsrs	r3, r3, #6
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
 8001d58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d5c:	4642      	mov	r2, r8
 8001d5e:	464b      	mov	r3, r9
 8001d60:	f04f 0000 	mov.w	r0, #0
 8001d64:	f04f 0100 	mov.w	r1, #0
 8001d68:	0159      	lsls	r1, r3, #5
 8001d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6e:	0150      	lsls	r0, r2, #5
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4641      	mov	r1, r8
 8001d76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d7a:	4649      	mov	r1, r9
 8001d7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d94:	ebb2 040a 	subs.w	r4, r2, sl
 8001d98:	eb63 050b 	sbc.w	r5, r3, fp
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	00eb      	lsls	r3, r5, #3
 8001da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001daa:	00e2      	lsls	r2, r4, #3
 8001dac:	4614      	mov	r4, r2
 8001dae:	461d      	mov	r5, r3
 8001db0:	4643      	mov	r3, r8
 8001db2:	18e3      	adds	r3, r4, r3
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	464b      	mov	r3, r9
 8001db8:	eb45 0303 	adc.w	r3, r5, r3
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dca:	4629      	mov	r1, r5
 8001dcc:	028b      	lsls	r3, r1, #10
 8001dce:	4621      	mov	r1, r4
 8001dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	028a      	lsls	r2, r1, #10
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dde:	2200      	movs	r2, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	61fa      	str	r2, [r7, #28]
 8001de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de8:	f7fe fa5a 	bl	80002a0 <__aeabi_uldivmod>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4613      	mov	r3, r2
 8001df2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	0c1b      	lsrs	r3, r3, #16
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e0e:	e002      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3750      	adds	r7, #80	; 0x50
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	007a1200 	.word	0x007a1200

08001e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff0 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0a9b      	lsrs	r3, r3, #10
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	080046e4 	.word	0x080046e4

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffdc 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0b5b      	lsrs	r3, r3, #13
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	080046e4 	.word	0x080046e4

08001e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e03f      	b.n	8001f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe ff3e 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f929 	bl	8002134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b08a      	sub	sp, #40	; 0x28
 8001f36:	af02      	add	r7, sp, #8
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d17c      	bne.n	800204c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_UART_Transmit+0x2c>
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e075      	b.n	800204e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_UART_Transmit+0x3e>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e06e      	b.n	800204e <HAL_UART_Transmit+0x11c>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2221      	movs	r2, #33	; 0x21
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f86:	f7ff f81f 	bl	8000fc8 <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	88fa      	ldrh	r2, [r7, #6]
 8001f96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa0:	d108      	bne.n	8001fb4 <HAL_UART_Transmit+0x82>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	e003      	b.n	8001fbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fc4:	e02a      	b.n	800201c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f840 	bl	8002056 <UART_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e036      	b.n	800204e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10b      	bne.n	8001ffe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	e007      	b.n	800200e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	3301      	adds	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1cf      	bne.n	8001fc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f810 	bl	8002056 <UART_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e006      	b.n	800204e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b090      	sub	sp, #64	; 0x40
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4613      	mov	r3, r2
 8002064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002066:	e050      	b.n	800210a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800206a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800206e:	d04c      	beq.n	800210a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <UART_WaitOnFlagUntilTimeout+0x30>
 8002076:	f7fe ffa7 	bl	8000fc8 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002082:	429a      	cmp	r2, r3
 8002084:	d241      	bcs.n	800210a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	330c      	adds	r3, #12
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	e853 3f00 	ldrex	r3, [r3]
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800209c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	330c      	adds	r3, #12
 80020a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020a6:	637a      	str	r2, [r7, #52]	; 0x34
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ae:	e841 2300 	strex	r3, r2, [r1]
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1e5      	bne.n	8002086 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3314      	adds	r3, #20
 80020c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	e853 3f00 	ldrex	r3, [r3]
 80020c8:	613b      	str	r3, [r7, #16]
   return(result);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3314      	adds	r3, #20
 80020d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020da:	623a      	str	r2, [r7, #32]
 80020dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020de:	69f9      	ldr	r1, [r7, #28]
 80020e0:	6a3a      	ldr	r2, [r7, #32]
 80020e2:	e841 2300 	strex	r3, r2, [r1]
 80020e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1e5      	bne.n	80020ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e00f      	b.n	800212a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4013      	ands	r3, r2
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	429a      	cmp	r2, r3
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	429a      	cmp	r2, r3
 8002126:	d09f      	beq.n	8002068 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3740      	adds	r7, #64	; 0x40
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002138:	b0c0      	sub	sp, #256	; 0x100
 800213a:	af00      	add	r7, sp, #0
 800213c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	68d9      	ldr	r1, [r3, #12]
 8002152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	ea40 0301 	orr.w	r3, r0, r1
 800215c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800215e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	431a      	orrs	r2, r3
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	431a      	orrs	r2, r3
 8002174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800218c:	f021 010c 	bic.w	r1, r1, #12
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800219a:	430b      	orrs	r3, r1
 800219c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800219e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ae:	6999      	ldr	r1, [r3, #24]
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	ea40 0301 	orr.w	r3, r0, r1
 80021ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b8f      	ldr	r3, [pc, #572]	; (8002400 <UART_SetConfig+0x2cc>)
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d005      	beq.n	80021d4 <UART_SetConfig+0xa0>
 80021c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4b8d      	ldr	r3, [pc, #564]	; (8002404 <UART_SetConfig+0x2d0>)
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d104      	bne.n	80021de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021d4:	f7ff fe4c 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 80021d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021dc:	e003      	b.n	80021e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021de:	f7ff fe33 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80021e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f0:	f040 810c 	bne.w	800240c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021f8:	2200      	movs	r2, #0
 80021fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002206:	4622      	mov	r2, r4
 8002208:	462b      	mov	r3, r5
 800220a:	1891      	adds	r1, r2, r2
 800220c:	65b9      	str	r1, [r7, #88]	; 0x58
 800220e:	415b      	adcs	r3, r3
 8002210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002216:	4621      	mov	r1, r4
 8002218:	eb12 0801 	adds.w	r8, r2, r1
 800221c:	4629      	mov	r1, r5
 800221e:	eb43 0901 	adc.w	r9, r3, r1
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800222e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002236:	4690      	mov	r8, r2
 8002238:	4699      	mov	r9, r3
 800223a:	4623      	mov	r3, r4
 800223c:	eb18 0303 	adds.w	r3, r8, r3
 8002240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002244:	462b      	mov	r3, r5
 8002246:	eb49 0303 	adc.w	r3, r9, r3
 800224a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800224e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800225a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800225e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002262:	460b      	mov	r3, r1
 8002264:	18db      	adds	r3, r3, r3
 8002266:	653b      	str	r3, [r7, #80]	; 0x50
 8002268:	4613      	mov	r3, r2
 800226a:	eb42 0303 	adc.w	r3, r2, r3
 800226e:	657b      	str	r3, [r7, #84]	; 0x54
 8002270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002278:	f7fe f812 	bl	80002a0 <__aeabi_uldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4b61      	ldr	r3, [pc, #388]	; (8002408 <UART_SetConfig+0x2d4>)
 8002282:	fba3 2302 	umull	r2, r3, r3, r2
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	011c      	lsls	r4, r3, #4
 800228a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800228e:	2200      	movs	r2, #0
 8002290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002294:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800229c:	4642      	mov	r2, r8
 800229e:	464b      	mov	r3, r9
 80022a0:	1891      	adds	r1, r2, r2
 80022a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80022a4:	415b      	adcs	r3, r3
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022ac:	4641      	mov	r1, r8
 80022ae:	eb12 0a01 	adds.w	sl, r2, r1
 80022b2:	4649      	mov	r1, r9
 80022b4:	eb43 0b01 	adc.w	fp, r3, r1
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022cc:	4692      	mov	sl, r2
 80022ce:	469b      	mov	fp, r3
 80022d0:	4643      	mov	r3, r8
 80022d2:	eb1a 0303 	adds.w	r3, sl, r3
 80022d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022da:	464b      	mov	r3, r9
 80022dc:	eb4b 0303 	adc.w	r3, fp, r3
 80022e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022f8:	460b      	mov	r3, r1
 80022fa:	18db      	adds	r3, r3, r3
 80022fc:	643b      	str	r3, [r7, #64]	; 0x40
 80022fe:	4613      	mov	r3, r2
 8002300:	eb42 0303 	adc.w	r3, r2, r3
 8002304:	647b      	str	r3, [r7, #68]	; 0x44
 8002306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800230a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800230e:	f7fd ffc7 	bl	80002a0 <__aeabi_uldivmod>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4611      	mov	r1, r2
 8002318:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <UART_SetConfig+0x2d4>)
 800231a:	fba3 2301 	umull	r2, r3, r3, r1
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2264      	movs	r2, #100	; 0x64
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	1acb      	subs	r3, r1, r3
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800232e:	4b36      	ldr	r3, [pc, #216]	; (8002408 <UART_SetConfig+0x2d4>)
 8002330:	fba3 2302 	umull	r2, r3, r3, r2
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800233c:	441c      	add	r4, r3
 800233e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002342:	2200      	movs	r2, #0
 8002344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002348:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800234c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002350:	4642      	mov	r2, r8
 8002352:	464b      	mov	r3, r9
 8002354:	1891      	adds	r1, r2, r2
 8002356:	63b9      	str	r1, [r7, #56]	; 0x38
 8002358:	415b      	adcs	r3, r3
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002360:	4641      	mov	r1, r8
 8002362:	1851      	adds	r1, r2, r1
 8002364:	6339      	str	r1, [r7, #48]	; 0x30
 8002366:	4649      	mov	r1, r9
 8002368:	414b      	adcs	r3, r1
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002378:	4659      	mov	r1, fp
 800237a:	00cb      	lsls	r3, r1, #3
 800237c:	4651      	mov	r1, sl
 800237e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002382:	4651      	mov	r1, sl
 8002384:	00ca      	lsls	r2, r1, #3
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	4603      	mov	r3, r0
 800238c:	4642      	mov	r2, r8
 800238e:	189b      	adds	r3, r3, r2
 8002390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002394:	464b      	mov	r3, r9
 8002396:	460a      	mov	r2, r1
 8002398:	eb42 0303 	adc.w	r3, r2, r3
 800239c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023b4:	460b      	mov	r3, r1
 80023b6:	18db      	adds	r3, r3, r3
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ba:	4613      	mov	r3, r2
 80023bc:	eb42 0303 	adc.w	r3, r2, r3
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023ca:	f7fd ff69 	bl	80002a0 <__aeabi_uldivmod>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <UART_SetConfig+0x2d4>)
 80023d4:	fba3 1302 	umull	r1, r3, r3, r2
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	2164      	movs	r1, #100	; 0x64
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	3332      	adds	r3, #50	; 0x32
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <UART_SetConfig+0x2d4>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	f003 0207 	and.w	r2, r3, #7
 80023f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4422      	add	r2, r4
 80023fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023fc:	e105      	b.n	800260a <UART_SetConfig+0x4d6>
 80023fe:	bf00      	nop
 8002400:	40011000 	.word	0x40011000
 8002404:	40011400 	.word	0x40011400
 8002408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800240c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002410:	2200      	movs	r2, #0
 8002412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002416:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800241a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800241e:	4642      	mov	r2, r8
 8002420:	464b      	mov	r3, r9
 8002422:	1891      	adds	r1, r2, r2
 8002424:	6239      	str	r1, [r7, #32]
 8002426:	415b      	adcs	r3, r3
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800242e:	4641      	mov	r1, r8
 8002430:	1854      	adds	r4, r2, r1
 8002432:	4649      	mov	r1, r9
 8002434:	eb43 0501 	adc.w	r5, r3, r1
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	00eb      	lsls	r3, r5, #3
 8002442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002446:	00e2      	lsls	r2, r4, #3
 8002448:	4614      	mov	r4, r2
 800244a:	461d      	mov	r5, r3
 800244c:	4643      	mov	r3, r8
 800244e:	18e3      	adds	r3, r4, r3
 8002450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002454:	464b      	mov	r3, r9
 8002456:	eb45 0303 	adc.w	r3, r5, r3
 800245a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800246a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800247a:	4629      	mov	r1, r5
 800247c:	008b      	lsls	r3, r1, #2
 800247e:	4621      	mov	r1, r4
 8002480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002484:	4621      	mov	r1, r4
 8002486:	008a      	lsls	r2, r1, #2
 8002488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800248c:	f7fd ff08 	bl	80002a0 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4b60      	ldr	r3, [pc, #384]	; (8002618 <UART_SetConfig+0x4e4>)
 8002496:	fba3 2302 	umull	r2, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	011c      	lsls	r4, r3, #4
 800249e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80024b0:	4642      	mov	r2, r8
 80024b2:	464b      	mov	r3, r9
 80024b4:	1891      	adds	r1, r2, r2
 80024b6:	61b9      	str	r1, [r7, #24]
 80024b8:	415b      	adcs	r3, r3
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c0:	4641      	mov	r1, r8
 80024c2:	1851      	adds	r1, r2, r1
 80024c4:	6139      	str	r1, [r7, #16]
 80024c6:	4649      	mov	r1, r9
 80024c8:	414b      	adcs	r3, r1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024d8:	4659      	mov	r1, fp
 80024da:	00cb      	lsls	r3, r1, #3
 80024dc:	4651      	mov	r1, sl
 80024de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024e2:	4651      	mov	r1, sl
 80024e4:	00ca      	lsls	r2, r1, #3
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	4642      	mov	r2, r8
 80024ee:	189b      	adds	r3, r3, r2
 80024f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024f4:	464b      	mov	r3, r9
 80024f6:	460a      	mov	r2, r1
 80024f8:	eb42 0303 	adc.w	r3, r2, r3
 80024fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	67bb      	str	r3, [r7, #120]	; 0x78
 800250a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002518:	4649      	mov	r1, r9
 800251a:	008b      	lsls	r3, r1, #2
 800251c:	4641      	mov	r1, r8
 800251e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002522:	4641      	mov	r1, r8
 8002524:	008a      	lsls	r2, r1, #2
 8002526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800252a:	f7fd feb9 	bl	80002a0 <__aeabi_uldivmod>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <UART_SetConfig+0x4e4>)
 8002534:	fba3 1302 	umull	r1, r3, r3, r2
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	2164      	movs	r1, #100	; 0x64
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	3332      	adds	r3, #50	; 0x32
 8002546:	4a34      	ldr	r2, [pc, #208]	; (8002618 <UART_SetConfig+0x4e4>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002552:	441c      	add	r4, r3
 8002554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002558:	2200      	movs	r2, #0
 800255a:	673b      	str	r3, [r7, #112]	; 0x70
 800255c:	677a      	str	r2, [r7, #116]	; 0x74
 800255e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002562:	4642      	mov	r2, r8
 8002564:	464b      	mov	r3, r9
 8002566:	1891      	adds	r1, r2, r2
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	415b      	adcs	r3, r3
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002572:	4641      	mov	r1, r8
 8002574:	1851      	adds	r1, r2, r1
 8002576:	6039      	str	r1, [r7, #0]
 8002578:	4649      	mov	r1, r9
 800257a:	414b      	adcs	r3, r1
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800258a:	4659      	mov	r1, fp
 800258c:	00cb      	lsls	r3, r1, #3
 800258e:	4651      	mov	r1, sl
 8002590:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002594:	4651      	mov	r1, sl
 8002596:	00ca      	lsls	r2, r1, #3
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	4603      	mov	r3, r0
 800259e:	4642      	mov	r2, r8
 80025a0:	189b      	adds	r3, r3, r2
 80025a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80025a4:	464b      	mov	r3, r9
 80025a6:	460a      	mov	r2, r1
 80025a8:	eb42 0303 	adc.w	r3, r2, r3
 80025ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	663b      	str	r3, [r7, #96]	; 0x60
 80025b8:	667a      	str	r2, [r7, #100]	; 0x64
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025c6:	4649      	mov	r1, r9
 80025c8:	008b      	lsls	r3, r1, #2
 80025ca:	4641      	mov	r1, r8
 80025cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025d0:	4641      	mov	r1, r8
 80025d2:	008a      	lsls	r2, r1, #2
 80025d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025d8:	f7fd fe62 	bl	80002a0 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <UART_SetConfig+0x4e4>)
 80025e2:	fba3 1302 	umull	r1, r3, r3, r2
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2164      	movs	r1, #100	; 0x64
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	3332      	adds	r3, #50	; 0x32
 80025f4:	4a08      	ldr	r2, [pc, #32]	; (8002618 <UART_SetConfig+0x4e4>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	f003 020f 	and.w	r2, r3, #15
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4422      	add	r2, r4
 8002608:	609a      	str	r2, [r3, #8]
}
 800260a:	bf00      	nop
 800260c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002610:	46bd      	mov	sp, r7
 8002612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002616:	bf00      	nop
 8002618:	51eb851f 	.word	0x51eb851f

0800261c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800262a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262e:	2b84      	cmp	r3, #132	; 0x84
 8002630:	d005      	beq.n	800263e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002632:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	3303      	adds	r3, #3
 800263c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002650:	f000 fae6 	bl	8002c20 <vTaskStartScheduler>
  
  return osOK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}

0800265a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800265a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265c:	b089      	sub	sp, #36	; 0x24
 800265e:	af04      	add	r7, sp, #16
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <osThreadCreate+0x54>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01c      	beq.n	80026ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685c      	ldr	r4, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681d      	ldr	r5, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691e      	ldr	r6, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ffc8 	bl	800261c <makeFreeRtosPriority>
 800268c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002696:	9202      	str	r2, [sp, #8]
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	9100      	str	r1, [sp, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4632      	mov	r2, r6
 80026a0:	4629      	mov	r1, r5
 80026a2:	4620      	mov	r0, r4
 80026a4:	f000 f8ed 	bl	8002882 <xTaskCreateStatic>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e01c      	b.n	80026e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685c      	ldr	r4, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026ba:	b29e      	uxth	r6, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ffaa 	bl	800261c <makeFreeRtosPriority>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	9200      	str	r2, [sp, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	4632      	mov	r2, r6
 80026d6:	4629      	mov	r1, r5
 80026d8:	4620      	mov	r0, r4
 80026da:	f000 f92f 	bl	800293c <xTaskCreate>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026e8:	68fb      	ldr	r3, [r7, #12]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <osDelay+0x16>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	e000      	b.n	800270a <osDelay+0x18>
 8002708:	2301      	movs	r3, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fa54 	bl	8002bb8 <vTaskDelay>
  
  return osOK;
 8002710:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f103 0208 	add.w	r2, r3, #8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002732:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0208 	add.w	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f103 0208 	add.w	r2, r3, #8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d2:	d103      	bne.n	80027dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e00c      	b.n	80027f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3308      	adds	r3, #8
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e002      	b.n	80027ea <vListInsert+0x2e>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d2f6      	bcs.n	80027e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	601a      	str	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6852      	ldr	r2, [r2, #4]
 800284e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	d103      	bne.n	8002862 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1e5a      	subs	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002882:	b580      	push	{r7, lr}
 8002884:	b08e      	sub	sp, #56	; 0x38
 8002886:	af04      	add	r7, sp, #16
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028a8:	bf00      	nop
 80028aa:	e7fe      	b.n	80028aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <xTaskCreateStatic+0x46>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	61fb      	str	r3, [r7, #28]
}
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028c8:	2354      	movs	r3, #84	; 0x54
 80028ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b54      	cmp	r3, #84	; 0x54
 80028d0:	d00a      	beq.n	80028e8 <xTaskCreateStatic+0x66>
	__asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	61bb      	str	r3, [r7, #24]
}
 80028e4:	bf00      	nop
 80028e6:	e7fe      	b.n	80028e6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80028e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01e      	beq.n	800292e <xTaskCreateStatic+0xac>
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01b      	beq.n	800292e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002908:	2300      	movs	r3, #0
 800290a:	9303      	str	r3, [sp, #12]
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f850 	bl	80029c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002928:	f000 f8dc 	bl	8002ae4 <prvAddNewTaskToReadyList>
 800292c:	e001      	b.n	8002932 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002932:	697b      	ldr	r3, [r7, #20]
	}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	; 0x30
 8002940:	af04      	add	r7, sp, #16
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fef9 	bl	8003748 <pvPortMalloc>
 8002956:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00e      	beq.n	800297c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800295e:	2054      	movs	r0, #84	; 0x54
 8002960:	f000 fef2 	bl	8003748 <pvPortMalloc>
 8002964:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
 8002972:	e005      	b.n	8002980 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002974:	6978      	ldr	r0, [r7, #20]
 8002976:	f000 ffb3 	bl	80038e0 <vPortFree>
 800297a:	e001      	b.n	8002980 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d017      	beq.n	80029b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800298e:	88fa      	ldrh	r2, [r7, #6]
 8002990:	2300      	movs	r3, #0
 8002992:	9303      	str	r3, [sp, #12]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	9302      	str	r3, [sp, #8]
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f80e 	bl	80029c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029aa:	69f8      	ldr	r0, [r7, #28]
 80029ac:	f000 f89a 	bl	8002ae4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029b0:	2301      	movs	r3, #1
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	e002      	b.n	80029bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029bc:	69bb      	ldr	r3, [r7, #24]
	}
 80029be:	4618      	mov	r0, r3
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b088      	sub	sp, #32
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	461a      	mov	r2, r3
 80029de:	21a5      	movs	r1, #165	; 0xa5
 80029e0:	f001 f8d4 	bl	8003b8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ee:	3b01      	subs	r3, #1
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f023 0307 	bic.w	r3, r3, #7
 80029fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <prvInitialiseNewTask+0x58>
	__asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	617b      	str	r3, [r7, #20]
}
 8002a1a:	bf00      	nop
 8002a1c:	e7fe      	b.n	8002a1c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01f      	beq.n	8002a64 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	e012      	b.n	8002a50 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	7819      	ldrb	r1, [r3, #0]
 8002a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	3334      	adds	r3, #52	; 0x34
 8002a3a:	460a      	mov	r2, r1
 8002a3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	d9e9      	bls.n	8002a2a <prvInitialiseNewTask+0x64>
 8002a56:	e000      	b.n	8002a5a <prvInitialiseNewTask+0x94>
			{
				break;
 8002a58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a62:	e003      	b.n	8002a6c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d901      	bls.n	8002a76 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a72:	2306      	movs	r3, #6
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	2200      	movs	r2, #0
 8002a86:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fe64 	bl	800275a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	3318      	adds	r3, #24
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fe5f 	bl	800275a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	f1c3 0207 	rsb	r2, r3, #7
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	69b8      	ldr	r0, [r7, #24]
 8002ac6:	f000 fc33 	bl	8003330 <pxPortInitialiseStack>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ada:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002adc:	bf00      	nop
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002aec:	f000 fd4a 	bl	8003584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002af0:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <prvAddNewTaskToReadyList+0xb8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <prvAddNewTaskToReadyList+0xb8>)
 8002af8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002afa:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <prvAddNewTaskToReadyList+0xbc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b02:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <prvAddNewTaskToReadyList+0xbc>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <prvAddNewTaskToReadyList+0xb8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d110      	bne.n	8002b32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b10:	f000 facc 	bl	80030ac <prvInitialiseTaskLists>
 8002b14:	e00d      	b.n	8002b32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <prvAddNewTaskToReadyList+0xc0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <prvAddNewTaskToReadyList+0xbc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d802      	bhi.n	8002b32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <prvAddNewTaskToReadyList+0xbc>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <prvAddNewTaskToReadyList+0xc4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <prvAddNewTaskToReadyList+0xc4>)
 8002b3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	2201      	movs	r2, #1
 8002b42:	409a      	lsls	r2, r3
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <prvAddNewTaskToReadyList+0xc8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <prvAddNewTaskToReadyList+0xc8>)
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <prvAddNewTaskToReadyList+0xcc>)
 8002b5c:	441a      	add	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7ff fe05 	bl	8002774 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b6a:	f000 fd3b 	bl	80035e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <prvAddNewTaskToReadyList+0xc0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00e      	beq.n	8002b94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <prvAddNewTaskToReadyList+0xbc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d207      	bcs.n	8002b94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <prvAddNewTaskToReadyList+0xd0>)
 8002b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000444 	.word	0x20000444
 8002ba0:	20000344 	.word	0x20000344
 8002ba4:	20000450 	.word	0x20000450
 8002ba8:	20000460 	.word	0x20000460
 8002bac:	2000044c 	.word	0x2000044c
 8002bb0:	20000348 	.word	0x20000348
 8002bb4:	e000ed04 	.word	0xe000ed04

08002bb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d017      	beq.n	8002bfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <vTaskDelay+0x60>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <vTaskDelay+0x30>
	__asm volatile
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	60bb      	str	r3, [r7, #8]
}
 8002be4:	bf00      	nop
 8002be6:	e7fe      	b.n	8002be6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002be8:	f000 f87a 	bl	8002ce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bec:	2100      	movs	r1, #0
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fb38 	bl	8003264 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002bf4:	f000 f882 	bl	8002cfc <xTaskResumeAll>
 8002bf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d107      	bne.n	8002c10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <vTaskDelay+0x64>)
 8002c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	2000046c 	.word	0x2000046c
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c2e:	463a      	mov	r2, r7
 8002c30:	1d39      	adds	r1, r7, #4
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fcb4 	bl	80005a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	9202      	str	r2, [sp, #8]
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	2300      	movs	r3, #0
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	460a      	mov	r2, r1
 8002c4e:	491e      	ldr	r1, [pc, #120]	; (8002cc8 <vTaskStartScheduler+0xa8>)
 8002c50:	481e      	ldr	r0, [pc, #120]	; (8002ccc <vTaskStartScheduler+0xac>)
 8002c52:	f7ff fe16 	bl	8002882 <xTaskCreateStatic>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <vTaskStartScheduler+0xb0>)
 8002c5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <vTaskStartScheduler+0xb0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c64:	2301      	movs	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e001      	b.n	8002c6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d116      	bne.n	8002ca2 <vTaskStartScheduler+0x82>
	__asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	613b      	str	r3, [r7, #16]
}
 8002c86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <vTaskStartScheduler+0xb4>)
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <vTaskStartScheduler+0xb8>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <vTaskStartScheduler+0xbc>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c9c:	f000 fbd0 	bl	8003440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ca0:	e00e      	b.n	8002cc0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca8:	d10a      	bne.n	8002cc0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	60fb      	str	r3, [r7, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <vTaskStartScheduler+0x9e>
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	080046cc 	.word	0x080046cc
 8002ccc:	0800307d 	.word	0x0800307d
 8002cd0:	20000468 	.word	0x20000468
 8002cd4:	20000464 	.word	0x20000464
 8002cd8:	20000450 	.word	0x20000450
 8002cdc:	20000448 	.word	0x20000448

08002ce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <vTaskSuspendAll+0x18>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a03      	ldr	r2, [pc, #12]	; (8002cf8 <vTaskSuspendAll+0x18>)
 8002cec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	2000046c 	.word	0x2000046c

08002cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <xTaskResumeAll+0x114>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	603b      	str	r3, [r7, #0]
}
 8002d24:	bf00      	nop
 8002d26:	e7fe      	b.n	8002d26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d28:	f000 fc2c 	bl	8003584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d2c:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <xTaskResumeAll+0x114>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	4a37      	ldr	r2, [pc, #220]	; (8002e10 <xTaskResumeAll+0x114>)
 8002d34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <xTaskResumeAll+0x114>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d161      	bne.n	8002e02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d3e:	4b35      	ldr	r3, [pc, #212]	; (8002e14 <xTaskResumeAll+0x118>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d05d      	beq.n	8002e02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d46:	e02e      	b.n	8002da6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <xTaskResumeAll+0x11c>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3318      	adds	r3, #24
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fd6a 	bl	800282e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fd65 	bl	800282e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	2201      	movs	r2, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <xTaskResumeAll+0x120>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <xTaskResumeAll+0x120>)
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <xTaskResumeAll+0x124>)
 8002d84:	441a      	add	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f7ff fcf1 	bl	8002774 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d96:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <xTaskResumeAll+0x128>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d302      	bcc.n	8002da6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <xTaskResumeAll+0x12c>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002da6:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <xTaskResumeAll+0x11c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1cc      	bne.n	8002d48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002db4:	f000 fa18 	bl	80031e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <xTaskResumeAll+0x130>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dc4:	f000 f846 	bl	8002e54 <xTaskIncrementTick>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <xTaskResumeAll+0x12c>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f1      	bne.n	8002dc4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <xTaskResumeAll+0x130>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <xTaskResumeAll+0x12c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002dee:	2301      	movs	r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <xTaskResumeAll+0x134>)
 8002df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e02:	f000 fbef 	bl	80035e4 <vPortExitCritical>

	return xAlreadyYielded;
 8002e06:	68bb      	ldr	r3, [r7, #8]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000046c 	.word	0x2000046c
 8002e14:	20000444 	.word	0x20000444
 8002e18:	20000404 	.word	0x20000404
 8002e1c:	2000044c 	.word	0x2000044c
 8002e20:	20000348 	.word	0x20000348
 8002e24:	20000344 	.word	0x20000344
 8002e28:	20000458 	.word	0x20000458
 8002e2c:	20000454 	.word	0x20000454
 8002e30:	e000ed04 	.word	0xe000ed04

08002e34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <xTaskGetTickCount+0x1c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000448 	.word	0x20000448

08002e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <xTaskIncrementTick+0x144>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 808e 	bne.w	8002f84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e68:	4b4c      	ldr	r3, [pc, #304]	; (8002f9c <xTaskIncrementTick+0x148>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e70:	4a4a      	ldr	r2, [pc, #296]	; (8002f9c <xTaskIncrementTick+0x148>)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d120      	bne.n	8002ebe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e7c:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <xTaskIncrementTick+0x14c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <xTaskIncrementTick+0x48>
	__asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	603b      	str	r3, [r7, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	e7fe      	b.n	8002e9a <xTaskIncrementTick+0x46>
 8002e9c:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <xTaskIncrementTick+0x14c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <xTaskIncrementTick+0x150>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a3e      	ldr	r2, [pc, #248]	; (8002fa0 <xTaskIncrementTick+0x14c>)
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4a3e      	ldr	r2, [pc, #248]	; (8002fa4 <xTaskIncrementTick+0x150>)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <xTaskIncrementTick+0x154>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	4a3c      	ldr	r2, [pc, #240]	; (8002fa8 <xTaskIncrementTick+0x154>)
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	f000 f995 	bl	80031e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <xTaskIncrementTick+0x158>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d348      	bcc.n	8002f5a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ec8:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <xTaskIncrementTick+0x14c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <xTaskIncrementTick+0x158>)
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ed8:	601a      	str	r2, [r3, #0]
					break;
 8002eda:	e03e      	b.n	8002f5a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002edc:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <xTaskIncrementTick+0x14c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d203      	bcs.n	8002efc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ef4:	4a2d      	ldr	r2, [pc, #180]	; (8002fac <xTaskIncrementTick+0x158>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002efa:	e02e      	b.n	8002f5a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	3304      	adds	r3, #4
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fc94 	bl	800282e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3318      	adds	r3, #24
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fc8b 	bl	800282e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <xTaskIncrementTick+0x15c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <xTaskIncrementTick+0x15c>)
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <xTaskIncrementTick+0x160>)
 8002f38:	441a      	add	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4610      	mov	r0, r2
 8002f42:	f7ff fc17 	bl	8002774 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <xTaskIncrementTick+0x164>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3b9      	bcc.n	8002ec8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f58:	e7b6      	b.n	8002ec8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <xTaskIncrementTick+0x164>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	4914      	ldr	r1, [pc, #80]	; (8002fb4 <xTaskIncrementTick+0x160>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d901      	bls.n	8002f76 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <xTaskIncrementTick+0x168>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	e004      	b.n	8002f8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <xTaskIncrementTick+0x16c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <xTaskIncrementTick+0x16c>)
 8002f8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f8e:	697b      	ldr	r3, [r7, #20]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	2000046c 	.word	0x2000046c
 8002f9c:	20000448 	.word	0x20000448
 8002fa0:	200003fc 	.word	0x200003fc
 8002fa4:	20000400 	.word	0x20000400
 8002fa8:	2000045c 	.word	0x2000045c
 8002fac:	20000464 	.word	0x20000464
 8002fb0:	2000044c 	.word	0x2000044c
 8002fb4:	20000348 	.word	0x20000348
 8002fb8:	20000344 	.word	0x20000344
 8002fbc:	20000458 	.word	0x20000458
 8002fc0:	20000454 	.word	0x20000454

08002fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fca:	4b27      	ldr	r3, [pc, #156]	; (8003068 <vTaskSwitchContext+0xa4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <vTaskSwitchContext+0xa8>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fd8:	e03f      	b.n	800305a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <vTaskSwitchContext+0xa8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe0:	4b23      	ldr	r3, [pc, #140]	; (8003070 <vTaskSwitchContext+0xac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002fee:	7afb      	ldrb	r3, [r7, #11]
 8002ff0:	f1c3 031f 	rsb	r3, r3, #31
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	491f      	ldr	r1, [pc, #124]	; (8003074 <vTaskSwitchContext+0xb0>)
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <vTaskSwitchContext+0x5c>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	607b      	str	r3, [r7, #4]
}
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <vTaskSwitchContext+0x5a>
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <vTaskSwitchContext+0xb0>)
 800302c:	4413      	add	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	3308      	adds	r3, #8
 8003042:	429a      	cmp	r2, r3
 8003044:	d104      	bne.n	8003050 <vTaskSwitchContext+0x8c>
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <vTaskSwitchContext+0xb4>)
 8003058:	6013      	str	r3, [r2, #0]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	2000046c 	.word	0x2000046c
 800306c:	20000458 	.word	0x20000458
 8003070:	2000044c 	.word	0x2000044c
 8003074:	20000348 	.word	0x20000348
 8003078:	20000344 	.word	0x20000344

0800307c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003084:	f000 f852 	bl	800312c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <prvIdleTask+0x28>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d9f9      	bls.n	8003084 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <prvIdleTask+0x2c>)
 8003092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030a0:	e7f0      	b.n	8003084 <prvIdleTask+0x8>
 80030a2:	bf00      	nop
 80030a4:	20000348 	.word	0x20000348
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	e00c      	b.n	80030d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4a12      	ldr	r2, [pc, #72]	; (800310c <prvInitialiseTaskLists+0x60>)
 80030c4:	4413      	add	r3, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fb27 	bl	800271a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3301      	adds	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d9ef      	bls.n	80030b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80030d8:	480d      	ldr	r0, [pc, #52]	; (8003110 <prvInitialiseTaskLists+0x64>)
 80030da:	f7ff fb1e 	bl	800271a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030de:	480d      	ldr	r0, [pc, #52]	; (8003114 <prvInitialiseTaskLists+0x68>)
 80030e0:	f7ff fb1b 	bl	800271a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030e4:	480c      	ldr	r0, [pc, #48]	; (8003118 <prvInitialiseTaskLists+0x6c>)
 80030e6:	f7ff fb18 	bl	800271a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030ea:	480c      	ldr	r0, [pc, #48]	; (800311c <prvInitialiseTaskLists+0x70>)
 80030ec:	f7ff fb15 	bl	800271a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <prvInitialiseTaskLists+0x74>)
 80030f2:	f7ff fb12 	bl	800271a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <prvInitialiseTaskLists+0x78>)
 80030f8:	4a05      	ldr	r2, [pc, #20]	; (8003110 <prvInitialiseTaskLists+0x64>)
 80030fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <prvInitialiseTaskLists+0x7c>)
 80030fe:	4a05      	ldr	r2, [pc, #20]	; (8003114 <prvInitialiseTaskLists+0x68>)
 8003100:	601a      	str	r2, [r3, #0]
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000348 	.word	0x20000348
 8003110:	200003d4 	.word	0x200003d4
 8003114:	200003e8 	.word	0x200003e8
 8003118:	20000404 	.word	0x20000404
 800311c:	20000418 	.word	0x20000418
 8003120:	20000430 	.word	0x20000430
 8003124:	200003fc 	.word	0x200003fc
 8003128:	20000400 	.word	0x20000400

0800312c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003132:	e019      	b.n	8003168 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003134:	f000 fa26 	bl	8003584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <prvCheckTasksWaitingTermination+0x50>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fb72 	bl	800282e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <prvCheckTasksWaitingTermination+0x54>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3b01      	subs	r3, #1
 8003150:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <prvCheckTasksWaitingTermination+0x54>)
 8003152:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <prvCheckTasksWaitingTermination+0x58>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3b01      	subs	r3, #1
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <prvCheckTasksWaitingTermination+0x58>)
 800315c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800315e:	f000 fa41 	bl	80035e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f810 	bl	8003188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <prvCheckTasksWaitingTermination+0x58>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e1      	bne.n	8003134 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000418 	.word	0x20000418
 8003180:	20000444 	.word	0x20000444
 8003184:	2000042c 	.word	0x2000042c

08003188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003196:	2b00      	cmp	r3, #0
 8003198:	d108      	bne.n	80031ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb9e 	bl	80038e0 <vPortFree>
				vPortFree( pxTCB );
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fb9b 	bl	80038e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031aa:	e018      	b.n	80031de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d103      	bne.n	80031be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fb92 	bl	80038e0 <vPortFree>
	}
 80031bc:	e00f      	b.n	80031de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d00a      	beq.n	80031de <prvDeleteTCB+0x56>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	60fb      	str	r3, [r7, #12]
}
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <prvDeleteTCB+0x54>
	}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <prvResetNextTaskUnblockTime+0x38>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <prvResetNextTaskUnblockTime+0x3c>)
 80031fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003200:	e008      	b.n	8003214 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <prvResetNextTaskUnblockTime+0x38>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <prvResetNextTaskUnblockTime+0x3c>)
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	200003fc 	.word	0x200003fc
 8003224:	20000464 	.word	0x20000464

08003228 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <xTaskGetSchedulerState+0x34>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003236:	2301      	movs	r3, #1
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	e008      	b.n	800324e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <xTaskGetSchedulerState+0x38>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003244:	2302      	movs	r3, #2
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	e001      	b.n	800324e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800324e:	687b      	ldr	r3, [r7, #4]
	}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	20000450 	.word	0x20000450
 8003260:	2000046c 	.word	0x2000046c

08003264 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800326e:	4b29      	ldr	r3, [pc, #164]	; (8003314 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3304      	adds	r3, #4
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fad7 	bl	800282e <uxListRemove>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	2201      	movs	r2, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4013      	ands	r3, r2
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <prvAddCurrentTaskToDelayedList+0xb8>)
 800329c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a4:	d10a      	bne.n	80032bc <prvAddCurrentTaskToDelayedList+0x58>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	481a      	ldr	r0, [pc, #104]	; (8003320 <prvAddCurrentTaskToDelayedList+0xbc>)
 80032b6:	f7ff fa5d 	bl	8002774 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032ba:	e026      	b.n	800330a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d209      	bcs.n	80032e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <prvAddCurrentTaskToDelayedList+0xc0>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3304      	adds	r3, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f7ff fa6b 	bl	80027bc <vListInsert>
}
 80032e6:	e010      	b.n	800330a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <prvAddCurrentTaskToDelayedList+0xc4>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3304      	adds	r3, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7ff fa61 	bl	80027bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <prvAddCurrentTaskToDelayedList+0xc8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	d202      	bcs.n	800330a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	6013      	str	r3, [r2, #0]
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000448 	.word	0x20000448
 8003318:	20000344 	.word	0x20000344
 800331c:	2000044c 	.word	0x2000044c
 8003320:	20000430 	.word	0x20000430
 8003324:	20000400 	.word	0x20000400
 8003328:	200003fc 	.word	0x200003fc
 800332c:	20000464 	.word	0x20000464

08003330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3b04      	subs	r3, #4
 8003340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3b04      	subs	r3, #4
 800334e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f023 0201 	bic.w	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3b04      	subs	r3, #4
 800335e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003360:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <pxPortInitialiseStack+0x64>)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3b14      	subs	r3, #20
 800336a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3b04      	subs	r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f06f 0202 	mvn.w	r2, #2
 800337e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3b20      	subs	r3, #32
 8003384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003386:	68fb      	ldr	r3, [r7, #12]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	08003399 	.word	0x08003399

08003398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <prvTaskExitError+0x54>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033aa:	d00a      	beq.n	80033c2 <prvTaskExitError+0x2a>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	60fb      	str	r3, [r7, #12]
}
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <prvTaskExitError+0x28>
	__asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60bb      	str	r3, [r7, #8]
}
 80033d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80033d6:	bf00      	nop
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0fc      	beq.n	80033d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	2000000c 	.word	0x2000000c

080033f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <pxCurrentTCBConst2>)
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	6808      	ldr	r0, [r1, #0]
 80033f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fa:	f380 8809 	msr	PSP, r0
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f380 8811 	msr	BASEPRI, r0
 800340a:	4770      	bx	lr
 800340c:	f3af 8000 	nop.w

08003410 <pxCurrentTCBConst2>:
 8003410:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop

08003418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003418:	4808      	ldr	r0, [pc, #32]	; (800343c <prvPortStartFirstTask+0x24>)
 800341a:	6800      	ldr	r0, [r0, #0]
 800341c:	6800      	ldr	r0, [r0, #0]
 800341e:	f380 8808 	msr	MSP, r0
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f380 8814 	msr	CONTROL, r0
 800342a:	b662      	cpsie	i
 800342c:	b661      	cpsie	f
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	df00      	svc	0
 8003438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800343a:	bf00      	nop
 800343c:	e000ed08 	.word	0xe000ed08

08003440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003446:	4b46      	ldr	r3, [pc, #280]	; (8003560 <xPortStartScheduler+0x120>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a46      	ldr	r2, [pc, #280]	; (8003564 <xPortStartScheduler+0x124>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d10a      	bne.n	8003466 <xPortStartScheduler+0x26>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	613b      	str	r3, [r7, #16]
}
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003466:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <xPortStartScheduler+0x120>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a3f      	ldr	r2, [pc, #252]	; (8003568 <xPortStartScheduler+0x128>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10a      	bne.n	8003486 <xPortStartScheduler+0x46>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	60fb      	str	r3, [r7, #12]
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <xPortStartScheduler+0x12c>)
 8003488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4b31      	ldr	r3, [pc, #196]	; (8003570 <xPortStartScheduler+0x130>)
 80034ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034ae:	4b31      	ldr	r3, [pc, #196]	; (8003574 <xPortStartScheduler+0x134>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034b4:	e009      	b.n	80034ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80034b6:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <xPortStartScheduler+0x134>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	4a2d      	ldr	r2, [pc, #180]	; (8003574 <xPortStartScheduler+0x134>)
 80034be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d2:	2b80      	cmp	r3, #128	; 0x80
 80034d4:	d0ef      	beq.n	80034b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034d6:	4b27      	ldr	r3, [pc, #156]	; (8003574 <xPortStartScheduler+0x134>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d00a      	beq.n	80034f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	60bb      	str	r3, [r7, #8]
}
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034f8:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <xPortStartScheduler+0x134>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <xPortStartScheduler+0x134>)
 8003500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <xPortStartScheduler+0x134>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800350a:	4a1a      	ldr	r2, [pc, #104]	; (8003574 <xPortStartScheduler+0x134>)
 800350c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <xPortStartScheduler+0x138>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a17      	ldr	r2, [pc, #92]	; (8003578 <xPortStartScheduler+0x138>)
 800351c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <xPortStartScheduler+0x138>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a14      	ldr	r2, [pc, #80]	; (8003578 <xPortStartScheduler+0x138>)
 8003528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800352c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800352e:	f000 f8dd 	bl	80036ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <xPortStartScheduler+0x13c>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003538:	f000 f8fc 	bl	8003734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800353c:	4b10      	ldr	r3, [pc, #64]	; (8003580 <xPortStartScheduler+0x140>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <xPortStartScheduler+0x140>)
 8003542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003548:	f7ff ff66 	bl	8003418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800354c:	f7ff fd3a 	bl	8002fc4 <vTaskSwitchContext>
	prvTaskExitError();
 8003550:	f7ff ff22 	bl	8003398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	e000ed00 	.word	0xe000ed00
 8003564:	410fc271 	.word	0x410fc271
 8003568:	410fc270 	.word	0x410fc270
 800356c:	e000e400 	.word	0xe000e400
 8003570:	20000470 	.word	0x20000470
 8003574:	20000474 	.word	0x20000474
 8003578:	e000ed20 	.word	0xe000ed20
 800357c:	2000000c 	.word	0x2000000c
 8003580:	e000ef34 	.word	0xe000ef34

08003584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	607b      	str	r3, [r7, #4]
}
 800359c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <vPortEnterCritical+0x58>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3301      	adds	r3, #1
 80035a4:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <vPortEnterCritical+0x58>)
 80035a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <vPortEnterCritical+0x58>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d10f      	bne.n	80035d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <vPortEnterCritical+0x5c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	603b      	str	r3, [r7, #0]
}
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <vPortEnterCritical+0x4a>
	}
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	2000000c 	.word	0x2000000c
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80035ea:	4b12      	ldr	r3, [pc, #72]	; (8003634 <vPortExitCritical+0x50>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <vPortExitCritical+0x24>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	607b      	str	r3, [r7, #4]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <vPortExitCritical+0x50>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3b01      	subs	r3, #1
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <vPortExitCritical+0x50>)
 8003610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <vPortExitCritical+0x50>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <vPortExitCritical+0x42>
 800361a:	2300      	movs	r3, #0
 800361c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	2000000c 	.word	0x2000000c
	...

08003640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003640:	f3ef 8009 	mrs	r0, PSP
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <pxCurrentTCBConst>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	f01e 0f10 	tst.w	lr, #16
 8003650:	bf08      	it	eq
 8003652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365a:	6010      	str	r0, [r2, #0]
 800365c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003664:	f380 8811 	msr	BASEPRI, r0
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f7ff fca8 	bl	8002fc4 <vTaskSwitchContext>
 8003674:	f04f 0000 	mov.w	r0, #0
 8003678:	f380 8811 	msr	BASEPRI, r0
 800367c:	bc09      	pop	{r0, r3}
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	6808      	ldr	r0, [r1, #0]
 8003682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003686:	f01e 0f10 	tst.w	lr, #16
 800368a:	bf08      	it	eq
 800368c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003690:	f380 8809 	msr	PSP, r0
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	f3af 8000 	nop.w

080036a0 <pxCurrentTCBConst>:
 80036a0:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop

080036a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	607b      	str	r3, [r7, #4]
}
 80036c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80036c2:	f7ff fbc7 	bl	8002e54 <xTaskIncrementTick>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <xPortSysTickHandler+0x40>)
 80036ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f383 8811 	msr	BASEPRI, r3
}
 80036de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <vPortSetupTimerInterrupt+0x34>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <vPortSetupTimerInterrupt+0x38>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <vPortSetupTimerInterrupt+0x3c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0a      	ldr	r2, [pc, #40]	; (800372c <vPortSetupTimerInterrupt+0x40>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	4a09      	ldr	r2, [pc, #36]	; (8003730 <vPortSetupTimerInterrupt+0x44>)
 800370a:	3b01      	subs	r3, #1
 800370c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <vPortSetupTimerInterrupt+0x34>)
 8003710:	2207      	movs	r2, #7
 8003712:	601a      	str	r2, [r3, #0]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	e000e010 	.word	0xe000e010
 8003724:	e000e018 	.word	0xe000e018
 8003728:	20000000 	.word	0x20000000
 800372c:	10624dd3 	.word	0x10624dd3
 8003730:	e000e014 	.word	0xe000e014

08003734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003744 <vPortEnableVFP+0x10>
 8003738:	6801      	ldr	r1, [r0, #0]
 800373a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800373e:	6001      	str	r1, [r0, #0]
 8003740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003742:	bf00      	nop
 8003744:	e000ed88 	.word	0xe000ed88

08003748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003754:	f7ff fac4 	bl	8002ce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003758:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <pvPortMalloc+0x180>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003760:	f000 f920 	bl	80039a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003764:	4b59      	ldr	r3, [pc, #356]	; (80038cc <pvPortMalloc+0x184>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f040 8093 	bne.w	8003898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01d      	beq.n	80037b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003778:	2208      	movs	r2, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	2b00      	cmp	r3, #0
 8003788:	d014      	beq.n	80037b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f023 0307 	bic.w	r3, r3, #7
 8003790:	3308      	adds	r3, #8
 8003792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <pvPortMalloc+0x6c>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	617b      	str	r3, [r7, #20]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d06e      	beq.n	8003898 <pvPortMalloc+0x150>
 80037ba:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <pvPortMalloc+0x188>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d869      	bhi.n	8003898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <pvPortMalloc+0x18c>)
 80037c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <pvPortMalloc+0x18c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037ce:	e004      	b.n	80037da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d903      	bls.n	80037ec <pvPortMalloc+0xa4>
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f1      	bne.n	80037d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80037ec:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <pvPortMalloc+0x180>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d050      	beq.n	8003898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2208      	movs	r2, #8
 80037fc:	4413      	add	r3, r2
 80037fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1ad2      	subs	r2, r2, r3
 8003810:	2308      	movs	r3, #8
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	429a      	cmp	r2, r3
 8003816:	d91f      	bls.n	8003858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <pvPortMalloc+0xf8>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	613b      	str	r3, [r7, #16]
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003852:	69b8      	ldr	r0, [r7, #24]
 8003854:	f000 f908 	bl	8003a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <pvPortMalloc+0x188>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <pvPortMalloc+0x188>)
 8003864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003866:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <pvPortMalloc+0x188>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <pvPortMalloc+0x190>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d203      	bcs.n	800387a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <pvPortMalloc+0x188>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <pvPortMalloc+0x190>)
 8003878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <pvPortMalloc+0x184>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	431a      	orrs	r2, r3
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <pvPortMalloc+0x194>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a11      	ldr	r2, [pc, #68]	; (80038dc <pvPortMalloc+0x194>)
 8003896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003898:	f7ff fa30 	bl	8002cfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <pvPortMalloc+0x174>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	60fb      	str	r3, [r7, #12]
}
 80038b8:	bf00      	nop
 80038ba:	e7fe      	b.n	80038ba <pvPortMalloc+0x172>
	return pvReturn;
 80038bc:	69fb      	ldr	r3, [r7, #28]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3728      	adds	r7, #40	; 0x28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20004080 	.word	0x20004080
 80038cc:	20004094 	.word	0x20004094
 80038d0:	20004084 	.word	0x20004084
 80038d4:	20004078 	.word	0x20004078
 80038d8:	20004088 	.word	0x20004088
 80038dc:	2000408c 	.word	0x2000408c

080038e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d04d      	beq.n	800398e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80038f2:	2308      	movs	r3, #8
 80038f4:	425b      	negs	r3, r3
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4413      	add	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <vPortFree+0xb8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10a      	bne.n	8003924 <vPortFree+0x44>
	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	60fb      	str	r3, [r7, #12]
}
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <vPortFree+0x62>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	60bb      	str	r3, [r7, #8]
}
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4b14      	ldr	r3, [pc, #80]	; (8003998 <vPortFree+0xb8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01e      	beq.n	800398e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11a      	bne.n	800398e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <vPortFree+0xb8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	43db      	mvns	r3, r3
 8003962:	401a      	ands	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003968:	f7ff f9ba 	bl	8002ce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <vPortFree+0xbc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4413      	add	r3, r2
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <vPortFree+0xbc>)
 8003978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800397a:	6938      	ldr	r0, [r7, #16]
 800397c:	f000 f874 	bl	8003a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <vPortFree+0xc0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <vPortFree+0xc0>)
 8003988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800398a:	f7ff f9b7 	bl	8002cfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20004094 	.word	0x20004094
 800399c:	20004084 	.word	0x20004084
 80039a0:	20004090 	.word	0x20004090

080039a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80039ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <prvHeapInit+0xac>)
 80039b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3307      	adds	r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <prvHeapInit+0xac>)
 80039d4:	4413      	add	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <prvHeapInit+0xb0>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <prvHeapInit+0xb0>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80039f0:	2208      	movs	r2, #8
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0307 	bic.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <prvHeapInit+0xb4>)
 8003a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <prvHeapInit+0xb4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <prvHeapInit+0xb4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <prvHeapInit+0xb4>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <prvHeapInit+0xb8>)
 8003a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <prvHeapInit+0xbc>)
 8003a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <prvHeapInit+0xc0>)
 8003a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	20000478 	.word	0x20000478
 8003a54:	20004078 	.word	0x20004078
 8003a58:	20004080 	.word	0x20004080
 8003a5c:	20004088 	.word	0x20004088
 8003a60:	20004084 	.word	0x20004084
 8003a64:	20004094 	.word	0x20004094

08003a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <prvInsertBlockIntoFreeList+0xac>)
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e002      	b.n	8003a7c <prvInsertBlockIntoFreeList+0x14>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d8f7      	bhi.n	8003a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4413      	add	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d108      	bne.n	8003aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	441a      	add	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d118      	bne.n	8003af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d00d      	beq.n	8003ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	441a      	add	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e008      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e003      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d002      	beq.n	8003b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20004078 	.word	0x20004078
 8003b18:	20004080 	.word	0x20004080

08003b1c <__errno>:
 8003b1c:	4b01      	ldr	r3, [pc, #4]	; (8003b24 <__errno+0x8>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000010 	.word	0x20000010

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	; (8003b60 <__libc_init_array+0x38>)
 8003b2c:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b2e:	1b64      	subs	r4, r4, r5
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	2600      	movs	r6, #0
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	4d0b      	ldr	r5, [pc, #44]	; (8003b68 <__libc_init_array+0x40>)
 8003b3a:	4c0c      	ldr	r4, [pc, #48]	; (8003b6c <__libc_init_array+0x44>)
 8003b3c:	f000 fc8e 	bl	800445c <_init>
 8003b40:	1b64      	subs	r4, r4, r5
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	2600      	movs	r6, #0
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08004728 	.word	0x08004728
 8003b64:	08004728 	.word	0x08004728
 8003b68:	08004728 	.word	0x08004728
 8003b6c:	0800472c 	.word	0x0800472c

08003b70 <memcpy>:
 8003b70:	440a      	add	r2, r1
 8003b72:	4291      	cmp	r1, r2
 8003b74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b78:	d100      	bne.n	8003b7c <memcpy+0xc>
 8003b7a:	4770      	bx	lr
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b86:	4291      	cmp	r1, r2
 8003b88:	d1f9      	bne.n	8003b7e <memcpy+0xe>
 8003b8a:	bd10      	pop	{r4, pc}

08003b8c <memset>:
 8003b8c:	4402      	add	r2, r0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d100      	bne.n	8003b96 <memset+0xa>
 8003b94:	4770      	bx	lr
 8003b96:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9a:	e7f9      	b.n	8003b90 <memset+0x4>

08003b9c <siprintf>:
 8003b9c:	b40e      	push	{r1, r2, r3}
 8003b9e:	b500      	push	{lr}
 8003ba0:	b09c      	sub	sp, #112	; 0x70
 8003ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ba4:	9002      	str	r0, [sp, #8]
 8003ba6:	9006      	str	r0, [sp, #24]
 8003ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bac:	4809      	ldr	r0, [pc, #36]	; (8003bd4 <siprintf+0x38>)
 8003bae:	9107      	str	r1, [sp, #28]
 8003bb0:	9104      	str	r1, [sp, #16]
 8003bb2:	4909      	ldr	r1, [pc, #36]	; (8003bd8 <siprintf+0x3c>)
 8003bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bb8:	9105      	str	r1, [sp, #20]
 8003bba:	6800      	ldr	r0, [r0, #0]
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	a902      	add	r1, sp, #8
 8003bc0:	f000 f868 	bl	8003c94 <_svfiprintf_r>
 8003bc4:	9b02      	ldr	r3, [sp, #8]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	b01c      	add	sp, #112	; 0x70
 8003bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bd0:	b003      	add	sp, #12
 8003bd2:	4770      	bx	lr
 8003bd4:	20000010 	.word	0x20000010
 8003bd8:	ffff0208 	.word	0xffff0208

08003bdc <__ssputs_r>:
 8003bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be0:	688e      	ldr	r6, [r1, #8]
 8003be2:	429e      	cmp	r6, r3
 8003be4:	4682      	mov	sl, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	4690      	mov	r8, r2
 8003bea:	461f      	mov	r7, r3
 8003bec:	d838      	bhi.n	8003c60 <__ssputs_r+0x84>
 8003bee:	898a      	ldrh	r2, [r1, #12]
 8003bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bf4:	d032      	beq.n	8003c5c <__ssputs_r+0x80>
 8003bf6:	6825      	ldr	r5, [r4, #0]
 8003bf8:	6909      	ldr	r1, [r1, #16]
 8003bfa:	eba5 0901 	sub.w	r9, r5, r1
 8003bfe:	6965      	ldr	r5, [r4, #20]
 8003c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c08:	3301      	adds	r3, #1
 8003c0a:	444b      	add	r3, r9
 8003c0c:	106d      	asrs	r5, r5, #1
 8003c0e:	429d      	cmp	r5, r3
 8003c10:	bf38      	it	cc
 8003c12:	461d      	movcc	r5, r3
 8003c14:	0553      	lsls	r3, r2, #21
 8003c16:	d531      	bpl.n	8003c7c <__ssputs_r+0xa0>
 8003c18:	4629      	mov	r1, r5
 8003c1a:	f000 fb55 	bl	80042c8 <_malloc_r>
 8003c1e:	4606      	mov	r6, r0
 8003c20:	b950      	cbnz	r0, 8003c38 <__ssputs_r+0x5c>
 8003c22:	230c      	movs	r3, #12
 8003c24:	f8ca 3000 	str.w	r3, [sl]
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2e:	81a3      	strh	r3, [r4, #12]
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c38:	6921      	ldr	r1, [r4, #16]
 8003c3a:	464a      	mov	r2, r9
 8003c3c:	f7ff ff98 	bl	8003b70 <memcpy>
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4a:	81a3      	strh	r3, [r4, #12]
 8003c4c:	6126      	str	r6, [r4, #16]
 8003c4e:	6165      	str	r5, [r4, #20]
 8003c50:	444e      	add	r6, r9
 8003c52:	eba5 0509 	sub.w	r5, r5, r9
 8003c56:	6026      	str	r6, [r4, #0]
 8003c58:	60a5      	str	r5, [r4, #8]
 8003c5a:	463e      	mov	r6, r7
 8003c5c:	42be      	cmp	r6, r7
 8003c5e:	d900      	bls.n	8003c62 <__ssputs_r+0x86>
 8003c60:	463e      	mov	r6, r7
 8003c62:	6820      	ldr	r0, [r4, #0]
 8003c64:	4632      	mov	r2, r6
 8003c66:	4641      	mov	r1, r8
 8003c68:	f000 faa8 	bl	80041bc <memmove>
 8003c6c:	68a3      	ldr	r3, [r4, #8]
 8003c6e:	1b9b      	subs	r3, r3, r6
 8003c70:	60a3      	str	r3, [r4, #8]
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	4433      	add	r3, r6
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e7db      	b.n	8003c34 <__ssputs_r+0x58>
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	f000 fb97 	bl	80043b0 <_realloc_r>
 8003c82:	4606      	mov	r6, r0
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d1e1      	bne.n	8003c4c <__ssputs_r+0x70>
 8003c88:	6921      	ldr	r1, [r4, #16]
 8003c8a:	4650      	mov	r0, sl
 8003c8c:	f000 fab0 	bl	80041f0 <_free_r>
 8003c90:	e7c7      	b.n	8003c22 <__ssputs_r+0x46>
	...

08003c94 <_svfiprintf_r>:
 8003c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c98:	4698      	mov	r8, r3
 8003c9a:	898b      	ldrh	r3, [r1, #12]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	b09d      	sub	sp, #116	; 0x74
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	460d      	mov	r5, r1
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	d50e      	bpl.n	8003cc6 <_svfiprintf_r+0x32>
 8003ca8:	690b      	ldr	r3, [r1, #16]
 8003caa:	b963      	cbnz	r3, 8003cc6 <_svfiprintf_r+0x32>
 8003cac:	2140      	movs	r1, #64	; 0x40
 8003cae:	f000 fb0b 	bl	80042c8 <_malloc_r>
 8003cb2:	6028      	str	r0, [r5, #0]
 8003cb4:	6128      	str	r0, [r5, #16]
 8003cb6:	b920      	cbnz	r0, 8003cc2 <_svfiprintf_r+0x2e>
 8003cb8:	230c      	movs	r3, #12
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc0:	e0d1      	b.n	8003e66 <_svfiprintf_r+0x1d2>
 8003cc2:	2340      	movs	r3, #64	; 0x40
 8003cc4:	616b      	str	r3, [r5, #20]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8003cca:	2320      	movs	r3, #32
 8003ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cd4:	2330      	movs	r3, #48	; 0x30
 8003cd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e80 <_svfiprintf_r+0x1ec>
 8003cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cde:	f04f 0901 	mov.w	r9, #1
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	469a      	mov	sl, r3
 8003ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cea:	b10a      	cbz	r2, 8003cf0 <_svfiprintf_r+0x5c>
 8003cec:	2a25      	cmp	r2, #37	; 0x25
 8003cee:	d1f9      	bne.n	8003ce4 <_svfiprintf_r+0x50>
 8003cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8003cf4:	d00b      	beq.n	8003d0e <_svfiprintf_r+0x7a>
 8003cf6:	465b      	mov	r3, fp
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	f7ff ff6d 	bl	8003bdc <__ssputs_r>
 8003d02:	3001      	adds	r0, #1
 8003d04:	f000 80aa 	beq.w	8003e5c <_svfiprintf_r+0x1c8>
 8003d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d0a:	445a      	add	r2, fp
 8003d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80a2 	beq.w	8003e5c <_svfiprintf_r+0x1c8>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d22:	f10a 0a01 	add.w	sl, sl, #1
 8003d26:	9304      	str	r3, [sp, #16]
 8003d28:	9307      	str	r3, [sp, #28]
 8003d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d30:	4654      	mov	r4, sl
 8003d32:	2205      	movs	r2, #5
 8003d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d38:	4851      	ldr	r0, [pc, #324]	; (8003e80 <_svfiprintf_r+0x1ec>)
 8003d3a:	f7fc fa61 	bl	8000200 <memchr>
 8003d3e:	9a04      	ldr	r2, [sp, #16]
 8003d40:	b9d8      	cbnz	r0, 8003d7a <_svfiprintf_r+0xe6>
 8003d42:	06d0      	lsls	r0, r2, #27
 8003d44:	bf44      	itt	mi
 8003d46:	2320      	movmi	r3, #32
 8003d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d4c:	0711      	lsls	r1, r2, #28
 8003d4e:	bf44      	itt	mi
 8003d50:	232b      	movmi	r3, #43	; 0x2b
 8003d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d56:	f89a 3000 	ldrb.w	r3, [sl]
 8003d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d5c:	d015      	beq.n	8003d8a <_svfiprintf_r+0xf6>
 8003d5e:	9a07      	ldr	r2, [sp, #28]
 8003d60:	4654      	mov	r4, sl
 8003d62:	2000      	movs	r0, #0
 8003d64:	f04f 0c0a 	mov.w	ip, #10
 8003d68:	4621      	mov	r1, r4
 8003d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d6e:	3b30      	subs	r3, #48	; 0x30
 8003d70:	2b09      	cmp	r3, #9
 8003d72:	d94e      	bls.n	8003e12 <_svfiprintf_r+0x17e>
 8003d74:	b1b0      	cbz	r0, 8003da4 <_svfiprintf_r+0x110>
 8003d76:	9207      	str	r2, [sp, #28]
 8003d78:	e014      	b.n	8003da4 <_svfiprintf_r+0x110>
 8003d7a:	eba0 0308 	sub.w	r3, r0, r8
 8003d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d82:	4313      	orrs	r3, r2
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	46a2      	mov	sl, r4
 8003d88:	e7d2      	b.n	8003d30 <_svfiprintf_r+0x9c>
 8003d8a:	9b03      	ldr	r3, [sp, #12]
 8003d8c:	1d19      	adds	r1, r3, #4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	9103      	str	r1, [sp, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bfbb      	ittet	lt
 8003d96:	425b      	neglt	r3, r3
 8003d98:	f042 0202 	orrlt.w	r2, r2, #2
 8003d9c:	9307      	strge	r3, [sp, #28]
 8003d9e:	9307      	strlt	r3, [sp, #28]
 8003da0:	bfb8      	it	lt
 8003da2:	9204      	strlt	r2, [sp, #16]
 8003da4:	7823      	ldrb	r3, [r4, #0]
 8003da6:	2b2e      	cmp	r3, #46	; 0x2e
 8003da8:	d10c      	bne.n	8003dc4 <_svfiprintf_r+0x130>
 8003daa:	7863      	ldrb	r3, [r4, #1]
 8003dac:	2b2a      	cmp	r3, #42	; 0x2a
 8003dae:	d135      	bne.n	8003e1c <_svfiprintf_r+0x188>
 8003db0:	9b03      	ldr	r3, [sp, #12]
 8003db2:	1d1a      	adds	r2, r3, #4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	9203      	str	r2, [sp, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bfb8      	it	lt
 8003dbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003dc0:	3402      	adds	r4, #2
 8003dc2:	9305      	str	r3, [sp, #20]
 8003dc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e90 <_svfiprintf_r+0x1fc>
 8003dc8:	7821      	ldrb	r1, [r4, #0]
 8003dca:	2203      	movs	r2, #3
 8003dcc:	4650      	mov	r0, sl
 8003dce:	f7fc fa17 	bl	8000200 <memchr>
 8003dd2:	b140      	cbz	r0, 8003de6 <_svfiprintf_r+0x152>
 8003dd4:	2340      	movs	r3, #64	; 0x40
 8003dd6:	eba0 000a 	sub.w	r0, r0, sl
 8003dda:	fa03 f000 	lsl.w	r0, r3, r0
 8003dde:	9b04      	ldr	r3, [sp, #16]
 8003de0:	4303      	orrs	r3, r0
 8003de2:	3401      	adds	r4, #1
 8003de4:	9304      	str	r3, [sp, #16]
 8003de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dea:	4826      	ldr	r0, [pc, #152]	; (8003e84 <_svfiprintf_r+0x1f0>)
 8003dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003df0:	2206      	movs	r2, #6
 8003df2:	f7fc fa05 	bl	8000200 <memchr>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d038      	beq.n	8003e6c <_svfiprintf_r+0x1d8>
 8003dfa:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <_svfiprintf_r+0x1f4>)
 8003dfc:	bb1b      	cbnz	r3, 8003e46 <_svfiprintf_r+0x1b2>
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	3307      	adds	r3, #7
 8003e02:	f023 0307 	bic.w	r3, r3, #7
 8003e06:	3308      	adds	r3, #8
 8003e08:	9303      	str	r3, [sp, #12]
 8003e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e0c:	4433      	add	r3, r6
 8003e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e10:	e767      	b.n	8003ce2 <_svfiprintf_r+0x4e>
 8003e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e16:	460c      	mov	r4, r1
 8003e18:	2001      	movs	r0, #1
 8003e1a:	e7a5      	b.n	8003d68 <_svfiprintf_r+0xd4>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	3401      	adds	r4, #1
 8003e20:	9305      	str	r3, [sp, #20]
 8003e22:	4619      	mov	r1, r3
 8003e24:	f04f 0c0a 	mov.w	ip, #10
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e2e:	3a30      	subs	r2, #48	; 0x30
 8003e30:	2a09      	cmp	r2, #9
 8003e32:	d903      	bls.n	8003e3c <_svfiprintf_r+0x1a8>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0c5      	beq.n	8003dc4 <_svfiprintf_r+0x130>
 8003e38:	9105      	str	r1, [sp, #20]
 8003e3a:	e7c3      	b.n	8003dc4 <_svfiprintf_r+0x130>
 8003e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e40:	4604      	mov	r4, r0
 8003e42:	2301      	movs	r3, #1
 8003e44:	e7f0      	b.n	8003e28 <_svfiprintf_r+0x194>
 8003e46:	ab03      	add	r3, sp, #12
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	462a      	mov	r2, r5
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <_svfiprintf_r+0x1f8>)
 8003e4e:	a904      	add	r1, sp, #16
 8003e50:	4638      	mov	r0, r7
 8003e52:	f3af 8000 	nop.w
 8003e56:	1c42      	adds	r2, r0, #1
 8003e58:	4606      	mov	r6, r0
 8003e5a:	d1d6      	bne.n	8003e0a <_svfiprintf_r+0x176>
 8003e5c:	89ab      	ldrh	r3, [r5, #12]
 8003e5e:	065b      	lsls	r3, r3, #25
 8003e60:	f53f af2c 	bmi.w	8003cbc <_svfiprintf_r+0x28>
 8003e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e66:	b01d      	add	sp, #116	; 0x74
 8003e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6c:	ab03      	add	r3, sp, #12
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	462a      	mov	r2, r5
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <_svfiprintf_r+0x1f8>)
 8003e74:	a904      	add	r1, sp, #16
 8003e76:	4638      	mov	r0, r7
 8003e78:	f000 f87a 	bl	8003f70 <_printf_i>
 8003e7c:	e7eb      	b.n	8003e56 <_svfiprintf_r+0x1c2>
 8003e7e:	bf00      	nop
 8003e80:	080046ec 	.word	0x080046ec
 8003e84:	080046f6 	.word	0x080046f6
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	08003bdd 	.word	0x08003bdd
 8003e90:	080046f2 	.word	0x080046f2

08003e94 <_printf_common>:
 8003e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	4616      	mov	r6, r2
 8003e9a:	4699      	mov	r9, r3
 8003e9c:	688a      	ldr	r2, [r1, #8]
 8003e9e:	690b      	ldr	r3, [r1, #16]
 8003ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	bfb8      	it	lt
 8003ea8:	4613      	movlt	r3, r2
 8003eaa:	6033      	str	r3, [r6, #0]
 8003eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eb0:	4607      	mov	r7, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	b10a      	cbz	r2, 8003eba <_printf_common+0x26>
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	6033      	str	r3, [r6, #0]
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	0699      	lsls	r1, r3, #26
 8003ebe:	bf42      	ittt	mi
 8003ec0:	6833      	ldrmi	r3, [r6, #0]
 8003ec2:	3302      	addmi	r3, #2
 8003ec4:	6033      	strmi	r3, [r6, #0]
 8003ec6:	6825      	ldr	r5, [r4, #0]
 8003ec8:	f015 0506 	ands.w	r5, r5, #6
 8003ecc:	d106      	bne.n	8003edc <_printf_common+0x48>
 8003ece:	f104 0a19 	add.w	sl, r4, #25
 8003ed2:	68e3      	ldr	r3, [r4, #12]
 8003ed4:	6832      	ldr	r2, [r6, #0]
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	42ab      	cmp	r3, r5
 8003eda:	dc26      	bgt.n	8003f2a <_printf_common+0x96>
 8003edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ee0:	1e13      	subs	r3, r2, #0
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	bf18      	it	ne
 8003ee6:	2301      	movne	r3, #1
 8003ee8:	0692      	lsls	r2, r2, #26
 8003eea:	d42b      	bmi.n	8003f44 <_printf_common+0xb0>
 8003eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	47c0      	blx	r8
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	d01e      	beq.n	8003f38 <_printf_common+0xa4>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	68e5      	ldr	r5, [r4, #12]
 8003efe:	6832      	ldr	r2, [r6, #0]
 8003f00:	f003 0306 	and.w	r3, r3, #6
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	bf08      	it	eq
 8003f08:	1aad      	subeq	r5, r5, r2
 8003f0a:	68a3      	ldr	r3, [r4, #8]
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	bf0c      	ite	eq
 8003f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f14:	2500      	movne	r5, #0
 8003f16:	4293      	cmp	r3, r2
 8003f18:	bfc4      	itt	gt
 8003f1a:	1a9b      	subgt	r3, r3, r2
 8003f1c:	18ed      	addgt	r5, r5, r3
 8003f1e:	2600      	movs	r6, #0
 8003f20:	341a      	adds	r4, #26
 8003f22:	42b5      	cmp	r5, r6
 8003f24:	d11a      	bne.n	8003f5c <_printf_common+0xc8>
 8003f26:	2000      	movs	r0, #0
 8003f28:	e008      	b.n	8003f3c <_printf_common+0xa8>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	4652      	mov	r2, sl
 8003f2e:	4649      	mov	r1, r9
 8003f30:	4638      	mov	r0, r7
 8003f32:	47c0      	blx	r8
 8003f34:	3001      	adds	r0, #1
 8003f36:	d103      	bne.n	8003f40 <_printf_common+0xac>
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f40:	3501      	adds	r5, #1
 8003f42:	e7c6      	b.n	8003ed2 <_printf_common+0x3e>
 8003f44:	18e1      	adds	r1, r4, r3
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	2030      	movs	r0, #48	; 0x30
 8003f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f4e:	4422      	add	r2, r4
 8003f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f58:	3302      	adds	r3, #2
 8003f5a:	e7c7      	b.n	8003eec <_printf_common+0x58>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4649      	mov	r1, r9
 8003f62:	4638      	mov	r0, r7
 8003f64:	47c0      	blx	r8
 8003f66:	3001      	adds	r0, #1
 8003f68:	d0e6      	beq.n	8003f38 <_printf_common+0xa4>
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	e7d9      	b.n	8003f22 <_printf_common+0x8e>
	...

08003f70 <_printf_i>:
 8003f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f74:	7e0f      	ldrb	r7, [r1, #24]
 8003f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f78:	2f78      	cmp	r7, #120	; 0x78
 8003f7a:	4691      	mov	r9, r2
 8003f7c:	4680      	mov	r8, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	469a      	mov	sl, r3
 8003f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f86:	d807      	bhi.n	8003f98 <_printf_i+0x28>
 8003f88:	2f62      	cmp	r7, #98	; 0x62
 8003f8a:	d80a      	bhi.n	8003fa2 <_printf_i+0x32>
 8003f8c:	2f00      	cmp	r7, #0
 8003f8e:	f000 80d8 	beq.w	8004142 <_printf_i+0x1d2>
 8003f92:	2f58      	cmp	r7, #88	; 0x58
 8003f94:	f000 80a3 	beq.w	80040de <_printf_i+0x16e>
 8003f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fa0:	e03a      	b.n	8004018 <_printf_i+0xa8>
 8003fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fa6:	2b15      	cmp	r3, #21
 8003fa8:	d8f6      	bhi.n	8003f98 <_printf_i+0x28>
 8003faa:	a101      	add	r1, pc, #4	; (adr r1, 8003fb0 <_printf_i+0x40>)
 8003fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fb0:	08004009 	.word	0x08004009
 8003fb4:	0800401d 	.word	0x0800401d
 8003fb8:	08003f99 	.word	0x08003f99
 8003fbc:	08003f99 	.word	0x08003f99
 8003fc0:	08003f99 	.word	0x08003f99
 8003fc4:	08003f99 	.word	0x08003f99
 8003fc8:	0800401d 	.word	0x0800401d
 8003fcc:	08003f99 	.word	0x08003f99
 8003fd0:	08003f99 	.word	0x08003f99
 8003fd4:	08003f99 	.word	0x08003f99
 8003fd8:	08003f99 	.word	0x08003f99
 8003fdc:	08004129 	.word	0x08004129
 8003fe0:	0800404d 	.word	0x0800404d
 8003fe4:	0800410b 	.word	0x0800410b
 8003fe8:	08003f99 	.word	0x08003f99
 8003fec:	08003f99 	.word	0x08003f99
 8003ff0:	0800414b 	.word	0x0800414b
 8003ff4:	08003f99 	.word	0x08003f99
 8003ff8:	0800404d 	.word	0x0800404d
 8003ffc:	08003f99 	.word	0x08003f99
 8004000:	08003f99 	.word	0x08003f99
 8004004:	08004113 	.word	0x08004113
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	1d1a      	adds	r2, r3, #4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	602a      	str	r2, [r5, #0]
 8004010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004018:	2301      	movs	r3, #1
 800401a:	e0a3      	b.n	8004164 <_printf_i+0x1f4>
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	6829      	ldr	r1, [r5, #0]
 8004020:	0606      	lsls	r6, r0, #24
 8004022:	f101 0304 	add.w	r3, r1, #4
 8004026:	d50a      	bpl.n	800403e <_printf_i+0xce>
 8004028:	680e      	ldr	r6, [r1, #0]
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	2e00      	cmp	r6, #0
 800402e:	da03      	bge.n	8004038 <_printf_i+0xc8>
 8004030:	232d      	movs	r3, #45	; 0x2d
 8004032:	4276      	negs	r6, r6
 8004034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004038:	485e      	ldr	r0, [pc, #376]	; (80041b4 <_printf_i+0x244>)
 800403a:	230a      	movs	r3, #10
 800403c:	e019      	b.n	8004072 <_printf_i+0x102>
 800403e:	680e      	ldr	r6, [r1, #0]
 8004040:	602b      	str	r3, [r5, #0]
 8004042:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004046:	bf18      	it	ne
 8004048:	b236      	sxthne	r6, r6
 800404a:	e7ef      	b.n	800402c <_printf_i+0xbc>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	6820      	ldr	r0, [r4, #0]
 8004050:	1d19      	adds	r1, r3, #4
 8004052:	6029      	str	r1, [r5, #0]
 8004054:	0601      	lsls	r1, r0, #24
 8004056:	d501      	bpl.n	800405c <_printf_i+0xec>
 8004058:	681e      	ldr	r6, [r3, #0]
 800405a:	e002      	b.n	8004062 <_printf_i+0xf2>
 800405c:	0646      	lsls	r6, r0, #25
 800405e:	d5fb      	bpl.n	8004058 <_printf_i+0xe8>
 8004060:	881e      	ldrh	r6, [r3, #0]
 8004062:	4854      	ldr	r0, [pc, #336]	; (80041b4 <_printf_i+0x244>)
 8004064:	2f6f      	cmp	r7, #111	; 0x6f
 8004066:	bf0c      	ite	eq
 8004068:	2308      	moveq	r3, #8
 800406a:	230a      	movne	r3, #10
 800406c:	2100      	movs	r1, #0
 800406e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004072:	6865      	ldr	r5, [r4, #4]
 8004074:	60a5      	str	r5, [r4, #8]
 8004076:	2d00      	cmp	r5, #0
 8004078:	bfa2      	ittt	ge
 800407a:	6821      	ldrge	r1, [r4, #0]
 800407c:	f021 0104 	bicge.w	r1, r1, #4
 8004080:	6021      	strge	r1, [r4, #0]
 8004082:	b90e      	cbnz	r6, 8004088 <_printf_i+0x118>
 8004084:	2d00      	cmp	r5, #0
 8004086:	d04d      	beq.n	8004124 <_printf_i+0x1b4>
 8004088:	4615      	mov	r5, r2
 800408a:	fbb6 f1f3 	udiv	r1, r6, r3
 800408e:	fb03 6711 	mls	r7, r3, r1, r6
 8004092:	5dc7      	ldrb	r7, [r0, r7]
 8004094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004098:	4637      	mov	r7, r6
 800409a:	42bb      	cmp	r3, r7
 800409c:	460e      	mov	r6, r1
 800409e:	d9f4      	bls.n	800408a <_printf_i+0x11a>
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d10b      	bne.n	80040bc <_printf_i+0x14c>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	07de      	lsls	r6, r3, #31
 80040a8:	d508      	bpl.n	80040bc <_printf_i+0x14c>
 80040aa:	6923      	ldr	r3, [r4, #16]
 80040ac:	6861      	ldr	r1, [r4, #4]
 80040ae:	4299      	cmp	r1, r3
 80040b0:	bfde      	ittt	le
 80040b2:	2330      	movle	r3, #48	; 0x30
 80040b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040bc:	1b52      	subs	r2, r2, r5
 80040be:	6122      	str	r2, [r4, #16]
 80040c0:	f8cd a000 	str.w	sl, [sp]
 80040c4:	464b      	mov	r3, r9
 80040c6:	aa03      	add	r2, sp, #12
 80040c8:	4621      	mov	r1, r4
 80040ca:	4640      	mov	r0, r8
 80040cc:	f7ff fee2 	bl	8003e94 <_printf_common>
 80040d0:	3001      	adds	r0, #1
 80040d2:	d14c      	bne.n	800416e <_printf_i+0x1fe>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040d8:	b004      	add	sp, #16
 80040da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040de:	4835      	ldr	r0, [pc, #212]	; (80041b4 <_printf_i+0x244>)
 80040e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040e4:	6829      	ldr	r1, [r5, #0]
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80040ec:	6029      	str	r1, [r5, #0]
 80040ee:	061d      	lsls	r5, r3, #24
 80040f0:	d514      	bpl.n	800411c <_printf_i+0x1ac>
 80040f2:	07df      	lsls	r7, r3, #31
 80040f4:	bf44      	itt	mi
 80040f6:	f043 0320 	orrmi.w	r3, r3, #32
 80040fa:	6023      	strmi	r3, [r4, #0]
 80040fc:	b91e      	cbnz	r6, 8004106 <_printf_i+0x196>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f023 0320 	bic.w	r3, r3, #32
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	2310      	movs	r3, #16
 8004108:	e7b0      	b.n	800406c <_printf_i+0xfc>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	f043 0320 	orr.w	r3, r3, #32
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	2378      	movs	r3, #120	; 0x78
 8004114:	4828      	ldr	r0, [pc, #160]	; (80041b8 <_printf_i+0x248>)
 8004116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800411a:	e7e3      	b.n	80040e4 <_printf_i+0x174>
 800411c:	0659      	lsls	r1, r3, #25
 800411e:	bf48      	it	mi
 8004120:	b2b6      	uxthmi	r6, r6
 8004122:	e7e6      	b.n	80040f2 <_printf_i+0x182>
 8004124:	4615      	mov	r5, r2
 8004126:	e7bb      	b.n	80040a0 <_printf_i+0x130>
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	6826      	ldr	r6, [r4, #0]
 800412c:	6961      	ldr	r1, [r4, #20]
 800412e:	1d18      	adds	r0, r3, #4
 8004130:	6028      	str	r0, [r5, #0]
 8004132:	0635      	lsls	r5, r6, #24
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	d501      	bpl.n	800413c <_printf_i+0x1cc>
 8004138:	6019      	str	r1, [r3, #0]
 800413a:	e002      	b.n	8004142 <_printf_i+0x1d2>
 800413c:	0670      	lsls	r0, r6, #25
 800413e:	d5fb      	bpl.n	8004138 <_printf_i+0x1c8>
 8004140:	8019      	strh	r1, [r3, #0]
 8004142:	2300      	movs	r3, #0
 8004144:	6123      	str	r3, [r4, #16]
 8004146:	4615      	mov	r5, r2
 8004148:	e7ba      	b.n	80040c0 <_printf_i+0x150>
 800414a:	682b      	ldr	r3, [r5, #0]
 800414c:	1d1a      	adds	r2, r3, #4
 800414e:	602a      	str	r2, [r5, #0]
 8004150:	681d      	ldr	r5, [r3, #0]
 8004152:	6862      	ldr	r2, [r4, #4]
 8004154:	2100      	movs	r1, #0
 8004156:	4628      	mov	r0, r5
 8004158:	f7fc f852 	bl	8000200 <memchr>
 800415c:	b108      	cbz	r0, 8004162 <_printf_i+0x1f2>
 800415e:	1b40      	subs	r0, r0, r5
 8004160:	6060      	str	r0, [r4, #4]
 8004162:	6863      	ldr	r3, [r4, #4]
 8004164:	6123      	str	r3, [r4, #16]
 8004166:	2300      	movs	r3, #0
 8004168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800416c:	e7a8      	b.n	80040c0 <_printf_i+0x150>
 800416e:	6923      	ldr	r3, [r4, #16]
 8004170:	462a      	mov	r2, r5
 8004172:	4649      	mov	r1, r9
 8004174:	4640      	mov	r0, r8
 8004176:	47d0      	blx	sl
 8004178:	3001      	adds	r0, #1
 800417a:	d0ab      	beq.n	80040d4 <_printf_i+0x164>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	079b      	lsls	r3, r3, #30
 8004180:	d413      	bmi.n	80041aa <_printf_i+0x23a>
 8004182:	68e0      	ldr	r0, [r4, #12]
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	4298      	cmp	r0, r3
 8004188:	bfb8      	it	lt
 800418a:	4618      	movlt	r0, r3
 800418c:	e7a4      	b.n	80040d8 <_printf_i+0x168>
 800418e:	2301      	movs	r3, #1
 8004190:	4632      	mov	r2, r6
 8004192:	4649      	mov	r1, r9
 8004194:	4640      	mov	r0, r8
 8004196:	47d0      	blx	sl
 8004198:	3001      	adds	r0, #1
 800419a:	d09b      	beq.n	80040d4 <_printf_i+0x164>
 800419c:	3501      	adds	r5, #1
 800419e:	68e3      	ldr	r3, [r4, #12]
 80041a0:	9903      	ldr	r1, [sp, #12]
 80041a2:	1a5b      	subs	r3, r3, r1
 80041a4:	42ab      	cmp	r3, r5
 80041a6:	dcf2      	bgt.n	800418e <_printf_i+0x21e>
 80041a8:	e7eb      	b.n	8004182 <_printf_i+0x212>
 80041aa:	2500      	movs	r5, #0
 80041ac:	f104 0619 	add.w	r6, r4, #25
 80041b0:	e7f5      	b.n	800419e <_printf_i+0x22e>
 80041b2:	bf00      	nop
 80041b4:	080046fd 	.word	0x080046fd
 80041b8:	0800470e 	.word	0x0800470e

080041bc <memmove>:
 80041bc:	4288      	cmp	r0, r1
 80041be:	b510      	push	{r4, lr}
 80041c0:	eb01 0402 	add.w	r4, r1, r2
 80041c4:	d902      	bls.n	80041cc <memmove+0x10>
 80041c6:	4284      	cmp	r4, r0
 80041c8:	4623      	mov	r3, r4
 80041ca:	d807      	bhi.n	80041dc <memmove+0x20>
 80041cc:	1e43      	subs	r3, r0, #1
 80041ce:	42a1      	cmp	r1, r4
 80041d0:	d008      	beq.n	80041e4 <memmove+0x28>
 80041d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041da:	e7f8      	b.n	80041ce <memmove+0x12>
 80041dc:	4402      	add	r2, r0
 80041de:	4601      	mov	r1, r0
 80041e0:	428a      	cmp	r2, r1
 80041e2:	d100      	bne.n	80041e6 <memmove+0x2a>
 80041e4:	bd10      	pop	{r4, pc}
 80041e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041ee:	e7f7      	b.n	80041e0 <memmove+0x24>

080041f0 <_free_r>:
 80041f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041f2:	2900      	cmp	r1, #0
 80041f4:	d044      	beq.n	8004280 <_free_r+0x90>
 80041f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041fa:	9001      	str	r0, [sp, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004202:	bfb8      	it	lt
 8004204:	18e4      	addlt	r4, r4, r3
 8004206:	f000 f913 	bl	8004430 <__malloc_lock>
 800420a:	4a1e      	ldr	r2, [pc, #120]	; (8004284 <_free_r+0x94>)
 800420c:	9801      	ldr	r0, [sp, #4]
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	b933      	cbnz	r3, 8004220 <_free_r+0x30>
 8004212:	6063      	str	r3, [r4, #4]
 8004214:	6014      	str	r4, [r2, #0]
 8004216:	b003      	add	sp, #12
 8004218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800421c:	f000 b90e 	b.w	800443c <__malloc_unlock>
 8004220:	42a3      	cmp	r3, r4
 8004222:	d908      	bls.n	8004236 <_free_r+0x46>
 8004224:	6825      	ldr	r5, [r4, #0]
 8004226:	1961      	adds	r1, r4, r5
 8004228:	428b      	cmp	r3, r1
 800422a:	bf01      	itttt	eq
 800422c:	6819      	ldreq	r1, [r3, #0]
 800422e:	685b      	ldreq	r3, [r3, #4]
 8004230:	1949      	addeq	r1, r1, r5
 8004232:	6021      	streq	r1, [r4, #0]
 8004234:	e7ed      	b.n	8004212 <_free_r+0x22>
 8004236:	461a      	mov	r2, r3
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b10b      	cbz	r3, 8004240 <_free_r+0x50>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d9fa      	bls.n	8004236 <_free_r+0x46>
 8004240:	6811      	ldr	r1, [r2, #0]
 8004242:	1855      	adds	r5, r2, r1
 8004244:	42a5      	cmp	r5, r4
 8004246:	d10b      	bne.n	8004260 <_free_r+0x70>
 8004248:	6824      	ldr	r4, [r4, #0]
 800424a:	4421      	add	r1, r4
 800424c:	1854      	adds	r4, r2, r1
 800424e:	42a3      	cmp	r3, r4
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	d1e0      	bne.n	8004216 <_free_r+0x26>
 8004254:	681c      	ldr	r4, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	6053      	str	r3, [r2, #4]
 800425a:	4421      	add	r1, r4
 800425c:	6011      	str	r1, [r2, #0]
 800425e:	e7da      	b.n	8004216 <_free_r+0x26>
 8004260:	d902      	bls.n	8004268 <_free_r+0x78>
 8004262:	230c      	movs	r3, #12
 8004264:	6003      	str	r3, [r0, #0]
 8004266:	e7d6      	b.n	8004216 <_free_r+0x26>
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	1961      	adds	r1, r4, r5
 800426c:	428b      	cmp	r3, r1
 800426e:	bf04      	itt	eq
 8004270:	6819      	ldreq	r1, [r3, #0]
 8004272:	685b      	ldreq	r3, [r3, #4]
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	bf04      	itt	eq
 8004278:	1949      	addeq	r1, r1, r5
 800427a:	6021      	streq	r1, [r4, #0]
 800427c:	6054      	str	r4, [r2, #4]
 800427e:	e7ca      	b.n	8004216 <_free_r+0x26>
 8004280:	b003      	add	sp, #12
 8004282:	bd30      	pop	{r4, r5, pc}
 8004284:	20004098 	.word	0x20004098

08004288 <sbrk_aligned>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4e0e      	ldr	r6, [pc, #56]	; (80042c4 <sbrk_aligned+0x3c>)
 800428c:	460c      	mov	r4, r1
 800428e:	6831      	ldr	r1, [r6, #0]
 8004290:	4605      	mov	r5, r0
 8004292:	b911      	cbnz	r1, 800429a <sbrk_aligned+0x12>
 8004294:	f000 f8bc 	bl	8004410 <_sbrk_r>
 8004298:	6030      	str	r0, [r6, #0]
 800429a:	4621      	mov	r1, r4
 800429c:	4628      	mov	r0, r5
 800429e:	f000 f8b7 	bl	8004410 <_sbrk_r>
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	d00a      	beq.n	80042bc <sbrk_aligned+0x34>
 80042a6:	1cc4      	adds	r4, r0, #3
 80042a8:	f024 0403 	bic.w	r4, r4, #3
 80042ac:	42a0      	cmp	r0, r4
 80042ae:	d007      	beq.n	80042c0 <sbrk_aligned+0x38>
 80042b0:	1a21      	subs	r1, r4, r0
 80042b2:	4628      	mov	r0, r5
 80042b4:	f000 f8ac 	bl	8004410 <_sbrk_r>
 80042b8:	3001      	adds	r0, #1
 80042ba:	d101      	bne.n	80042c0 <sbrk_aligned+0x38>
 80042bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80042c0:	4620      	mov	r0, r4
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	2000409c 	.word	0x2000409c

080042c8 <_malloc_r>:
 80042c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042cc:	1ccd      	adds	r5, r1, #3
 80042ce:	f025 0503 	bic.w	r5, r5, #3
 80042d2:	3508      	adds	r5, #8
 80042d4:	2d0c      	cmp	r5, #12
 80042d6:	bf38      	it	cc
 80042d8:	250c      	movcc	r5, #12
 80042da:	2d00      	cmp	r5, #0
 80042dc:	4607      	mov	r7, r0
 80042de:	db01      	blt.n	80042e4 <_malloc_r+0x1c>
 80042e0:	42a9      	cmp	r1, r5
 80042e2:	d905      	bls.n	80042f0 <_malloc_r+0x28>
 80042e4:	230c      	movs	r3, #12
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	2600      	movs	r6, #0
 80042ea:	4630      	mov	r0, r6
 80042ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f0:	4e2e      	ldr	r6, [pc, #184]	; (80043ac <_malloc_r+0xe4>)
 80042f2:	f000 f89d 	bl	8004430 <__malloc_lock>
 80042f6:	6833      	ldr	r3, [r6, #0]
 80042f8:	461c      	mov	r4, r3
 80042fa:	bb34      	cbnz	r4, 800434a <_malloc_r+0x82>
 80042fc:	4629      	mov	r1, r5
 80042fe:	4638      	mov	r0, r7
 8004300:	f7ff ffc2 	bl	8004288 <sbrk_aligned>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	4604      	mov	r4, r0
 8004308:	d14d      	bne.n	80043a6 <_malloc_r+0xde>
 800430a:	6834      	ldr	r4, [r6, #0]
 800430c:	4626      	mov	r6, r4
 800430e:	2e00      	cmp	r6, #0
 8004310:	d140      	bne.n	8004394 <_malloc_r+0xcc>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	4631      	mov	r1, r6
 8004316:	4638      	mov	r0, r7
 8004318:	eb04 0803 	add.w	r8, r4, r3
 800431c:	f000 f878 	bl	8004410 <_sbrk_r>
 8004320:	4580      	cmp	r8, r0
 8004322:	d13a      	bne.n	800439a <_malloc_r+0xd2>
 8004324:	6821      	ldr	r1, [r4, #0]
 8004326:	3503      	adds	r5, #3
 8004328:	1a6d      	subs	r5, r5, r1
 800432a:	f025 0503 	bic.w	r5, r5, #3
 800432e:	3508      	adds	r5, #8
 8004330:	2d0c      	cmp	r5, #12
 8004332:	bf38      	it	cc
 8004334:	250c      	movcc	r5, #12
 8004336:	4629      	mov	r1, r5
 8004338:	4638      	mov	r0, r7
 800433a:	f7ff ffa5 	bl	8004288 <sbrk_aligned>
 800433e:	3001      	adds	r0, #1
 8004340:	d02b      	beq.n	800439a <_malloc_r+0xd2>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	442b      	add	r3, r5
 8004346:	6023      	str	r3, [r4, #0]
 8004348:	e00e      	b.n	8004368 <_malloc_r+0xa0>
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	1b52      	subs	r2, r2, r5
 800434e:	d41e      	bmi.n	800438e <_malloc_r+0xc6>
 8004350:	2a0b      	cmp	r2, #11
 8004352:	d916      	bls.n	8004382 <_malloc_r+0xba>
 8004354:	1961      	adds	r1, r4, r5
 8004356:	42a3      	cmp	r3, r4
 8004358:	6025      	str	r5, [r4, #0]
 800435a:	bf18      	it	ne
 800435c:	6059      	strne	r1, [r3, #4]
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	bf08      	it	eq
 8004362:	6031      	streq	r1, [r6, #0]
 8004364:	5162      	str	r2, [r4, r5]
 8004366:	604b      	str	r3, [r1, #4]
 8004368:	4638      	mov	r0, r7
 800436a:	f104 060b 	add.w	r6, r4, #11
 800436e:	f000 f865 	bl	800443c <__malloc_unlock>
 8004372:	f026 0607 	bic.w	r6, r6, #7
 8004376:	1d23      	adds	r3, r4, #4
 8004378:	1af2      	subs	r2, r6, r3
 800437a:	d0b6      	beq.n	80042ea <_malloc_r+0x22>
 800437c:	1b9b      	subs	r3, r3, r6
 800437e:	50a3      	str	r3, [r4, r2]
 8004380:	e7b3      	b.n	80042ea <_malloc_r+0x22>
 8004382:	6862      	ldr	r2, [r4, #4]
 8004384:	42a3      	cmp	r3, r4
 8004386:	bf0c      	ite	eq
 8004388:	6032      	streq	r2, [r6, #0]
 800438a:	605a      	strne	r2, [r3, #4]
 800438c:	e7ec      	b.n	8004368 <_malloc_r+0xa0>
 800438e:	4623      	mov	r3, r4
 8004390:	6864      	ldr	r4, [r4, #4]
 8004392:	e7b2      	b.n	80042fa <_malloc_r+0x32>
 8004394:	4634      	mov	r4, r6
 8004396:	6876      	ldr	r6, [r6, #4]
 8004398:	e7b9      	b.n	800430e <_malloc_r+0x46>
 800439a:	230c      	movs	r3, #12
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	4638      	mov	r0, r7
 80043a0:	f000 f84c 	bl	800443c <__malloc_unlock>
 80043a4:	e7a1      	b.n	80042ea <_malloc_r+0x22>
 80043a6:	6025      	str	r5, [r4, #0]
 80043a8:	e7de      	b.n	8004368 <_malloc_r+0xa0>
 80043aa:	bf00      	nop
 80043ac:	20004098 	.word	0x20004098

080043b0 <_realloc_r>:
 80043b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b4:	4680      	mov	r8, r0
 80043b6:	4614      	mov	r4, r2
 80043b8:	460e      	mov	r6, r1
 80043ba:	b921      	cbnz	r1, 80043c6 <_realloc_r+0x16>
 80043bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c0:	4611      	mov	r1, r2
 80043c2:	f7ff bf81 	b.w	80042c8 <_malloc_r>
 80043c6:	b92a      	cbnz	r2, 80043d4 <_realloc_r+0x24>
 80043c8:	f7ff ff12 	bl	80041f0 <_free_r>
 80043cc:	4625      	mov	r5, r4
 80043ce:	4628      	mov	r0, r5
 80043d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d4:	f000 f838 	bl	8004448 <_malloc_usable_size_r>
 80043d8:	4284      	cmp	r4, r0
 80043da:	4607      	mov	r7, r0
 80043dc:	d802      	bhi.n	80043e4 <_realloc_r+0x34>
 80043de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043e2:	d812      	bhi.n	800440a <_realloc_r+0x5a>
 80043e4:	4621      	mov	r1, r4
 80043e6:	4640      	mov	r0, r8
 80043e8:	f7ff ff6e 	bl	80042c8 <_malloc_r>
 80043ec:	4605      	mov	r5, r0
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d0ed      	beq.n	80043ce <_realloc_r+0x1e>
 80043f2:	42bc      	cmp	r4, r7
 80043f4:	4622      	mov	r2, r4
 80043f6:	4631      	mov	r1, r6
 80043f8:	bf28      	it	cs
 80043fa:	463a      	movcs	r2, r7
 80043fc:	f7ff fbb8 	bl	8003b70 <memcpy>
 8004400:	4631      	mov	r1, r6
 8004402:	4640      	mov	r0, r8
 8004404:	f7ff fef4 	bl	80041f0 <_free_r>
 8004408:	e7e1      	b.n	80043ce <_realloc_r+0x1e>
 800440a:	4635      	mov	r5, r6
 800440c:	e7df      	b.n	80043ce <_realloc_r+0x1e>
	...

08004410 <_sbrk_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4d06      	ldr	r5, [pc, #24]	; (800442c <_sbrk_r+0x1c>)
 8004414:	2300      	movs	r3, #0
 8004416:	4604      	mov	r4, r0
 8004418:	4608      	mov	r0, r1
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	f7fc fcfc 	bl	8000e18 <_sbrk>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d102      	bne.n	800442a <_sbrk_r+0x1a>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	b103      	cbz	r3, 800442a <_sbrk_r+0x1a>
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	200040a0 	.word	0x200040a0

08004430 <__malloc_lock>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__malloc_lock+0x8>)
 8004432:	f000 b811 	b.w	8004458 <__retarget_lock_acquire_recursive>
 8004436:	bf00      	nop
 8004438:	200040a4 	.word	0x200040a4

0800443c <__malloc_unlock>:
 800443c:	4801      	ldr	r0, [pc, #4]	; (8004444 <__malloc_unlock+0x8>)
 800443e:	f000 b80c 	b.w	800445a <__retarget_lock_release_recursive>
 8004442:	bf00      	nop
 8004444:	200040a4 	.word	0x200040a4

08004448 <_malloc_usable_size_r>:
 8004448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800444c:	1f18      	subs	r0, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	bfbc      	itt	lt
 8004452:	580b      	ldrlt	r3, [r1, r0]
 8004454:	18c0      	addlt	r0, r0, r3
 8004456:	4770      	bx	lr

08004458 <__retarget_lock_acquire_recursive>:
 8004458:	4770      	bx	lr

0800445a <__retarget_lock_release_recursive>:
 800445a:	4770      	bx	lr

0800445c <_init>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr

08004468 <_fini>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr
