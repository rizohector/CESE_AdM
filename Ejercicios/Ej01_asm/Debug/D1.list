
D1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800524c  0800524c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005254  08005254  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800525c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004038  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040ac  200040ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f970  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e7  00000000  00000000  0002fa14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00032000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b88  00000000  00000000  00032c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025918  00000000  00000000  000337f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e267  00000000  00000000  00059110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e444f  00000000  00000000  00067377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b7c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035dc  00000000  00000000  0014b818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800502c 	.word	0x0800502c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800502c 	.word	0x0800502c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000090 	.word	0x20000090
 80005d4:	200000e4 	.word	0x200000e4

080005d8 <vPrintString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vPrintString( const char *pcString )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 80005e0:	f003 fdb8 	bl	8004154 <vPortEnterCritical>

		HAL_UART_Transmit( &huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10 );
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fe03 	bl	80001f0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	230a      	movs	r3, #10
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <vPrintString+0x2c>)
 80005f4:	f001 fc07 	bl	8001e06 <HAL_UART_Transmit>

	taskEXIT_CRITICAL();
 80005f8:	f003 fddc 	bl	80041b4 <vPortExitCritical>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200002f8 	.word	0x200002f8

08000608 <keys_get_diff>:


TickType_t keys_get_diff( void )
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
    TickType_t tiempo;

    tiempo = keys_data.time_diff;
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <keys_get_diff+0x1c>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	607b      	str	r3, [r7, #4]

    return tiempo;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	200002e4 	.word	0x200002e4

08000628 <keys_clear_diff>:


void keys_clear_diff( void )
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
    keys_data.time_diff = KEYS_INVALID_TIME;
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <keys_clear_diff+0x18>)
 800062e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000632:	60da      	str	r2, [r3, #12]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200002e4 	.word	0x200002e4

08000644 <keys_service_task>:


// Implementacion de funcion de la tarea
void keys_service_task( void* taskParmPtr )
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	keys_data.state          = STATE_BUTTON_UP;  		// Set initial state
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <keys_service_task+0x138>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
    keys_data.time_down      = KEYS_INVALID_TIME;
 8000652:	4b4a      	ldr	r3, [pc, #296]	; (800077c <keys_service_task+0x138>)
 8000654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000658:	605a      	str	r2, [r3, #4]
    keys_data.time_up        = KEYS_INVALID_TIME;
 800065a:	4b48      	ldr	r3, [pc, #288]	; (800077c <keys_service_task+0x138>)
 800065c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000660:	609a      	str	r2, [r3, #8]
    keys_data.time_diff      = KEYS_INVALID_TIME;
 8000662:	4b46      	ldr	r3, [pc, #280]	; (800077c <keys_service_task+0x138>)
 8000664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000668:	60da      	str	r2, [r3, #12]

    vPrintString( "      Task: keys_service_task\r\n" );
 800066a:	4845      	ldr	r0, [pc, #276]	; (8000780 <keys_service_task+0x13c>)
 800066c:	f7ff ffb4 	bl	80005d8 <vPrintString>

    while( 1 )
    {
        switch( keys_data.state )
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <keys_service_task+0x138>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d871      	bhi.n	800075c <keys_service_task+0x118>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <keys_service_task+0x3c>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	08000691 	.word	0x08000691
 8000684:	080006e5 	.word	0x080006e5
 8000688:	080006af 	.word	0x080006af
 800068c:	08000703 	.word	0x08000703
        {
            case STATE_BUTTON_UP:
                /* CHECK TRANSITION CONDITIONS */
        		if( HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) )
 8000690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000694:	483b      	ldr	r0, [pc, #236]	; (8000784 <keys_service_task+0x140>)
 8000696:	f000 fe9f 	bl	80013d8 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d064      	beq.n	800076a <keys_service_task+0x126>
        		{
                    keys_data.state = STATE_BUTTON_FALLING;
 80006a0:	4b36      	ldr	r3, [pc, #216]	; (800077c <keys_service_task+0x138>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	701a      	strb	r2, [r3, #0]
                	vPrintString( "            keys_data.state: STATE_BUTTON_FALLING\r\n" );
 80006a6:	4838      	ldr	r0, [pc, #224]	; (8000788 <keys_service_task+0x144>)
 80006a8:	f7ff ff96 	bl	80005d8 <vPrintString>
                }
                break;
 80006ac:	e05d      	b.n	800076a <keys_service_task+0x126>

            case STATE_BUTTON_FALLING:
                /* ENTRY */

                /* CHECK TRANSITION CONDITIONS */
        		if( HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) )
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	4834      	ldr	r0, [pc, #208]	; (8000784 <keys_service_task+0x140>)
 80006b4:	f000 fe90 	bl	80013d8 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00b      	beq.n	80006d6 <keys_service_task+0x92>
                {
                    keys_data.state = STATE_BUTTON_DOWN;
 80006be:	4b2f      	ldr	r3, [pc, #188]	; (800077c <keys_service_task+0x138>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
                	vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );
 80006c4:	4831      	ldr	r0, [pc, #196]	; (800078c <keys_service_task+0x148>)
 80006c6:	f7ff ff87 	bl	80005d8 <vPrintString>

                    /* ACCION DEL EVENTO !*/
                    keys_data.time_down = xTaskGetTickCount();
 80006ca:	f002 feed 	bl	80034a8 <xTaskGetTickCount>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a2a      	ldr	r2, [pc, #168]	; (800077c <keys_service_task+0x138>)
 80006d2:	6053      	str	r3, [r2, #4]
                    keys_data.state = STATE_BUTTON_UP;
                	vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
                }

                /* LEAVE */
                break;
 80006d4:	e04e      	b.n	8000774 <keys_service_task+0x130>
                    keys_data.state = STATE_BUTTON_UP;
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <keys_service_task+0x138>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
                	vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
 80006dc:	482c      	ldr	r0, [pc, #176]	; (8000790 <keys_service_task+0x14c>)
 80006de:	f7ff ff7b 	bl	80005d8 <vPrintString>
                break;
 80006e2:	e047      	b.n	8000774 <keys_service_task+0x130>

            case STATE_BUTTON_DOWN:
                /* CHECK TRANSITION CONDITIONS */
        		if( !HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) )
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	4826      	ldr	r0, [pc, #152]	; (8000784 <keys_service_task+0x140>)
 80006ea:	f000 fe75 	bl	80013d8 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d13c      	bne.n	800076e <keys_service_task+0x12a>
                {
                    keys_data.state = STATE_BUTTON_RISING;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <keys_service_task+0x138>)
 80006f6:	2203      	movs	r2, #3
 80006f8:	701a      	strb	r2, [r3, #0]
                	vPrintString( "            keys_data.state: STATE_BUTTON_RISING\r\n" );
 80006fa:	4826      	ldr	r0, [pc, #152]	; (8000794 <keys_service_task+0x150>)
 80006fc:	f7ff ff6c 	bl	80005d8 <vPrintString>
                }
                break;
 8000700:	e035      	b.n	800076e <keys_service_task+0x12a>
            case STATE_BUTTON_RISING:
                /* ENTRY */

                /* CHECK TRANSITION CONDITIONS */

        		if( !HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) )
 8000702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000706:	481f      	ldr	r0, [pc, #124]	; (8000784 <keys_service_task+0x140>)
 8000708:	f000 fe66 	bl	80013d8 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d11d      	bne.n	800074e <keys_service_task+0x10a>
                {
                    keys_data.state = STATE_BUTTON_UP;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <keys_service_task+0x138>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
                	vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
 8000718:	481d      	ldr	r0, [pc, #116]	; (8000790 <keys_service_task+0x14c>)
 800071a:	f7ff ff5d 	bl	80005d8 <vPrintString>

                    /* ACCION DEL EVENTO ! */
                    keys_data.time_up    = xTaskGetTickCount();
 800071e:	f002 fec3 	bl	80034a8 <xTaskGetTickCount>
 8000722:	4603      	mov	r3, r0
 8000724:	4a15      	ldr	r2, [pc, #84]	; (800077c <keys_service_task+0x138>)
 8000726:	6093      	str	r3, [r2, #8]
                    keys_data.time_diff  = keys_data.time_up - keys_data.time_down;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <keys_service_task+0x138>)
 800072a:	689a      	ldr	r2, [r3, #8]
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <keys_service_task+0x138>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <keys_service_task+0x138>)
 8000734:	60d3      	str	r3, [r2, #12]

                    if ( keys_data.time_diff  > 0 )
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <keys_service_task+0x138>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d019      	beq.n	8000772 <keys_service_task+0x12e>
                    {
                        xSemaphoreGive( sem_btn );
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <keys_service_task+0x154>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	f002 f8c8 	bl	80028dc <xQueueGenericSend>
                	vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );

                }

                /* LEAVE */
                break;
 800074c:	e011      	b.n	8000772 <keys_service_task+0x12e>
                    keys_data.state = STATE_BUTTON_DOWN;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <keys_service_task+0x138>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
                	vPrintString( "            keys_data.state: STATE_BUTTON_DOWN\r\n" );
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <keys_service_task+0x148>)
 8000756:	f7ff ff3f 	bl	80005d8 <vPrintString>
                break;
 800075a:	e00a      	b.n	8000772 <keys_service_task+0x12e>

            default:
            	keys_data.state = STATE_BUTTON_UP;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <keys_service_task+0x138>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
            	vPrintString( "            keys_data.state: STATE_BUTTON_UP\r\n" );
 8000762:	480b      	ldr	r0, [pc, #44]	; (8000790 <keys_service_task+0x14c>)
 8000764:	f7ff ff38 	bl	80005d8 <vPrintString>

                break;
 8000768:	e004      	b.n	8000774 <keys_service_task+0x130>
                break;
 800076a:	bf00      	nop
 800076c:	e002      	b.n	8000774 <keys_service_task+0x130>
                break;
 800076e:	bf00      	nop
 8000770:	e000      	b.n	8000774 <keys_service_task+0x130>
                break;
 8000772:	bf00      	nop
        }
        // Envia la tarea al estado bloqueado durante DEBOUNCE_TIME_MS
        vTaskDelay( DEBOUNCE_TIME_MS / portTICK_RATE_MS );
 8000774:	2028      	movs	r0, #40	; 0x28
 8000776:	f002 fd59 	bl	800322c <vTaskDelay>
        switch( keys_data.state )
 800077a:	e779      	b.n	8000670 <keys_service_task+0x2c>
 800077c:	200002e4 	.word	0x200002e4
 8000780:	08005050 	.word	0x08005050
 8000784:	40020800 	.word	0x40020800
 8000788:	08005070 	.word	0x08005070
 800078c:	080050a4 	.word	0x080050a4
 8000790:	080050d8 	.word	0x080050d8
 8000794:	08005108 	.word	0x08005108
 8000798:	200002f4 	.word	0x200002f4

0800079c <tarea_led>:
    }
}


void tarea_led( void* taskParmPtr )
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b090      	sub	sp, #64	; 0x40
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    // ---------- CONFIGURACIONES ------------------------------
	char buffer [50];

    TickType_t dif;

    vPrintString( "      Task: tarea_led\r\n" );
 80007a4:	4817      	ldr	r0, [pc, #92]	; (8000804 <tarea_led+0x68>)
 80007a6:	f7ff ff17 	bl	80005d8 <vPrintString>

	// ---------- REPETIR POR SIEMPRE --------------------------
    while( 1 )
    {
        xSemaphoreTake( sem_btn, portMAX_DELAY );			// Esperamos tecla
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <tarea_led+0x6c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 f990 	bl	8002ad8 <xQueueSemaphoreTake>

        dif = keys_get_diff();
 80007b8:	f7ff ff26 	bl	8000608 <keys_get_diff>
 80007bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        keys_clear_diff();
 80007be:	f7ff ff33 	bl	8000628 <keys_clear_diff>

        sprintf( buffer, "            led_state: Encendido - dif %u\r\n", (unsigned int)dif );
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007c8:	4910      	ldr	r1, [pc, #64]	; (800080c <tarea_led+0x70>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 ffce 	bl	800476c <siprintf>
    	vPrintString( buffer );
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff feff 	bl	80005d8 <vPrintString>
        HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET );
 80007da:	2201      	movs	r2, #1
 80007dc:	2101      	movs	r1, #1
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <tarea_led+0x74>)
 80007e0:	f000 fe12 	bl	8001408 <HAL_GPIO_WritePin>

        // Envia la tarea al estado bloqueado durante dif
        vTaskDelay( dif / portTICK_RATE_MS );
 80007e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80007e6:	f002 fd21 	bl	800322c <vTaskDelay>

        vPrintString( "            led_state: Apagado\r\n" );
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <tarea_led+0x78>)
 80007ec:	f7ff fef4 	bl	80005d8 <vPrintString>
        HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET );
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	4806      	ldr	r0, [pc, #24]	; (8000810 <tarea_led+0x74>)
 80007f6:	f000 fe07 	bl	8001408 <HAL_GPIO_WritePin>

        // Envia la tarea al estado bloqueado durante LED_RATE_MS
        vTaskDelay( LED_RATE_MS / portTICK_RATE_MS );
 80007fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fe:	f002 fd15 	bl	800322c <vTaskDelay>
        xSemaphoreTake( sem_btn, portMAX_DELAY );			// Esperamos tecla
 8000802:	e7d2      	b.n	80007aa <tarea_led+0xe>
 8000804:	0800513c 	.word	0x0800513c
 8000808:	200002f4 	.word	0x200002f4
 800080c:	08005154 	.word	0x08005154
 8000810:	40020400 	.word	0x40020400
 8000814:	08005180 	.word	0x08005180

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main( void )
{
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b08e      	sub	sp, #56	; 0x38
 800081c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800081e:	f000 fad7 	bl	8000dd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000822:	f000 f87b 	bl	800091c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000826:	f000 f90d 	bl	8000a44 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800082a:	f000 f8e1 	bl	80009f0 <MX_USART3_UART_Init>

	/* USER CODE BEGIN 2 */
	vPrintString( "Main: Ejercicio D_1.\r\n" );
 800082e:	4833      	ldr	r0, [pc, #204]	; (80008fc <main+0xe4>)
 8000830:	f7ff fed2 	bl	80005d8 <vPrintString>

	/* USER CODE END 2 */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000834:	4b32      	ldr	r3, [pc, #200]	; (8000900 <main+0xe8>)
 8000836:	463c      	mov	r4, r7
 8000838:	461d      	mov	r5, r3
 800083a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000842:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000846:	463b      	mov	r3, r7
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fe6f 	bl	800252e <osThreadCreate>
 8000850:	4603      	mov	r3, r0
 8000852:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <main+0xec>)
 8000854:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	// Crear tarea en freeRTOS
	BaseType_t res1 =
		xTaskCreate(
 8000856:	2300      	movs	r3, #0
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	2301      	movs	r3, #1
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2300      	movs	r3, #0
 8000860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000864:	4928      	ldr	r1, [pc, #160]	; (8000908 <main+0xf0>)
 8000866:	4829      	ldr	r0, [pc, #164]	; (800090c <main+0xf4>)
 8000868:	f002 fba1 	bl	8002fae <xTaskCreate>
 800086c:	62f8      	str	r0, [r7, #44]	; 0x2c
			tskIDLE_PRIORITY+1,         	// Prioridad de la tarea -> Queremos que este un nivel encima de IDLE
			NULL                     		// Puntero a la tarea creada en el sistema
		);
	// Crear tareas en freeRTOS
	BaseType_t res2 =
		xTaskCreate (
 800086e:	2300      	movs	r3, #0
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	2301      	movs	r3, #1
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2300      	movs	r3, #0
 8000878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087c:	4924      	ldr	r1, [pc, #144]	; (8000910 <main+0xf8>)
 800087e:	4825      	ldr	r0, [pc, #148]	; (8000914 <main+0xfc>)
 8000880:	f002 fb95 	bl	8002fae <xTaskCreate>
 8000884:	62b8      	str	r0, [r7, #40]	; 0x28
	//{
	//	gpioWrite( LEDR, ON );
	//	vPrintString( "Error al crear las tareas.\r\n" );
	//	while(TRUE);						// VER ESTE LINK: https://pbs.twimg.com/media/BafQje7CcAAN5en.jpg
	//}
	configASSERT( res1 == pdPASS && res2 == pdPASS);	// gestion de errores
 8000886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000888:	2b01      	cmp	r3, #1
 800088a:	d104      	bne.n	8000896 <main+0x7e>
 800088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088e:	2b01      	cmp	r3, #1
 8000890:	d101      	bne.n	8000896 <main+0x7e>
 8000892:	2301      	movs	r3, #1
 8000894:	e000      	b.n	8000898 <main+0x80>
 8000896:	2300      	movs	r3, #0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10a      	bne.n	80008b2 <main+0x9a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800089c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a0:	f383 8811 	msr	BASEPRI, r3
 80008a4:	f3bf 8f6f 	isb	sy
 80008a8:	f3bf 8f4f 	dsb	sy
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80008ae:	bf00      	nop
 80008b0:	e7fe      	b.n	80008b0 <main+0x98>

	// Crear semaforo
	sem_btn = xSemaphoreCreateBinary();
 80008b2:	2203      	movs	r2, #3
 80008b4:	2100      	movs	r1, #0
 80008b6:	2001      	movs	r0, #1
 80008b8:	f001 ffb6 	bl	8002828 <xQueueGenericCreate>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <main+0x100>)
 80008c0:	6013      	str	r3, [r2, #0]

	// Gestion de errores de semaforos
	configASSERT( sem_btn !=  NULL  );
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <main+0x100>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10a      	bne.n	80008e0 <main+0xc8>
	__asm volatile
 80008ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ce:	f383 8811 	msr	BASEPRI, r3
 80008d2:	f3bf 8f6f 	isb	sy
 80008d6:	f3bf 8f4f 	dsb	sy
 80008da:	623b      	str	r3, [r7, #32]
}
 80008dc:	bf00      	nop
 80008de:	e7fe      	b.n	80008de <main+0xc6>

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80008e0:	f001 fe1e 	bl	8002520 <osKernelStart>
	__asm volatile
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	61fb      	str	r3, [r7, #28]
}
 80008f6:	bf00      	nop
	// ---------- REPETIR POR SIEMPRE --------------------------
	//while( TRUE )
	//{
	// Si cae en este while 1 significa que no pudo iniciar el scheduler
	//}
	configASSERT( 0 );
 80008f8:	e7fe      	b.n	80008f8 <main+0xe0>
 80008fa:	bf00      	nop
 80008fc:	080051a4 	.word	0x080051a4
 8000900:	080051dc 	.word	0x080051dc
 8000904:	2000033c 	.word	0x2000033c
 8000908:	080051bc 	.word	0x080051bc
 800090c:	0800079d 	.word	0x0800079d
 8000910:	080051c8 	.word	0x080051c8
 8000914:	08000645 	.word	0x08000645
 8000918:	200002f4 	.word	0x200002f4

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2230      	movs	r2, #48	; 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f003 ff16 	bl	800475c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <SystemClock_Config+0xcc>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a27      	ldr	r2, [pc, #156]	; (80009e8 <SystemClock_Config+0xcc>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <SystemClock_Config+0xd0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <SystemClock_Config+0xd0>)
 8000966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800097c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800098c:	2304      	movs	r3, #4
 800098e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000990:	23a8      	movs	r3, #168	; 0xa8
 8000992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000998:	2307      	movs	r3, #7
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fd4b 	bl	800143c <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009ac:	f000 f900 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	230f      	movs	r3, #15
 80009b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2105      	movs	r1, #5
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 ffac 	bl	800192c <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009da:	f000 f8e9 	bl	8000bb0 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	; 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART3_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART3_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART3_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a28:	f001 f9a0 	bl	8001d6c <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 f8bd 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200002f8 	.word	0x200002f8
 8000a40:	40004800 	.word	0x40004800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	4b4c      	ldr	r3, [pc, #304]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a4b      	ldr	r2, [pc, #300]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b49      	ldr	r3, [pc, #292]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a44      	ldr	r2, [pc, #272]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a3d      	ldr	r2, [pc, #244]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a36      	ldr	r2, [pc, #216]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b08:	4822      	ldr	r0, [pc, #136]	; (8000b94 <MX_GPIO_Init+0x150>)
 8000b0a:	f000 fc7d 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2140      	movs	r1, #64	; 0x40
 8000b12:	4821      	ldr	r0, [pc, #132]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000b14:	f000 fc78 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <MX_GPIO_Init+0x158>)
 8000b30:	f000 faa6 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b34:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_GPIO_Init+0x150>)
 8000b4e:	f000 fa97 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000b6a:	f000 fa89 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000b82:	f000 fa7d 	bl	8001080 <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3730      	adds	r7, #48	; 0x30
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f001 fd0c 	bl	80025c6 <osDelay>
 8000bae:	e7fb      	b.n	8000ba8 <StartDefaultTask+0x8>

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_MspInit+0x54>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <HAL_MspInit+0x54>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x54>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_MspInit+0x54>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_MspInit+0x54>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_MspInit+0x54>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	f06f 0001 	mvn.w	r0, #1
 8000c02:	f000 fa14 	bl	800102e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12c      	bne.n	8000c90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c80:	2307      	movs	r3, #7
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_UART_MspInit+0x8c>)
 8000c8c:	f000 f9f8 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40004800 	.word	0x40004800
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020c00 	.word	0x40020c00

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 f8ce 	bl	8000e74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cd8:	f002 feea 	bl	8003ab0 <xTaskGetSchedulerState>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d001      	beq.n	8000ce6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ce2:	f003 fac9 	bl	8004278 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f003 fce6 	bl	80046ec <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20030000 	.word	0x20030000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	20000340 	.word	0x20000340
 8000d54:	200040b0 	.word	0x200040b0

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ffd7 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f003 fca5 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fd33 	bl	8000818 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000db4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dc0:	0800525c 	.word	0x0800525c
  ldr r2, =_sbss
 8000dc4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dc8:	200040ac 	.word	0x200040ac

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f90d 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff feda 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f917 	bl	8001066 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e50:	f000 f8ed 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000344 	.word	0x20000344

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000344 	.word	0x20000344

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff47 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff5c 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff8e 	bl	8000f6c <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5d 	bl	8000f18 <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffb0 	bl	8000fd4 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e177      	b.n	800138c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 8166 	bne.w	8001386 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80c0 	beq.w	8001386 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b66      	ldr	r3, [pc, #408]	; (80013a4 <HAL_GPIO_Init+0x324>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a65      	ldr	r2, [pc, #404]	; (80013a4 <HAL_GPIO_Init+0x324>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b63      	ldr	r3, [pc, #396]	; (80013a4 <HAL_GPIO_Init+0x324>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001222:	4a61      	ldr	r2, [pc, #388]	; (80013a8 <HAL_GPIO_Init+0x328>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a58      	ldr	r2, [pc, #352]	; (80013ac <HAL_GPIO_Init+0x32c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d037      	beq.n	80012be <HAL_GPIO_Init+0x23e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a57      	ldr	r2, [pc, #348]	; (80013b0 <HAL_GPIO_Init+0x330>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d031      	beq.n	80012ba <HAL_GPIO_Init+0x23a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a56      	ldr	r2, [pc, #344]	; (80013b4 <HAL_GPIO_Init+0x334>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d02b      	beq.n	80012b6 <HAL_GPIO_Init+0x236>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a55      	ldr	r2, [pc, #340]	; (80013b8 <HAL_GPIO_Init+0x338>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d025      	beq.n	80012b2 <HAL_GPIO_Init+0x232>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a54      	ldr	r2, [pc, #336]	; (80013bc <HAL_GPIO_Init+0x33c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01f      	beq.n	80012ae <HAL_GPIO_Init+0x22e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a53      	ldr	r2, [pc, #332]	; (80013c0 <HAL_GPIO_Init+0x340>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x22a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a52      	ldr	r2, [pc, #328]	; (80013c4 <HAL_GPIO_Init+0x344>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x226>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a51      	ldr	r2, [pc, #324]	; (80013c8 <HAL_GPIO_Init+0x348>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x222>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a50      	ldr	r2, [pc, #320]	; (80013cc <HAL_GPIO_Init+0x34c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x21e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <HAL_GPIO_Init+0x350>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x21a>
 8001296:	2309      	movs	r3, #9
 8001298:	e012      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 800129a:	230a      	movs	r3, #10
 800129c:	e010      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 800129e:	2308      	movs	r3, #8
 80012a0:	e00e      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012a6:	2306      	movs	r3, #6
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	; (80013a8 <HAL_GPIO_Init+0x328>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_GPIO_Init+0x354>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001302:	4a34      	ldr	r2, [pc, #208]	; (80013d4 <HAL_GPIO_Init+0x354>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <HAL_GPIO_Init+0x354>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <HAL_GPIO_Init+0x354>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_GPIO_Init+0x354>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_GPIO_Init+0x354>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_GPIO_Init+0x354>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <HAL_GPIO_Init+0x354>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae84 	bls.w	800109c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40021400 	.word	0x40021400
 80013c4:	40021800 	.word	0x40021800
 80013c8:	40021c00 	.word	0x40021c00
 80013cc:	40022000 	.word	0x40022000
 80013d0:	40022400 	.word	0x40022400
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e001      	b.n	80013fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001424:	e003      	b.n	800142e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e267      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d075      	beq.n	8001546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145a:	4b88      	ldr	r3, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b04      	cmp	r3, #4
 8001464:	d00c      	beq.n	8001480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001466:	4b85      	ldr	r3, [pc, #532]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146e:	2b08      	cmp	r3, #8
 8001470:	d112      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001472:	4b82      	ldr	r3, [pc, #520]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800147e:	d10b      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	4b7e      	ldr	r3, [pc, #504]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d05b      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d157      	bne.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e242      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x74>
 80014a2:	4b76      	ldr	r3, [pc, #472]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a75      	ldr	r2, [pc, #468]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b70      	ldr	r3, [pc, #448]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6f      	ldr	r2, [pc, #444]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b6d      	ldr	r3, [pc, #436]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6c      	ldr	r2, [pc, #432]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014d4:	4b69      	ldr	r3, [pc, #420]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a68      	ldr	r2, [pc, #416]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b66      	ldr	r3, [pc, #408]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a65      	ldr	r2, [pc, #404]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fcd2 	bl	8000e9c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fcce 	bl	8000e9c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e207      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b5b      	ldr	r3, [pc, #364]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0xc0>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fcbe 	bl	8000e9c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fcba 	bl	8000e9c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1f3      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	4b51      	ldr	r3, [pc, #324]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d063      	beq.n	800161a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001552:	4b4a      	ldr	r3, [pc, #296]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001566:	2b08      	cmp	r3, #8
 8001568:	d11c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156a:	4b44      	ldr	r3, [pc, #272]	; (800167c <HAL_RCC_OscConfig+0x240>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d116      	bne.n	80015a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x152>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e1c7      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4937      	ldr	r1, [pc, #220]	; (800167c <HAL_RCC_OscConfig+0x240>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	e03a      	b.n	800161a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <HAL_RCC_OscConfig+0x244>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fc73 	bl	8000e9c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fc6f 	bl	8000e9c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1a8      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4925      	ldr	r1, [pc, #148]	; (800167c <HAL_RCC_OscConfig+0x240>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_RCC_OscConfig+0x244>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc52 	bl	8000e9c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc4e 	bl	8000e9c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e187      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d036      	beq.n	8001694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d016      	beq.n	800165c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_RCC_OscConfig+0x248>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff fc32 	bl	8000e9c <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fc2e 	bl	8000e9c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e167      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_RCC_OscConfig+0x240>)
 8001650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x200>
 800165a:	e01b      	b.n	8001694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_RCC_OscConfig+0x248>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fc1b 	bl	8000e9c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	e00e      	b.n	8001688 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fc17 	bl	8000e9c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d907      	bls.n	8001688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e150      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
 800167c:	40023800 	.word	0x40023800
 8001680:	42470000 	.word	0x42470000
 8001684:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 800168a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ea      	bne.n	800166a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8097 	beq.w	80017d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a6:	4b81      	ldr	r3, [pc, #516]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b7d      	ldr	r3, [pc, #500]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a7c      	ldr	r2, [pc, #496]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b7a      	ldr	r3, [pc, #488]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b77      	ldr	r3, [pc, #476]	; (80018b0 <HAL_RCC_OscConfig+0x474>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d118      	bne.n	8001710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	4b74      	ldr	r3, [pc, #464]	; (80018b0 <HAL_RCC_OscConfig+0x474>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a73      	ldr	r2, [pc, #460]	; (80018b0 <HAL_RCC_OscConfig+0x474>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fbd7 	bl	8000e9c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fbd3 	bl	8000e9c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e10c      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b6a      	ldr	r3, [pc, #424]	; (80018b0 <HAL_RCC_OscConfig+0x474>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x2ea>
 8001718:	4b64      	ldr	r3, [pc, #400]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a63      	ldr	r2, [pc, #396]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	e01c      	b.n	8001760 <HAL_RCC_OscConfig+0x324>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x30c>
 800172e:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a5b      	ldr	r2, [pc, #364]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0x324>
 8001748:	4b58      	ldr	r3, [pc, #352]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	4a57      	ldr	r2, [pc, #348]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	; 0x70
 8001754:	4b55      	ldr	r3, [pc, #340]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	4a54      	ldr	r2, [pc, #336]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 800175a:	f023 0304 	bic.w	r3, r3, #4
 800175e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d015      	beq.n	8001794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fb98 	bl	8000e9c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff fb94 	bl	8000e9c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0cb      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0ee      	beq.n	8001770 <HAL_RCC_OscConfig+0x334>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fb82 	bl	8000e9c <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff fb7e 	bl	8000e9c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0b5      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ee      	bne.n	800179c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	4a38      	ldr	r2, [pc, #224]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80a1 	beq.w	800191c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017da:	4b34      	ldr	r3, [pc, #208]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d05c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d141      	bne.n	8001872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <HAL_RCC_OscConfig+0x478>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb52 	bl	8000e9c <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fb4e 	bl	8000e9c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e087      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	019b      	lsls	r3, r3, #6
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	3b01      	subs	r3, #1
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	491b      	ldr	r1, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_RCC_OscConfig+0x478>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fb27 	bl	8000e9c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff fb23 	bl	8000e9c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e05c      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x416>
 8001870:	e054      	b.n	800191c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_RCC_OscConfig+0x478>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fb10 	bl	8000e9c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff fb0c 	bl	8000e9c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e045      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RCC_OscConfig+0x470>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x444>
 800189e:	e03d      	b.n	800191c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e038      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000
 80018b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x4ec>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d028      	beq.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d121      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d11a      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d111      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	3b01      	subs	r3, #1
 8001902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d107      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0cc      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b68      	ldr	r3, [pc, #416]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d90c      	bls.n	8001968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0b8      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d020      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001980:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a58      	ldr	r2, [pc, #352]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800198a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	494d      	ldr	r1, [pc, #308]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d044      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d119      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e07f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b3f      	ldr	r3, [pc, #252]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e06f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e067      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4934      	ldr	r1, [pc, #208]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a1c:	f7ff fa3e 	bl	8000e9c <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff fa3a 	bl	8000e9c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e04f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d20c      	bcs.n	8001a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e032      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ab2:	f000 f821 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	490a      	ldr	r1, [pc, #40]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	5ccb      	ldrb	r3, [r1, r3]
 8001ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f99e 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	08005200 	.word	0x08005200
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001afc:	b094      	sub	sp, #80	; 0x50
 8001afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	647b      	str	r3, [r7, #68]	; 0x44
 8001b04:	2300      	movs	r3, #0
 8001b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b08:	2300      	movs	r3, #0
 8001b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b10:	4b79      	ldr	r3, [pc, #484]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d00d      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x40>
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	f200 80e1 	bhi.w	8001ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x34>
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b2a:	e0db      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b30:	e0db      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b32:	4b73      	ldr	r3, [pc, #460]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b36:	e0d8      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b38:	4b6f      	ldr	r3, [pc, #444]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b42:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d063      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4e:	4b6a      	ldr	r3, [pc, #424]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	2200      	movs	r2, #0
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
 8001b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	462b      	mov	r3, r5
 8001b6e:	f04f 0000 	mov.w	r0, #0
 8001b72:	f04f 0100 	mov.w	r1, #0
 8001b76:	0159      	lsls	r1, r3, #5
 8001b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7c:	0150      	lsls	r0, r2, #5
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4621      	mov	r1, r4
 8001b84:	1a51      	subs	r1, r2, r1
 8001b86:	6139      	str	r1, [r7, #16]
 8001b88:	4629      	mov	r1, r5
 8001b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	018b      	lsls	r3, r1, #6
 8001ba0:	4651      	mov	r1, sl
 8001ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	018a      	lsls	r2, r1, #6
 8001baa:	4651      	mov	r1, sl
 8001bac:	ebb2 0801 	subs.w	r8, r2, r1
 8001bb0:	4659      	mov	r1, fp
 8001bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bca:	4690      	mov	r8, r2
 8001bcc:	4699      	mov	r9, r3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	eb18 0303 	adds.w	r3, r8, r3
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	462b      	mov	r3, r5
 8001bd8:	eb49 0303 	adc.w	r3, r9, r3
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bea:	4629      	mov	r1, r5
 8001bec:	024b      	lsls	r3, r1, #9
 8001bee:	4621      	mov	r1, r4
 8001bf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	024a      	lsls	r2, r1, #9
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c08:	f7fe fb4a 	bl	80002a0 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c14:	e058      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	099b      	lsrs	r3, r3, #6
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4611      	mov	r1, r2
 8001c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c26:	623b      	str	r3, [r7, #32]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c30:	4642      	mov	r2, r8
 8001c32:	464b      	mov	r3, r9
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	f04f 0100 	mov.w	r1, #0
 8001c3c:	0159      	lsls	r1, r3, #5
 8001c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c42:	0150      	lsls	r0, r2, #5
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4641      	mov	r1, r8
 8001c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c4e:	4649      	mov	r1, r9
 8001c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c68:	ebb2 040a 	subs.w	r4, r2, sl
 8001c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	00eb      	lsls	r3, r5, #3
 8001c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c7e:	00e2      	lsls	r2, r4, #3
 8001c80:	4614      	mov	r4, r2
 8001c82:	461d      	mov	r5, r3
 8001c84:	4643      	mov	r3, r8
 8001c86:	18e3      	adds	r3, r4, r3
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	464b      	mov	r3, r9
 8001c8c:	eb45 0303 	adc.w	r3, r5, r3
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	028b      	lsls	r3, r1, #10
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca8:	4621      	mov	r1, r4
 8001caa:	028a      	lsls	r2, r1, #10
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	61fa      	str	r2, [r7, #28]
 8001cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cbc:	f7fe faf0 	bl	80002a0 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3750      	adds	r7, #80	; 0x50
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	00f42400 	.word	0x00f42400
 8001d00:	007a1200 	.word	0x007a1200

08001d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000000 	.word	0x20000000

08001d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d20:	f7ff fff0 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0a9b      	lsrs	r3, r3, #10
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	08005210 	.word	0x08005210

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d48:	f7ff ffdc 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0b5b      	lsrs	r3, r3, #13
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	08005210 	.word	0x08005210

08001d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e03f      	b.n	8001dfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe ff3e 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2224      	movs	r2, #36	; 0x24
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f929 	bl	8002008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b08a      	sub	sp, #40	; 0x28
 8001e0a:	af02      	add	r7, sp, #8
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4613      	mov	r3, r2
 8001e14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d17c      	bne.n	8001f20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_UART_Transmit+0x2c>
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e075      	b.n	8001f22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_UART_Transmit+0x3e>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e06e      	b.n	8001f22 <HAL_UART_Transmit+0x11c>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2221      	movs	r2, #33	; 0x21
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e5a:	f7ff f81f 	bl	8000e9c <HAL_GetTick>
 8001e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	88fa      	ldrh	r2, [r7, #6]
 8001e64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	88fa      	ldrh	r2, [r7, #6]
 8001e6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e74:	d108      	bne.n	8001e88 <HAL_UART_Transmit+0x82>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d104      	bne.n	8001e88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	e003      	b.n	8001e90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e98:	e02a      	b.n	8001ef0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f840 	bl	8001f2a <UART_WaitOnFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e036      	b.n	8001f22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ec8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	3302      	adds	r3, #2
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	e007      	b.n	8001ee2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1cf      	bne.n	8001e9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2200      	movs	r2, #0
 8001f02:	2140      	movs	r1, #64	; 0x40
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 f810 	bl	8001f2a <UART_WaitOnFlagUntilTimeout>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e006      	b.n	8001f22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e000      	b.n	8001f22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b090      	sub	sp, #64	; 0x40
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4613      	mov	r3, r2
 8001f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f3a:	e050      	b.n	8001fde <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f42:	d04c      	beq.n	8001fde <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8001f4a:	f7fe ffa7 	bl	8000e9c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d241      	bcs.n	8001fde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	330c      	adds	r3, #12
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	e853 3f00 	ldrex	r3, [r3]
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	330c      	adds	r3, #12
 8001f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f7a:	637a      	str	r2, [r7, #52]	; 0x34
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f82:	e841 2300 	strex	r3, r2, [r1]
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1e5      	bne.n	8001f5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3314      	adds	r3, #20
 8001f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	e853 3f00 	ldrex	r3, [r3]
 8001f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3314      	adds	r3, #20
 8001fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fae:	623a      	str	r2, [r7, #32]
 8001fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb2:	69f9      	ldr	r1, [r7, #28]
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	e841 2300 	strex	r3, r2, [r1]
 8001fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e5      	bne.n	8001f8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e00f      	b.n	8001ffe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d09f      	beq.n	8001f3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3740      	adds	r7, #64	; 0x40
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800200c:	b0c0      	sub	sp, #256	; 0x100
 800200e:	af00      	add	r7, sp, #0
 8002010:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002024:	68d9      	ldr	r1, [r3, #12]
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	ea40 0301 	orr.w	r3, r0, r1
 8002030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	431a      	orrs	r2, r3
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	431a      	orrs	r2, r3
 8002048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002060:	f021 010c 	bic.w	r1, r1, #12
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800206e:	430b      	orrs	r3, r1
 8002070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800207e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002082:	6999      	ldr	r1, [r3, #24]
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	ea40 0301 	orr.w	r3, r0, r1
 800208e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b8f      	ldr	r3, [pc, #572]	; (80022d4 <UART_SetConfig+0x2cc>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d005      	beq.n	80020a8 <UART_SetConfig+0xa0>
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <UART_SetConfig+0x2d0>)
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d104      	bne.n	80020b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020a8:	f7ff fe4c 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 80020ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020b0:	e003      	b.n	80020ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020b2:	f7ff fe33 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 80020b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c4:	f040 810c 	bne.w	80022e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020cc:	2200      	movs	r2, #0
 80020ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020da:	4622      	mov	r2, r4
 80020dc:	462b      	mov	r3, r5
 80020de:	1891      	adds	r1, r2, r2
 80020e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80020e2:	415b      	adcs	r3, r3
 80020e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020ea:	4621      	mov	r1, r4
 80020ec:	eb12 0801 	adds.w	r8, r2, r1
 80020f0:	4629      	mov	r1, r5
 80020f2:	eb43 0901 	adc.w	r9, r3, r1
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800210a:	4690      	mov	r8, r2
 800210c:	4699      	mov	r9, r3
 800210e:	4623      	mov	r3, r4
 8002110:	eb18 0303 	adds.w	r3, r8, r3
 8002114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002118:	462b      	mov	r3, r5
 800211a:	eb49 0303 	adc.w	r3, r9, r3
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800212e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002136:	460b      	mov	r3, r1
 8002138:	18db      	adds	r3, r3, r3
 800213a:	653b      	str	r3, [r7, #80]	; 0x50
 800213c:	4613      	mov	r3, r2
 800213e:	eb42 0303 	adc.w	r3, r2, r3
 8002142:	657b      	str	r3, [r7, #84]	; 0x54
 8002144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800214c:	f7fe f8a8 	bl	80002a0 <__aeabi_uldivmod>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4b61      	ldr	r3, [pc, #388]	; (80022dc <UART_SetConfig+0x2d4>)
 8002156:	fba3 2302 	umull	r2, r3, r3, r2
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	011c      	lsls	r4, r3, #4
 800215e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002162:	2200      	movs	r2, #0
 8002164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002168:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800216c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002170:	4642      	mov	r2, r8
 8002172:	464b      	mov	r3, r9
 8002174:	1891      	adds	r1, r2, r2
 8002176:	64b9      	str	r1, [r7, #72]	; 0x48
 8002178:	415b      	adcs	r3, r3
 800217a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800217c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002180:	4641      	mov	r1, r8
 8002182:	eb12 0a01 	adds.w	sl, r2, r1
 8002186:	4649      	mov	r1, r9
 8002188:	eb43 0b01 	adc.w	fp, r3, r1
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800219c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021a0:	4692      	mov	sl, r2
 80021a2:	469b      	mov	fp, r3
 80021a4:	4643      	mov	r3, r8
 80021a6:	eb1a 0303 	adds.w	r3, sl, r3
 80021aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021ae:	464b      	mov	r3, r9
 80021b0:	eb4b 0303 	adc.w	r3, fp, r3
 80021b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021cc:	460b      	mov	r3, r1
 80021ce:	18db      	adds	r3, r3, r3
 80021d0:	643b      	str	r3, [r7, #64]	; 0x40
 80021d2:	4613      	mov	r3, r2
 80021d4:	eb42 0303 	adc.w	r3, r2, r3
 80021d8:	647b      	str	r3, [r7, #68]	; 0x44
 80021da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021e2:	f7fe f85d 	bl	80002a0 <__aeabi_uldivmod>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <UART_SetConfig+0x2d4>)
 80021ee:	fba3 2301 	umull	r2, r3, r3, r1
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2264      	movs	r2, #100	; 0x64
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	1acb      	subs	r3, r1, r3
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <UART_SetConfig+0x2d4>)
 8002204:	fba3 2302 	umull	r2, r3, r3, r2
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002210:	441c      	add	r4, r3
 8002212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002216:	2200      	movs	r2, #0
 8002218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800221c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002224:	4642      	mov	r2, r8
 8002226:	464b      	mov	r3, r9
 8002228:	1891      	adds	r1, r2, r2
 800222a:	63b9      	str	r1, [r7, #56]	; 0x38
 800222c:	415b      	adcs	r3, r3
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002234:	4641      	mov	r1, r8
 8002236:	1851      	adds	r1, r2, r1
 8002238:	6339      	str	r1, [r7, #48]	; 0x30
 800223a:	4649      	mov	r1, r9
 800223c:	414b      	adcs	r3, r1
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800224c:	4659      	mov	r1, fp
 800224e:	00cb      	lsls	r3, r1, #3
 8002250:	4651      	mov	r1, sl
 8002252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002256:	4651      	mov	r1, sl
 8002258:	00ca      	lsls	r2, r1, #3
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	4603      	mov	r3, r0
 8002260:	4642      	mov	r2, r8
 8002262:	189b      	adds	r3, r3, r2
 8002264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002268:	464b      	mov	r3, r9
 800226a:	460a      	mov	r2, r1
 800226c:	eb42 0303 	adc.w	r3, r2, r3
 8002270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002280:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002288:	460b      	mov	r3, r1
 800228a:	18db      	adds	r3, r3, r3
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
 800228e:	4613      	mov	r3, r2
 8002290:	eb42 0303 	adc.w	r3, r2, r3
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800229a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800229e:	f7fd ffff 	bl	80002a0 <__aeabi_uldivmod>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <UART_SetConfig+0x2d4>)
 80022a8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	2164      	movs	r1, #100	; 0x64
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	3332      	adds	r3, #50	; 0x32
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <UART_SetConfig+0x2d4>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	f003 0207 	and.w	r2, r3, #7
 80022c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4422      	add	r2, r4
 80022ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022d0:	e105      	b.n	80024de <UART_SetConfig+0x4d6>
 80022d2:	bf00      	nop
 80022d4:	40011000 	.word	0x40011000
 80022d8:	40011400 	.word	0x40011400
 80022dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022e4:	2200      	movs	r2, #0
 80022e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022f2:	4642      	mov	r2, r8
 80022f4:	464b      	mov	r3, r9
 80022f6:	1891      	adds	r1, r2, r2
 80022f8:	6239      	str	r1, [r7, #32]
 80022fa:	415b      	adcs	r3, r3
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002302:	4641      	mov	r1, r8
 8002304:	1854      	adds	r4, r2, r1
 8002306:	4649      	mov	r1, r9
 8002308:	eb43 0501 	adc.w	r5, r3, r1
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	00eb      	lsls	r3, r5, #3
 8002316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800231a:	00e2      	lsls	r2, r4, #3
 800231c:	4614      	mov	r4, r2
 800231e:	461d      	mov	r5, r3
 8002320:	4643      	mov	r3, r8
 8002322:	18e3      	adds	r3, r4, r3
 8002324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002328:	464b      	mov	r3, r9
 800232a:	eb45 0303 	adc.w	r3, r5, r3
 800232e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800233e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800234e:	4629      	mov	r1, r5
 8002350:	008b      	lsls	r3, r1, #2
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002358:	4621      	mov	r1, r4
 800235a:	008a      	lsls	r2, r1, #2
 800235c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002360:	f7fd ff9e 	bl	80002a0 <__aeabi_uldivmod>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4b60      	ldr	r3, [pc, #384]	; (80024ec <UART_SetConfig+0x4e4>)
 800236a:	fba3 2302 	umull	r2, r3, r3, r2
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	011c      	lsls	r4, r3, #4
 8002372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002376:	2200      	movs	r2, #0
 8002378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800237c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002384:	4642      	mov	r2, r8
 8002386:	464b      	mov	r3, r9
 8002388:	1891      	adds	r1, r2, r2
 800238a:	61b9      	str	r1, [r7, #24]
 800238c:	415b      	adcs	r3, r3
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002394:	4641      	mov	r1, r8
 8002396:	1851      	adds	r1, r2, r1
 8002398:	6139      	str	r1, [r7, #16]
 800239a:	4649      	mov	r1, r9
 800239c:	414b      	adcs	r3, r1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023ac:	4659      	mov	r1, fp
 80023ae:	00cb      	lsls	r3, r1, #3
 80023b0:	4651      	mov	r1, sl
 80023b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023b6:	4651      	mov	r1, sl
 80023b8:	00ca      	lsls	r2, r1, #3
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	4642      	mov	r2, r8
 80023c2:	189b      	adds	r3, r3, r2
 80023c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023c8:	464b      	mov	r3, r9
 80023ca:	460a      	mov	r2, r1
 80023cc:	eb42 0303 	adc.w	r3, r2, r3
 80023d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80023de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023ec:	4649      	mov	r1, r9
 80023ee:	008b      	lsls	r3, r1, #2
 80023f0:	4641      	mov	r1, r8
 80023f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023f6:	4641      	mov	r1, r8
 80023f8:	008a      	lsls	r2, r1, #2
 80023fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023fe:	f7fd ff4f 	bl	80002a0 <__aeabi_uldivmod>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4b39      	ldr	r3, [pc, #228]	; (80024ec <UART_SetConfig+0x4e4>)
 8002408:	fba3 1302 	umull	r1, r3, r3, r2
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	2164      	movs	r1, #100	; 0x64
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	3332      	adds	r3, #50	; 0x32
 800241a:	4a34      	ldr	r2, [pc, #208]	; (80024ec <UART_SetConfig+0x4e4>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002426:	441c      	add	r4, r3
 8002428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800242c:	2200      	movs	r2, #0
 800242e:	673b      	str	r3, [r7, #112]	; 0x70
 8002430:	677a      	str	r2, [r7, #116]	; 0x74
 8002432:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002436:	4642      	mov	r2, r8
 8002438:	464b      	mov	r3, r9
 800243a:	1891      	adds	r1, r2, r2
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	415b      	adcs	r3, r3
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002446:	4641      	mov	r1, r8
 8002448:	1851      	adds	r1, r2, r1
 800244a:	6039      	str	r1, [r7, #0]
 800244c:	4649      	mov	r1, r9
 800244e:	414b      	adcs	r3, r1
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800245e:	4659      	mov	r1, fp
 8002460:	00cb      	lsls	r3, r1, #3
 8002462:	4651      	mov	r1, sl
 8002464:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002468:	4651      	mov	r1, sl
 800246a:	00ca      	lsls	r2, r1, #3
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	4603      	mov	r3, r0
 8002472:	4642      	mov	r2, r8
 8002474:	189b      	adds	r3, r3, r2
 8002476:	66bb      	str	r3, [r7, #104]	; 0x68
 8002478:	464b      	mov	r3, r9
 800247a:	460a      	mov	r2, r1
 800247c:	eb42 0303 	adc.w	r3, r2, r3
 8002480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	663b      	str	r3, [r7, #96]	; 0x60
 800248c:	667a      	str	r2, [r7, #100]	; 0x64
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800249a:	4649      	mov	r1, r9
 800249c:	008b      	lsls	r3, r1, #2
 800249e:	4641      	mov	r1, r8
 80024a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024a4:	4641      	mov	r1, r8
 80024a6:	008a      	lsls	r2, r1, #2
 80024a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024ac:	f7fd fef8 	bl	80002a0 <__aeabi_uldivmod>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <UART_SetConfig+0x4e4>)
 80024b6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2164      	movs	r1, #100	; 0x64
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	3332      	adds	r3, #50	; 0x32
 80024c8:	4a08      	ldr	r2, [pc, #32]	; (80024ec <UART_SetConfig+0x4e4>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	f003 020f 	and.w	r2, r3, #15
 80024d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4422      	add	r2, r4
 80024dc:	609a      	str	r2, [r3, #8]
}
 80024de:	bf00      	nop
 80024e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024e4:	46bd      	mov	sp, r7
 80024e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ea:	bf00      	nop
 80024ec:	51eb851f 	.word	0x51eb851f

080024f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002502:	2b84      	cmp	r3, #132	; 0x84
 8002504:	d005      	beq.n	8002512 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002506:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	3303      	adds	r3, #3
 8002510:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002524:	f000 feb6 	bl	8003294 <vTaskStartScheduler>
  
  return osOK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	bd80      	pop	{r7, pc}

0800252e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800252e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002530:	b089      	sub	sp, #36	; 0x24
 8002532:	af04      	add	r7, sp, #16
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <osThreadCreate+0x54>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01c      	beq.n	8002582 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685c      	ldr	r4, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681d      	ldr	r5, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691e      	ldr	r6, [r3, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ffc8 	bl	80024f0 <makeFreeRtosPriority>
 8002560:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800256a:	9202      	str	r2, [sp, #8]
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	9100      	str	r1, [sp, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4632      	mov	r2, r6
 8002574:	4629      	mov	r1, r5
 8002576:	4620      	mov	r0, r4
 8002578:	f000 fcbc 	bl	8002ef4 <xTaskCreateStatic>
 800257c:	4603      	mov	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e01c      	b.n	80025bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685c      	ldr	r4, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800258e:	b29e      	uxth	r6, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ffaa 	bl	80024f0 <makeFreeRtosPriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	9200      	str	r2, [sp, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	4632      	mov	r2, r6
 80025aa:	4629      	mov	r1, r5
 80025ac:	4620      	mov	r0, r4
 80025ae:	f000 fcfe 	bl	8002fae <xTaskCreate>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025bc:	68fb      	ldr	r3, [r7, #12]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <osDelay+0x16>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	e000      	b.n	80025de <osDelay+0x18>
 80025dc:	2301      	movs	r3, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fe24 	bl	800322c <vTaskDelay>
  
  return osOK;
 80025e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f103 0208 	add.w	r2, r3, #8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002606:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f103 0208 	add.w	r2, r3, #8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f103 0208 	add.w	r2, r3, #8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	601a      	str	r2, [r3, #0]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a6:	d103      	bne.n	80026b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	e00c      	b.n	80026ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3308      	adds	r3, #8
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e002      	b.n	80026be <vListInsert+0x2e>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d2f6      	bcs.n	80026b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	601a      	str	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6852      	ldr	r2, [r2, #4]
 8002722:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d103      	bne.n	8002736 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <xQueueGenericReset+0x2a>
	__asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	60bb      	str	r3, [r7, #8]
}
 800277e:	bf00      	nop
 8002780:	e7fe      	b.n	8002780 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002782:	f001 fce7 	bl	8004154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	441a      	add	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	3b01      	subs	r3, #1
 80027b4:	68f9      	ldr	r1, [r7, #12]
 80027b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	441a      	add	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	22ff      	movs	r2, #255	; 0xff
 80027c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	22ff      	movs	r2, #255	; 0xff
 80027ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d114      	bne.n	8002802 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01a      	beq.n	8002816 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3310      	adds	r3, #16
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 ffa7 	bl	8003738 <xTaskRemoveFromEventList>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d012      	beq.n	8002816 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <xQueueGenericReset+0xcc>)
 80027f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	e009      	b.n	8002816 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3310      	adds	r3, #16
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fef1 	bl	80025ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3324      	adds	r3, #36	; 0x24
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff feec 	bl	80025ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002816:	f001 fccd 	bl	80041b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	4613      	mov	r3, r2
 8002834:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGenericCreate+0x2a>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	613b      	str	r3, [r7, #16]
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3348      	adds	r3, #72	; 0x48
 8002860:	4618      	mov	r0, r3
 8002862:	f001 fd59 	bl	8004318 <pvPortMalloc>
 8002866:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3348      	adds	r3, #72	; 0x48
 8002876:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002880:	79fa      	ldrb	r2, [r7, #7]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f805 	bl	800289c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002892:	69bb      	ldr	r3, [r7, #24]
	}
 8002894:	4618      	mov	r0, r3
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e002      	b.n	80028be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028ca:	2101      	movs	r1, #1
 80028cc:	69b8      	ldr	r0, [r7, #24]
 80028ce:	f7ff ff43 	bl	8002758 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08e      	sub	sp, #56	; 0x38
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ea:	2300      	movs	r3, #0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <xQueueGenericSend+0x32>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <xQueueGenericSend+0x40>
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <xQueueGenericSend+0x44>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <xQueueGenericSend+0x46>
 8002920:	2300      	movs	r3, #0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <xQueueGenericSend+0x60>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002938:	bf00      	nop
 800293a:	e7fe      	b.n	800293a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d103      	bne.n	800294a <xQueueGenericSend+0x6e>
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <xQueueGenericSend+0x72>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <xQueueGenericSend+0x74>
 800294e:	2300      	movs	r3, #0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <xQueueGenericSend+0x8e>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	623b      	str	r3, [r7, #32]
}
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800296a:	f001 f8a1 	bl	8003ab0 <xTaskGetSchedulerState>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <xQueueGenericSend+0x9e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <xQueueGenericSend+0xa2>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <xQueueGenericSend+0xa4>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <xQueueGenericSend+0xbe>
	__asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	61fb      	str	r3, [r7, #28]
}
 8002996:	bf00      	nop
 8002998:	e7fe      	b.n	8002998 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800299a:	f001 fbdb 	bl	8004154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <xQueueGenericSend+0xd4>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d129      	bne.n	8002a04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b6:	f000 f9b3 	bl	8002d20 <prvCopyDataToQueue>
 80029ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	3324      	adds	r3, #36	; 0x24
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 feb5 	bl	8003738 <xTaskRemoveFromEventList>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029d4:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <xQueueGenericSend+0x1f8>)
 80029d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	e00a      	b.n	80029fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <xQueueGenericSend+0x1f8>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029fc:	f001 fbda 	bl	80041b4 <vPortExitCritical>
				return pdPASS;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e063      	b.n	8002acc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a0a:	f001 fbd3 	bl	80041b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e05c      	b.n	8002acc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 feed 	bl	80037fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a22:	2301      	movs	r3, #1
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a26:	f001 fbc5 	bl	80041b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a2a:	f000 fc93 	bl	8003354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a2e:	f001 fb91 	bl	8004154 <vPortEnterCritical>
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a38:	b25b      	sxtb	r3, r3
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a3e:	d103      	bne.n	8002a48 <xQueueGenericSend+0x16c>
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a4e:	b25b      	sxtb	r3, r3
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a54:	d103      	bne.n	8002a5e <xQueueGenericSend+0x182>
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a5e:	f001 fba9 	bl	80041b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a62:	1d3a      	adds	r2, r7, #4
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fedc 	bl	8003828 <xTaskCheckForTimeOut>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d124      	bne.n	8002ac0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a78:	f000 fa24 	bl	8002ec4 <prvIsQueueFull>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d018      	beq.n	8002ab4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	3310      	adds	r3, #16
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fe30 	bl	80036f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a92:	f000 f9af 	bl	8002df4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a96:	f000 fc6b 	bl	8003370 <xTaskResumeAll>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f af7c 	bne.w	800299a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <xQueueGenericSend+0x1f8>)
 8002aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	e772      	b.n	800299a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab6:	f000 f99d 	bl	8002df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002aba:	f000 fc59 	bl	8003370 <xTaskResumeAll>
 8002abe:	e76c      	b.n	800299a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac2:	f000 f997 	bl	8002df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ac6:	f000 fc53 	bl	8003370 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002aca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3738      	adds	r7, #56	; 0x38
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08e      	sub	sp, #56	; 0x38
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	623b      	str	r3, [r7, #32]
}
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	61fb      	str	r3, [r7, #28]
}
 8002b24:	bf00      	nop
 8002b26:	e7fe      	b.n	8002b26 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b28:	f000 ffc2 	bl	8003ab0 <xTaskGetSchedulerState>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <xQueueSemaphoreTake+0x60>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <xQueueSemaphoreTake+0x64>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <xQueueSemaphoreTake+0x66>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10a      	bne.n	8002b58 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	61bb      	str	r3, [r7, #24]
}
 8002b54:	bf00      	nop
 8002b56:	e7fe      	b.n	8002b56 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b58:	f001 fafc 	bl	8004154 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d024      	beq.n	8002bb2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	1e5a      	subs	r2, r3, #1
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002b78:	f001 f942 	bl	8003e00 <pvTaskIncrementMutexHeldCount>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00f      	beq.n	8002baa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fdd2 	bl	8003738 <xTaskRemoveFromEventList>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b9a:	4b54      	ldr	r3, [pc, #336]	; (8002cec <xQueueSemaphoreTake+0x214>)
 8002b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002baa:	f001 fb03 	bl	80041b4 <vPortExitCritical>
				return pdPASS;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e097      	b.n	8002ce2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d111      	bne.n	8002bdc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	617b      	str	r3, [r7, #20]
}
 8002bd0:	bf00      	nop
 8002bd2:	e7fe      	b.n	8002bd2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002bd4:	f001 faee 	bl	80041b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e082      	b.n	8002ce2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fe08 	bl	80037fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bf0:	f001 fae0 	bl	80041b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bf4:	f000 fbae 	bl	8003354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bf8:	f001 faac 	bl	8004154 <vPortEnterCritical>
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c08:	d103      	bne.n	8002c12 <xQueueSemaphoreTake+0x13a>
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c1e:	d103      	bne.n	8002c28 <xQueueSemaphoreTake+0x150>
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c28:	f001 fac4 	bl	80041b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c2c:	463a      	mov	r2, r7
 8002c2e:	f107 030c 	add.w	r3, r7, #12
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fdf7 	bl	8003828 <xTaskCheckForTimeOut>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d132      	bne.n	8002ca6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c42:	f000 f929 	bl	8002e98 <prvIsQueueEmpty>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d026      	beq.n	8002c9a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002c54:	f001 fa7e 	bl	8004154 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 ff45 	bl	8003aec <xTaskPriorityInherit>
 8002c62:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002c64:	f001 faa6 	bl	80041b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	3324      	adds	r3, #36	; 0x24
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fd3d 	bl	80036f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c78:	f000 f8bc 	bl	8002df4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c7c:	f000 fb78 	bl	8003370 <xTaskResumeAll>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f47f af68 	bne.w	8002b58 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <xQueueSemaphoreTake+0x214>)
 8002c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	e75e      	b.n	8002b58 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002c9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c9c:	f000 f8aa 	bl	8002df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ca0:	f000 fb66 	bl	8003370 <xTaskResumeAll>
 8002ca4:	e758      	b.n	8002b58 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ca8:	f000 f8a4 	bl	8002df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cac:	f000 fb60 	bl	8003370 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cb2:	f000 f8f1 	bl	8002e98 <prvIsQueueEmpty>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f43f af4d 	beq.w	8002b58 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002cc4:	f001 fa46 	bl	8004154 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cca:	f000 f811 	bl	8002cf0 <prvGetDisinheritPriorityAfterTimeout>
 8002cce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 f804 	bl	8003ce4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002cdc:	f001 fa6a 	bl	80041b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ce0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3738      	adds	r7, #56	; 0x38
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	e000ed04 	.word	0xe000ed04

08002cf0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e001      	b.n	8002d12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002d12:	68fb      	ldr	r3, [r7, #12]
	}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d14d      	bne.n	8002de2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 ff44 	bl	8003bd8 <xTaskPriorityDisinherit>
 8002d50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	e043      	b.n	8002de2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d119      	bne.n	8002d94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6858      	ldr	r0, [r3, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	f001 fce8 	bl	8004740 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	441a      	add	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d32b      	bcc.n	8002de2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	e026      	b.n	8002de2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68d8      	ldr	r0, [r3, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	f001 fcce 	bl	8004740 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	425b      	negs	r3, r3
 8002dae:	441a      	add	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d207      	bcs.n	8002dd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	425b      	negs	r3, r3
 8002dca:	441a      	add	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d105      	bne.n	8002de2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002dea:	697b      	ldr	r3, [r7, #20]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002dfc:	f001 f9aa 	bl	8004154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e08:	e011      	b.n	8002e2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d012      	beq.n	8002e38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3324      	adds	r3, #36	; 0x24
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fc8e 	bl	8003738 <xTaskRemoveFromEventList>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e22:	f000 fd63 	bl	80038ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	dce9      	bgt.n	8002e0a <prvUnlockQueue+0x16>
 8002e36:	e000      	b.n	8002e3a <prvUnlockQueue+0x46>
					break;
 8002e38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e42:	f001 f9b7 	bl	80041b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e46:	f001 f985 	bl	8004154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e52:	e011      	b.n	8002e78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d012      	beq.n	8002e82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3310      	adds	r3, #16
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fc69 	bl	8003738 <xTaskRemoveFromEventList>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e6c:	f000 fd3e 	bl	80038ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e70:	7bbb      	ldrb	r3, [r7, #14]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dce9      	bgt.n	8002e54 <prvUnlockQueue+0x60>
 8002e80:	e000      	b.n	8002e84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	22ff      	movs	r2, #255	; 0xff
 8002e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e8c:	f001 f992 	bl	80041b4 <vPortExitCritical>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ea0:	f001 f958 	bl	8004154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002eac:	2301      	movs	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	e001      	b.n	8002eb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002eb6:	f001 f97d 	bl	80041b4 <vPortExitCritical>

	return xReturn;
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ecc:	f001 f942 	bl	8004154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d102      	bne.n	8002ee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002edc:	2301      	movs	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e001      	b.n	8002ee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ee6:	f001 f965 	bl	80041b4 <vPortExitCritical>

	return xReturn;
 8002eea:	68fb      	ldr	r3, [r7, #12]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08e      	sub	sp, #56	; 0x38
 8002ef8:	af04      	add	r7, sp, #16
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	623b      	str	r3, [r7, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	e7fe      	b.n	8002f1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <xTaskCreateStatic+0x46>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	61fb      	str	r3, [r7, #28]
}
 8002f36:	bf00      	nop
 8002f38:	e7fe      	b.n	8002f38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f3a:	2354      	movs	r3, #84	; 0x54
 8002f3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b54      	cmp	r3, #84	; 0x54
 8002f42:	d00a      	beq.n	8002f5a <xTaskCreateStatic+0x66>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	61bb      	str	r3, [r7, #24]
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01e      	beq.n	8002fa0 <xTaskCreateStatic+0xac>
 8002f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	2202      	movs	r2, #2
 8002f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	9303      	str	r3, [sp, #12]
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	9302      	str	r3, [sp, #8]
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f850 	bl	8003038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f9a:	f000 f8dd 	bl	8003158 <prvAddNewTaskToReadyList>
 8002f9e:	e001      	b.n	8002fa4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fa4:	697b      	ldr	r3, [r7, #20]
	}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3728      	adds	r7, #40	; 0x28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b08c      	sub	sp, #48	; 0x30
 8002fb2:	af04      	add	r7, sp, #16
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 f9a8 	bl	8004318 <pvPortMalloc>
 8002fc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00e      	beq.n	8002fee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fd0:	2054      	movs	r0, #84	; 0x54
 8002fd2:	f001 f9a1 	bl	8004318 <pvPortMalloc>
 8002fd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe4:	e005      	b.n	8002ff2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f001 fa62 	bl	80044b0 <vPortFree>
 8002fec:	e001      	b.n	8002ff2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d017      	beq.n	8003028 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003000:	88fa      	ldrh	r2, [r7, #6]
 8003002:	2300      	movs	r3, #0
 8003004:	9303      	str	r3, [sp, #12]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	9302      	str	r3, [sp, #8]
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f80e 	bl	8003038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800301c:	69f8      	ldr	r0, [r7, #28]
 800301e:	f000 f89b 	bl	8003158 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003022:	2301      	movs	r3, #1
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	e002      	b.n	800302e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800302c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800302e:	69bb      	ldr	r3, [r7, #24]
	}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	461a      	mov	r2, r3
 8003050:	21a5      	movs	r1, #165	; 0xa5
 8003052:	f001 fb83 	bl	800475c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003060:	3b01      	subs	r3, #1
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f023 0307 	bic.w	r3, r3, #7
 800306e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <prvInitialiseNewTask+0x58>
	__asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	617b      	str	r3, [r7, #20]
}
 800308c:	bf00      	nop
 800308e:	e7fe      	b.n	800308e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01f      	beq.n	80030d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	e012      	b.n	80030c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	7819      	ldrb	r1, [r3, #0]
 80030a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	3334      	adds	r3, #52	; 0x34
 80030ac:	460a      	mov	r2, r1
 80030ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3301      	adds	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b0f      	cmp	r3, #15
 80030c6:	d9e9      	bls.n	800309c <prvInitialiseNewTask+0x64>
 80030c8:	e000      	b.n	80030cc <prvInitialiseNewTask+0x94>
			{
				break;
 80030ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d4:	e003      	b.n	80030de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	2b06      	cmp	r3, #6
 80030e2:	d901      	bls.n	80030e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030e4:	2306      	movs	r3, #6
 80030e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	2200      	movs	r2, #0
 80030f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	3304      	adds	r3, #4
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fa95 	bl	800262e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	3318      	adds	r3, #24
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fa90 	bl	800262e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003112:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	f1c3 0207 	rsb	r2, r3, #7
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	68f9      	ldr	r1, [r7, #12]
 8003136:	69b8      	ldr	r0, [r7, #24]
 8003138:	f000 fedc 	bl	8003ef4 <pxPortInitialiseStack>
 800313c:	4602      	mov	r2, r0
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800314e:	bf00      	nop
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003160:	f000 fff8 	bl	8004154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <prvAddNewTaskToReadyList+0xb8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	4a29      	ldr	r2, [pc, #164]	; (8003210 <prvAddNewTaskToReadyList+0xb8>)
 800316c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800316e:	4b29      	ldr	r3, [pc, #164]	; (8003214 <prvAddNewTaskToReadyList+0xbc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003176:	4a27      	ldr	r2, [pc, #156]	; (8003214 <prvAddNewTaskToReadyList+0xbc>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <prvAddNewTaskToReadyList+0xb8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d110      	bne.n	80031a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003184:	f000 fbd6 	bl	8003934 <prvInitialiseTaskLists>
 8003188:	e00d      	b.n	80031a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <prvAddNewTaskToReadyList+0xc0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <prvAddNewTaskToReadyList+0xbc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	429a      	cmp	r2, r3
 800319e:	d802      	bhi.n	80031a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031a0:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <prvAddNewTaskToReadyList+0xbc>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <prvAddNewTaskToReadyList+0xc4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	4a1b      	ldr	r2, [pc, #108]	; (800321c <prvAddNewTaskToReadyList+0xc4>)
 80031ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	2201      	movs	r2, #1
 80031b6:	409a      	lsls	r2, r3
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <prvAddNewTaskToReadyList+0xc8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4313      	orrs	r3, r2
 80031be:	4a18      	ldr	r2, [pc, #96]	; (8003220 <prvAddNewTaskToReadyList+0xc8>)
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4a15      	ldr	r2, [pc, #84]	; (8003224 <prvAddNewTaskToReadyList+0xcc>)
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3304      	adds	r3, #4
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f7ff fa35 	bl	8002648 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80031de:	f000 ffe9 	bl	80041b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <prvAddNewTaskToReadyList+0xc0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00e      	beq.n	8003208 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <prvAddNewTaskToReadyList+0xbc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d207      	bcs.n	8003208 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <prvAddNewTaskToReadyList+0xd0>)
 80031fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000448 	.word	0x20000448
 8003214:	20000348 	.word	0x20000348
 8003218:	20000454 	.word	0x20000454
 800321c:	20000464 	.word	0x20000464
 8003220:	20000450 	.word	0x20000450
 8003224:	2000034c 	.word	0x2000034c
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d017      	beq.n	800326e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <vTaskDelay+0x60>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <vTaskDelay+0x30>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	60bb      	str	r3, [r7, #8]
}
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800325c:	f000 f87a 	bl	8003354 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003260:	2100      	movs	r1, #0
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fde0 	bl	8003e28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003268:	f000 f882 	bl	8003370 <xTaskResumeAll>
 800326c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <vTaskDelay+0x64>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000470 	.word	0x20000470
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032a2:	463a      	mov	r2, r7
 80032a4:	1d39      	adds	r1, r7, #4
 80032a6:	f107 0308 	add.w	r3, r7, #8
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd f97a 	bl	80005a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	9202      	str	r2, [sp, #8]
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	2300      	movs	r3, #0
 80032c0:	460a      	mov	r2, r1
 80032c2:	491e      	ldr	r1, [pc, #120]	; (800333c <vTaskStartScheduler+0xa8>)
 80032c4:	481e      	ldr	r0, [pc, #120]	; (8003340 <vTaskStartScheduler+0xac>)
 80032c6:	f7ff fe15 	bl	8002ef4 <xTaskCreateStatic>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <vTaskStartScheduler+0xb0>)
 80032ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032d0:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <vTaskStartScheduler+0xb0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032d8:	2301      	movs	r3, #1
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	e001      	b.n	80032e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d116      	bne.n	8003316 <vTaskStartScheduler+0x82>
	__asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	613b      	str	r3, [r7, #16]
}
 80032fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <vTaskStartScheduler+0xb4>)
 80032fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003302:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <vTaskStartScheduler+0xb8>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <vTaskStartScheduler+0xbc>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003310:	f000 fe7e 	bl	8004010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003314:	e00e      	b.n	8003334 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331c:	d10a      	bne.n	8003334 <vTaskStartScheduler+0xa0>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60fb      	str	r3, [r7, #12]
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <vTaskStartScheduler+0x9e>
}
 8003334:	bf00      	nop
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	080051f8 	.word	0x080051f8
 8003340:	08003905 	.word	0x08003905
 8003344:	2000046c 	.word	0x2000046c
 8003348:	20000468 	.word	0x20000468
 800334c:	20000454 	.word	0x20000454
 8003350:	2000044c 	.word	0x2000044c

08003354 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <vTaskSuspendAll+0x18>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	4a03      	ldr	r2, [pc, #12]	; (800336c <vTaskSuspendAll+0x18>)
 8003360:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	20000470 	.word	0x20000470

08003370 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800337e:	4b41      	ldr	r3, [pc, #260]	; (8003484 <xTaskResumeAll+0x114>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <xTaskResumeAll+0x2c>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	603b      	str	r3, [r7, #0]
}
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800339c:	f000 feda 	bl	8004154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033a0:	4b38      	ldr	r3, [pc, #224]	; (8003484 <xTaskResumeAll+0x114>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	4a37      	ldr	r2, [pc, #220]	; (8003484 <xTaskResumeAll+0x114>)
 80033a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <xTaskResumeAll+0x114>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d161      	bne.n	8003476 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033b2:	4b35      	ldr	r3, [pc, #212]	; (8003488 <xTaskResumeAll+0x118>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d05d      	beq.n	8003476 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033ba:	e02e      	b.n	800341a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033bc:	4b33      	ldr	r3, [pc, #204]	; (800348c <xTaskResumeAll+0x11c>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3318      	adds	r3, #24
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff f99a 	bl	8002702 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff f995 	bl	8002702 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <xTaskResumeAll+0x120>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <xTaskResumeAll+0x120>)
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4a27      	ldr	r2, [pc, #156]	; (8003494 <xTaskResumeAll+0x124>)
 80033f8:	441a      	add	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3304      	adds	r3, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7ff f921 	bl	8002648 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <xTaskResumeAll+0x128>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <xTaskResumeAll+0x12c>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800341a:	4b1c      	ldr	r3, [pc, #112]	; (800348c <xTaskResumeAll+0x11c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1cc      	bne.n	80033bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003428:	f000 fb22 	bl	8003a70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <xTaskResumeAll+0x130>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003438:	f000 f846 	bl	80034c8 <xTaskIncrementTick>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <xTaskResumeAll+0x12c>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f1      	bne.n	8003438 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <xTaskResumeAll+0x130>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <xTaskResumeAll+0x12c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003462:	2301      	movs	r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <xTaskResumeAll+0x134>)
 8003468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003476:	f000 fe9d 	bl	80041b4 <vPortExitCritical>

	return xAlreadyYielded;
 800347a:	68bb      	ldr	r3, [r7, #8]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000470 	.word	0x20000470
 8003488:	20000448 	.word	0x20000448
 800348c:	20000408 	.word	0x20000408
 8003490:	20000450 	.word	0x20000450
 8003494:	2000034c 	.word	0x2000034c
 8003498:	20000348 	.word	0x20000348
 800349c:	2000045c 	.word	0x2000045c
 80034a0:	20000458 	.word	0x20000458
 80034a4:	e000ed04 	.word	0xe000ed04

080034a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <xTaskGetTickCount+0x1c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	2000044c 	.word	0x2000044c

080034c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d2:	4b4e      	ldr	r3, [pc, #312]	; (800360c <xTaskIncrementTick+0x144>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 808e 	bne.w	80035f8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034dc:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <xTaskIncrementTick+0x148>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034e4:	4a4a      	ldr	r2, [pc, #296]	; (8003610 <xTaskIncrementTick+0x148>)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d120      	bne.n	8003532 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80034f0:	4b48      	ldr	r3, [pc, #288]	; (8003614 <xTaskIncrementTick+0x14c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <xTaskIncrementTick+0x48>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	603b      	str	r3, [r7, #0]
}
 800350c:	bf00      	nop
 800350e:	e7fe      	b.n	800350e <xTaskIncrementTick+0x46>
 8003510:	4b40      	ldr	r3, [pc, #256]	; (8003614 <xTaskIncrementTick+0x14c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b40      	ldr	r3, [pc, #256]	; (8003618 <xTaskIncrementTick+0x150>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3e      	ldr	r2, [pc, #248]	; (8003614 <xTaskIncrementTick+0x14c>)
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4a3e      	ldr	r2, [pc, #248]	; (8003618 <xTaskIncrementTick+0x150>)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b3d      	ldr	r3, [pc, #244]	; (800361c <xTaskIncrementTick+0x154>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	4a3c      	ldr	r2, [pc, #240]	; (800361c <xTaskIncrementTick+0x154>)
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	f000 fa9f 	bl	8003a70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003532:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <xTaskIncrementTick+0x158>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	429a      	cmp	r2, r3
 800353a:	d348      	bcc.n	80035ce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800353c:	4b35      	ldr	r3, [pc, #212]	; (8003614 <xTaskIncrementTick+0x14c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003546:	4b36      	ldr	r3, [pc, #216]	; (8003620 <xTaskIncrementTick+0x158>)
 8003548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800354c:	601a      	str	r2, [r3, #0]
					break;
 800354e:	e03e      	b.n	80035ce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003550:	4b30      	ldr	r3, [pc, #192]	; (8003614 <xTaskIncrementTick+0x14c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d203      	bcs.n	8003570 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003568:	4a2d      	ldr	r2, [pc, #180]	; (8003620 <xTaskIncrementTick+0x158>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800356e:	e02e      	b.n	80035ce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	3304      	adds	r3, #4
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff f8c4 	bl	8002702 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d004      	beq.n	800358c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3318      	adds	r3, #24
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f8bb 	bl	8002702 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2201      	movs	r2, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	4b23      	ldr	r3, [pc, #140]	; (8003624 <xTaskIncrementTick+0x15c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	4a22      	ldr	r2, [pc, #136]	; (8003624 <xTaskIncrementTick+0x15c>)
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <xTaskIncrementTick+0x160>)
 80035ac:	441a      	add	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f7ff f847 	bl	8002648 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <xTaskIncrementTick+0x164>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d3b9      	bcc.n	800353c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035cc:	e7b6      	b.n	800353c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <xTaskIncrementTick+0x164>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	4914      	ldr	r1, [pc, #80]	; (8003628 <xTaskIncrementTick+0x160>)
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d901      	bls.n	80035ea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80035e6:	2301      	movs	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80035ea:	4b11      	ldr	r3, [pc, #68]	; (8003630 <xTaskIncrementTick+0x168>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e004      	b.n	8003602 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <xTaskIncrementTick+0x16c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <xTaskIncrementTick+0x16c>)
 8003600:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003602:	697b      	ldr	r3, [r7, #20]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000470 	.word	0x20000470
 8003610:	2000044c 	.word	0x2000044c
 8003614:	20000400 	.word	0x20000400
 8003618:	20000404 	.word	0x20000404
 800361c:	20000460 	.word	0x20000460
 8003620:	20000468 	.word	0x20000468
 8003624:	20000450 	.word	0x20000450
 8003628:	2000034c 	.word	0x2000034c
 800362c:	20000348 	.word	0x20000348
 8003630:	2000045c 	.word	0x2000045c
 8003634:	20000458 	.word	0x20000458

08003638 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800363e:	4b27      	ldr	r3, [pc, #156]	; (80036dc <vTaskSwitchContext+0xa4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003646:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <vTaskSwitchContext+0xa8>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800364c:	e03f      	b.n	80036ce <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800364e:	4b24      	ldr	r3, [pc, #144]	; (80036e0 <vTaskSwitchContext+0xa8>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003654:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <vTaskSwitchContext+0xac>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	f1c3 031f 	rsb	r3, r3, #31
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	491f      	ldr	r1, [pc, #124]	; (80036e8 <vTaskSwitchContext+0xb0>)
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <vTaskSwitchContext+0x5c>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	607b      	str	r3, [r7, #4]
}
 8003690:	bf00      	nop
 8003692:	e7fe      	b.n	8003692 <vTaskSwitchContext+0x5a>
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <vTaskSwitchContext+0xb0>)
 80036a0:	4413      	add	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	3308      	adds	r3, #8
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d104      	bne.n	80036c4 <vTaskSwitchContext+0x8c>
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <vTaskSwitchContext+0xb4>)
 80036cc:	6013      	str	r3, [r2, #0]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000470 	.word	0x20000470
 80036e0:	2000045c 	.word	0x2000045c
 80036e4:	20000450 	.word	0x20000450
 80036e8:	2000034c 	.word	0x2000034c
 80036ec:	20000348 	.word	0x20000348

080036f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	60fb      	str	r3, [r7, #12]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <vTaskPlaceOnEventList+0x44>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3318      	adds	r3, #24
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe ffb6 	bl	8002690 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003724:	2101      	movs	r1, #1
 8003726:	6838      	ldr	r0, [r7, #0]
 8003728:	f000 fb7e 	bl	8003e28 <prvAddCurrentTaskToDelayedList>
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000348 	.word	0x20000348

08003738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	60fb      	str	r3, [r7, #12]
}
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	3318      	adds	r3, #24
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe ffca 	bl	8002702 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <xTaskRemoveFromEventList+0xac>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11c      	bne.n	80037b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3304      	adds	r3, #4
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe ffc1 	bl	8002702 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	2201      	movs	r2, #1
 8003786:	409a      	lsls	r2, r3
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <xTaskRemoveFromEventList+0xb0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <xTaskRemoveFromEventList+0xb0>)
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4a13      	ldr	r2, [pc, #76]	; (80037ec <xTaskRemoveFromEventList+0xb4>)
 80037a0:	441a      	add	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f7fe ff4d 	bl	8002648 <vListInsertEnd>
 80037ae:	e005      	b.n	80037bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	3318      	adds	r3, #24
 80037b4:	4619      	mov	r1, r3
 80037b6:	480e      	ldr	r0, [pc, #56]	; (80037f0 <xTaskRemoveFromEventList+0xb8>)
 80037b8:	f7fe ff46 	bl	8002648 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <xTaskRemoveFromEventList+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d905      	bls.n	80037d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <xTaskRemoveFromEventList+0xc0>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e001      	b.n	80037da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80037da:	697b      	ldr	r3, [r7, #20]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000470 	.word	0x20000470
 80037e8:	20000450 	.word	0x20000450
 80037ec:	2000034c 	.word	0x2000034c
 80037f0:	20000408 	.word	0x20000408
 80037f4:	20000348 	.word	0x20000348
 80037f8:	2000045c 	.word	0x2000045c

080037fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <vTaskInternalSetTimeOutState+0x24>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <vTaskInternalSetTimeOutState+0x28>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	605a      	str	r2, [r3, #4]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	20000460 	.word	0x20000460
 8003824:	2000044c 	.word	0x2000044c

08003828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	613b      	str	r3, [r7, #16]
}
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	60fb      	str	r3, [r7, #12]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800386a:	f000 fc73 	bl	8004154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <xTaskCheckForTimeOut+0xbc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003886:	d102      	bne.n	800388e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
 800388c:	e023      	b.n	80038d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <xTaskCheckForTimeOut+0xc0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d007      	beq.n	80038aa <xTaskCheckForTimeOut+0x82>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d302      	bcc.n	80038aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	e015      	b.n	80038d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d20b      	bcs.n	80038cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	1ad2      	subs	r2, r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff9b 	bl	80037fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	e004      	b.n	80038d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80038d6:	f000 fc6d 	bl	80041b4 <vPortExitCritical>

	return xReturn;
 80038da:	69fb      	ldr	r3, [r7, #28]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	2000044c 	.word	0x2000044c
 80038e8:	20000460 	.word	0x20000460

080038ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <vTaskMissedYield+0x14>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	2000045c 	.word	0x2000045c

08003904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800390c:	f000 f852 	bl	80039b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <prvIdleTask+0x28>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d9f9      	bls.n	800390c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <prvIdleTask+0x2c>)
 800391a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003928:	e7f0      	b.n	800390c <prvIdleTask+0x8>
 800392a:	bf00      	nop
 800392c:	2000034c 	.word	0x2000034c
 8003930:	e000ed04 	.word	0xe000ed04

08003934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	e00c      	b.n	800395a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <prvInitialiseTaskLists+0x60>)
 800394c:	4413      	add	r3, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fe4d 	bl	80025ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3301      	adds	r3, #1
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b06      	cmp	r3, #6
 800395e:	d9ef      	bls.n	8003940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003960:	480d      	ldr	r0, [pc, #52]	; (8003998 <prvInitialiseTaskLists+0x64>)
 8003962:	f7fe fe44 	bl	80025ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003966:	480d      	ldr	r0, [pc, #52]	; (800399c <prvInitialiseTaskLists+0x68>)
 8003968:	f7fe fe41 	bl	80025ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800396c:	480c      	ldr	r0, [pc, #48]	; (80039a0 <prvInitialiseTaskLists+0x6c>)
 800396e:	f7fe fe3e 	bl	80025ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003972:	480c      	ldr	r0, [pc, #48]	; (80039a4 <prvInitialiseTaskLists+0x70>)
 8003974:	f7fe fe3b 	bl	80025ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003978:	480b      	ldr	r0, [pc, #44]	; (80039a8 <prvInitialiseTaskLists+0x74>)
 800397a:	f7fe fe38 	bl	80025ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <prvInitialiseTaskLists+0x78>)
 8003980:	4a05      	ldr	r2, [pc, #20]	; (8003998 <prvInitialiseTaskLists+0x64>)
 8003982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <prvInitialiseTaskLists+0x7c>)
 8003986:	4a05      	ldr	r2, [pc, #20]	; (800399c <prvInitialiseTaskLists+0x68>)
 8003988:	601a      	str	r2, [r3, #0]
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2000034c 	.word	0x2000034c
 8003998:	200003d8 	.word	0x200003d8
 800399c:	200003ec 	.word	0x200003ec
 80039a0:	20000408 	.word	0x20000408
 80039a4:	2000041c 	.word	0x2000041c
 80039a8:	20000434 	.word	0x20000434
 80039ac:	20000400 	.word	0x20000400
 80039b0:	20000404 	.word	0x20000404

080039b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039ba:	e019      	b.n	80039f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039bc:	f000 fbca 	bl	8004154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <prvCheckTasksWaitingTermination+0x50>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fe98 	bl	8002702 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <prvCheckTasksWaitingTermination+0x54>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	4a0b      	ldr	r2, [pc, #44]	; (8003a08 <prvCheckTasksWaitingTermination+0x54>)
 80039da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <prvCheckTasksWaitingTermination+0x58>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <prvCheckTasksWaitingTermination+0x58>)
 80039e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80039e6:	f000 fbe5 	bl	80041b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f810 	bl	8003a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <prvCheckTasksWaitingTermination+0x58>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e1      	bne.n	80039bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	2000041c 	.word	0x2000041c
 8003a08:	20000448 	.word	0x20000448
 8003a0c:	20000430 	.word	0x20000430

08003a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fd42 	bl	80044b0 <vPortFree>
				vPortFree( pxTCB );
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fd3f 	bl	80044b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a32:	e018      	b.n	8003a66 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d103      	bne.n	8003a46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fd36 	bl	80044b0 <vPortFree>
	}
 8003a44:	e00f      	b.n	8003a66 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d00a      	beq.n	8003a66 <prvDeleteTCB+0x56>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	60fb      	str	r3, [r7, #12]
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <prvDeleteTCB+0x54>
	}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <prvResetNextTaskUnblockTime+0x38>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d104      	bne.n	8003a8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <prvResetNextTaskUnblockTime+0x3c>)
 8003a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a88:	e008      	b.n	8003a9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <prvResetNextTaskUnblockTime+0x38>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a04      	ldr	r2, [pc, #16]	; (8003aac <prvResetNextTaskUnblockTime+0x3c>)
 8003a9a:	6013      	str	r3, [r2, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20000400 	.word	0x20000400
 8003aac:	20000468 	.word	0x20000468

08003ab0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <xTaskGetSchedulerState+0x34>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	e008      	b.n	8003ad6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <xTaskGetSchedulerState+0x38>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003acc:	2302      	movs	r3, #2
 8003ace:	607b      	str	r3, [r7, #4]
 8003ad0:	e001      	b.n	8003ad6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ad6:	687b      	ldr	r3, [r7, #4]
	}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	20000454 	.word	0x20000454
 8003ae8:	20000470 	.word	0x20000470

08003aec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d05e      	beq.n	8003bc0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b06:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <xTaskPriorityInherit+0xe0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d24e      	bcs.n	8003bae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db06      	blt.n	8003b26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b18:	4b2c      	ldr	r3, [pc, #176]	; (8003bcc <xTaskPriorityInherit+0xe0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	f1c3 0207 	rsb	r2, r3, #7
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6959      	ldr	r1, [r3, #20]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <xTaskPriorityInherit+0xe4>)
 8003b38:	4413      	add	r3, r2
 8003b3a:	4299      	cmp	r1, r3
 8003b3c:	d12f      	bne.n	8003b9e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe fddd 	bl	8002702 <uxListRemove>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	2201      	movs	r2, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43da      	mvns	r2, r3
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <xTaskPriorityInherit+0xe8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <xTaskPriorityInherit+0xe8>)
 8003b62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <xTaskPriorityInherit+0xe0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	2201      	movs	r2, #1
 8003b74:	409a      	lsls	r2, r3
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <xTaskPriorityInherit+0xe8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <xTaskPriorityInherit+0xe8>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <xTaskPriorityInherit+0xe4>)
 8003b8e:	441a      	add	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fe fd56 	bl	8002648 <vListInsertEnd>
 8003b9c:	e004      	b.n	8003ba8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <xTaskPriorityInherit+0xe0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e008      	b.n	8003bc0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <xTaskPriorityInherit+0xe0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d201      	bcs.n	8003bc0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
	}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000348 	.word	0x20000348
 8003bd0:	2000034c 	.word	0x2000034c
 8003bd4:	20000450 	.word	0x20000450

08003bd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d06e      	beq.n	8003ccc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bee:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <xTaskPriorityDisinherit+0x100>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d00a      	beq.n	8003c0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60fb      	str	r3, [r7, #12]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	60bb      	str	r3, [r7, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	e7fe      	b.n	8003c2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	1e5a      	subs	r2, r3, #1
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d044      	beq.n	8003ccc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d140      	bne.n	8003ccc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fd57 	bl	8002702 <uxListRemove>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d115      	bne.n	8003c86 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	491f      	ldr	r1, [pc, #124]	; (8003cdc <xTaskPriorityDisinherit+0x104>)
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <xTaskPriorityDisinherit+0xae>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	2201      	movs	r2, #1
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <xTaskPriorityDisinherit+0x108>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4013      	ands	r3, r2
 8003c82:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <xTaskPriorityDisinherit+0x108>)
 8003c84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	f1c3 0207 	rsb	r2, r3, #7
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <xTaskPriorityDisinherit+0x108>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <xTaskPriorityDisinherit+0x108>)
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <xTaskPriorityDisinherit+0x104>)
 8003cba:	441a      	add	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7fe fcc0 	bl	8002648 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ccc:	697b      	ldr	r3, [r7, #20]
	}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000348 	.word	0x20000348
 8003cdc:	2000034c 	.word	0x2000034c
 8003ce0:	20000450 	.word	0x20000450

08003ce4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d077      	beq.n	8003dec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	60fb      	str	r3, [r7, #12]
}
 8003d16:	bf00      	nop
 8003d18:	e7fe      	b.n	8003d18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d902      	bls.n	8003d2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	e002      	b.n	8003d30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d058      	beq.n	8003dec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d153      	bne.n	8003dec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d10a      	bne.n	8003d64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	60bb      	str	r3, [r7, #8]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	db04      	blt.n	8003d82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f1c3 0207 	rsb	r2, r3, #7
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	6959      	ldr	r1, [r3, #20]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003d92:	4413      	add	r3, r2
 8003d94:	4299      	cmp	r1, r3
 8003d96:	d129      	bne.n	8003dec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fcb0 	bl	8002702 <uxListRemove>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	2201      	movs	r2, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43da      	mvns	r2, r3
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4013      	ands	r3, r2
 8003dba:	4a10      	ldr	r2, [pc, #64]	; (8003dfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003dbc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4a06      	ldr	r2, [pc, #24]	; (8003df8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003dde:	441a      	add	r2, r3
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f7fe fc2e 	bl	8002648 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dec:	bf00      	nop
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000348 	.word	0x20000348
 8003df8:	2000034c 	.word	0x2000034c
 8003dfc:	20000450 	.word	0x20000450

08003e00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e12:	3201      	adds	r2, #1
 8003e14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003e16:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e18:	681b      	ldr	r3, [r3, #0]
	}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	20000348 	.word	0x20000348

08003e28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e32:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e38:	4b28      	ldr	r3, [pc, #160]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fc5f 	bl	8002702 <uxListRemove>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	2201      	movs	r2, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e68:	d10a      	bne.n	8003e80 <prvAddCurrentTaskToDelayedList+0x58>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	481a      	ldr	r0, [pc, #104]	; (8003ee4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e7a:	f7fe fbe5 	bl	8002648 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e7e:	e026      	b.n	8003ece <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d209      	bcs.n	8003eac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fe fbf3 	bl	8002690 <vListInsert>
}
 8003eaa:	e010      	b.n	8003ece <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <prvAddCurrentTaskToDelayedList+0xc4>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4610      	mov	r0, r2
 8003eba:	f7fe fbe9 	bl	8002690 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d202      	bcs.n	8003ece <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ec8:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6013      	str	r3, [r2, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000044c 	.word	0x2000044c
 8003edc:	20000348 	.word	0x20000348
 8003ee0:	20000450 	.word	0x20000450
 8003ee4:	20000434 	.word	0x20000434
 8003ee8:	20000404 	.word	0x20000404
 8003eec:	20000400 	.word	0x20000400
 8003ef0:	20000468 	.word	0x20000468

08003ef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3b04      	subs	r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3b04      	subs	r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 0201 	bic.w	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3b04      	subs	r3, #4
 8003f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f24:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <pxPortInitialiseStack+0x64>)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3b14      	subs	r3, #20
 8003f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3b04      	subs	r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f06f 0202 	mvn.w	r2, #2
 8003f42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3b20      	subs	r3, #32
 8003f48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	08003f5d 	.word	0x08003f5d

08003f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <prvTaskExitError+0x54>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f6e:	d00a      	beq.n	8003f86 <prvTaskExitError+0x2a>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	60fb      	str	r3, [r7, #12]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <prvTaskExitError+0x28>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60bb      	str	r3, [r7, #8]
}
 8003f98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f9a:	bf00      	nop
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0fc      	beq.n	8003f9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fa2:	bf00      	nop
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	2000000c 	.word	0x2000000c
	...

08003fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <pxCurrentTCBConst2>)
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	6808      	ldr	r0, [r1, #0]
 8003fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fca:	f380 8809 	msr	PSP, r0
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f380 8811 	msr	BASEPRI, r0
 8003fda:	4770      	bx	lr
 8003fdc:	f3af 8000 	nop.w

08003fe0 <pxCurrentTCBConst2>:
 8003fe0:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop

08003fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003fe8:	4808      	ldr	r0, [pc, #32]	; (800400c <prvPortStartFirstTask+0x24>)
 8003fea:	6800      	ldr	r0, [r0, #0]
 8003fec:	6800      	ldr	r0, [r0, #0]
 8003fee:	f380 8808 	msr	MSP, r0
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f380 8814 	msr	CONTROL, r0
 8003ffa:	b662      	cpsie	i
 8003ffc:	b661      	cpsie	f
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	df00      	svc	0
 8004008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800400a:	bf00      	nop
 800400c:	e000ed08 	.word	0xe000ed08

08004010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004016:	4b46      	ldr	r3, [pc, #280]	; (8004130 <xPortStartScheduler+0x120>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a46      	ldr	r2, [pc, #280]	; (8004134 <xPortStartScheduler+0x124>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10a      	bne.n	8004036 <xPortStartScheduler+0x26>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	613b      	str	r3, [r7, #16]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004036:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <xPortStartScheduler+0x120>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3f      	ldr	r2, [pc, #252]	; (8004138 <xPortStartScheduler+0x128>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10a      	bne.n	8004056 <xPortStartScheduler+0x46>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004056:	4b39      	ldr	r3, [pc, #228]	; (800413c <xPortStartScheduler+0x12c>)
 8004058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	22ff      	movs	r2, #255	; 0xff
 8004066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <xPortStartScheduler+0x130>)
 800407c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800407e:	4b31      	ldr	r3, [pc, #196]	; (8004144 <xPortStartScheduler+0x134>)
 8004080:	2207      	movs	r2, #7
 8004082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004084:	e009      	b.n	800409a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004086:	4b2f      	ldr	r3, [pc, #188]	; (8004144 <xPortStartScheduler+0x134>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3b01      	subs	r3, #1
 800408c:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <xPortStartScheduler+0x134>)
 800408e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d0ef      	beq.n	8004086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040a6:	4b27      	ldr	r3, [pc, #156]	; (8004144 <xPortStartScheduler+0x134>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f1c3 0307 	rsb	r3, r3, #7
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d00a      	beq.n	80040c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60bb      	str	r3, [r7, #8]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <xPortStartScheduler+0x134>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <xPortStartScheduler+0x134>)
 80040d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040d2:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <xPortStartScheduler+0x134>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040da:	4a1a      	ldr	r2, [pc, #104]	; (8004144 <xPortStartScheduler+0x134>)
 80040dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040e6:	4b18      	ldr	r3, [pc, #96]	; (8004148 <xPortStartScheduler+0x138>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a17      	ldr	r2, [pc, #92]	; (8004148 <xPortStartScheduler+0x138>)
 80040ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <xPortStartScheduler+0x138>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a14      	ldr	r2, [pc, #80]	; (8004148 <xPortStartScheduler+0x138>)
 80040f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040fe:	f000 f8dd 	bl	80042bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <xPortStartScheduler+0x13c>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004108:	f000 f8fc 	bl	8004304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <xPortStartScheduler+0x140>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0f      	ldr	r2, [pc, #60]	; (8004150 <xPortStartScheduler+0x140>)
 8004112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004118:	f7ff ff66 	bl	8003fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800411c:	f7ff fa8c 	bl	8003638 <vTaskSwitchContext>
	prvTaskExitError();
 8004120:	f7ff ff1c 	bl	8003f5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	e000ed00 	.word	0xe000ed00
 8004134:	410fc271 	.word	0x410fc271
 8004138:	410fc270 	.word	0x410fc270
 800413c:	e000e400 	.word	0xe000e400
 8004140:	20000474 	.word	0x20000474
 8004144:	20000478 	.word	0x20000478
 8004148:	e000ed20 	.word	0xe000ed20
 800414c:	2000000c 	.word	0x2000000c
 8004150:	e000ef34 	.word	0xe000ef34

08004154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	607b      	str	r3, [r7, #4]
}
 800416c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <vPortEnterCritical+0x58>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <vPortEnterCritical+0x58>)
 8004176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <vPortEnterCritical+0x58>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d10f      	bne.n	80041a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <vPortEnterCritical+0x5c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	603b      	str	r3, [r7, #0]
}
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <vPortEnterCritical+0x4a>
	}
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	2000000c 	.word	0x2000000c
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <vPortExitCritical+0x50>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <vPortExitCritical+0x24>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	607b      	str	r3, [r7, #4]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <vPortExitCritical+0x50>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <vPortExitCritical+0x50>)
 80041e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <vPortExitCritical+0x50>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <vPortExitCritical+0x42>
 80041ea:	2300      	movs	r3, #0
 80041ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000000c 	.word	0x2000000c
	...

08004210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004210:	f3ef 8009 	mrs	r0, PSP
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <pxCurrentTCBConst>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	f01e 0f10 	tst.w	lr, #16
 8004220:	bf08      	it	eq
 8004222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	6010      	str	r0, [r2, #0]
 800422c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004234:	f380 8811 	msr	BASEPRI, r0
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f7ff f9fa 	bl	8003638 <vTaskSwitchContext>
 8004244:	f04f 0000 	mov.w	r0, #0
 8004248:	f380 8811 	msr	BASEPRI, r0
 800424c:	bc09      	pop	{r0, r3}
 800424e:	6819      	ldr	r1, [r3, #0]
 8004250:	6808      	ldr	r0, [r1, #0]
 8004252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004256:	f01e 0f10 	tst.w	lr, #16
 800425a:	bf08      	it	eq
 800425c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004260:	f380 8809 	msr	PSP, r0
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	f3af 8000 	nop.w

08004270 <pxCurrentTCBConst>:
 8004270:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	607b      	str	r3, [r7, #4]
}
 8004290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004292:	f7ff f919 	bl	80034c8 <xTaskIncrementTick>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <xPortSysTickHandler+0x40>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f383 8811 	msr	BASEPRI, r3
}
 80042ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <vPortSetupTimerInterrupt+0x34>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <vPortSetupTimerInterrupt+0x38>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <vPortSetupTimerInterrupt+0x3c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <vPortSetupTimerInterrupt+0x40>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	4a09      	ldr	r2, [pc, #36]	; (8004300 <vPortSetupTimerInterrupt+0x44>)
 80042da:	3b01      	subs	r3, #1
 80042dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <vPortSetupTimerInterrupt+0x34>)
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	e000e010 	.word	0xe000e010
 80042f4:	e000e018 	.word	0xe000e018
 80042f8:	20000000 	.word	0x20000000
 80042fc:	10624dd3 	.word	0x10624dd3
 8004300:	e000e014 	.word	0xe000e014

08004304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004314 <vPortEnableVFP+0x10>
 8004308:	6801      	ldr	r1, [r0, #0]
 800430a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800430e:	6001      	str	r1, [r0, #0]
 8004310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004312:	bf00      	nop
 8004314:	e000ed88 	.word	0xe000ed88

08004318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004324:	f7ff f816 	bl	8003354 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004328:	4b5b      	ldr	r3, [pc, #364]	; (8004498 <pvPortMalloc+0x180>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004330:	f000 f920 	bl	8004574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004334:	4b59      	ldr	r3, [pc, #356]	; (800449c <pvPortMalloc+0x184>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	f040 8093 	bne.w	8004468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01d      	beq.n	8004384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004348:	2208      	movs	r2, #8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	2b00      	cmp	r3, #0
 8004358:	d014      	beq.n	8004384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f023 0307 	bic.w	r3, r3, #7
 8004360:	3308      	adds	r3, #8
 8004362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <pvPortMalloc+0x6c>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	617b      	str	r3, [r7, #20]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d06e      	beq.n	8004468 <pvPortMalloc+0x150>
 800438a:	4b45      	ldr	r3, [pc, #276]	; (80044a0 <pvPortMalloc+0x188>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d869      	bhi.n	8004468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004394:	4b43      	ldr	r3, [pc, #268]	; (80044a4 <pvPortMalloc+0x18c>)
 8004396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004398:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <pvPortMalloc+0x18c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800439e:	e004      	b.n	80043aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d903      	bls.n	80043bc <pvPortMalloc+0xa4>
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f1      	bne.n	80043a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043bc:	4b36      	ldr	r3, [pc, #216]	; (8004498 <pvPortMalloc+0x180>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d050      	beq.n	8004468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2208      	movs	r2, #8
 80043cc:	4413      	add	r3, r2
 80043ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	2308      	movs	r3, #8
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d91f      	bls.n	8004428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <pvPortMalloc+0xf8>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	613b      	str	r3, [r7, #16]
}
 800440c:	bf00      	nop
 800440e:	e7fe      	b.n	800440e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1ad2      	subs	r2, r2, r3
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004422:	69b8      	ldr	r0, [r7, #24]
 8004424:	f000 f908 	bl	8004638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <pvPortMalloc+0x188>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <pvPortMalloc+0x188>)
 8004434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <pvPortMalloc+0x188>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <pvPortMalloc+0x190>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d203      	bcs.n	800444a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <pvPortMalloc+0x188>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <pvPortMalloc+0x190>)
 8004448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <pvPortMalloc+0x184>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	431a      	orrs	r2, r3
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <pvPortMalloc+0x194>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	4a11      	ldr	r2, [pc, #68]	; (80044ac <pvPortMalloc+0x194>)
 8004466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004468:	f7fe ff82 	bl	8003370 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <pvPortMalloc+0x174>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60fb      	str	r3, [r7, #12]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <pvPortMalloc+0x172>
	return pvReturn;
 800448c:	69fb      	ldr	r3, [r7, #28]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3728      	adds	r7, #40	; 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20004084 	.word	0x20004084
 800449c:	20004098 	.word	0x20004098
 80044a0:	20004088 	.word	0x20004088
 80044a4:	2000407c 	.word	0x2000407c
 80044a8:	2000408c 	.word	0x2000408c
 80044ac:	20004090 	.word	0x20004090

080044b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d04d      	beq.n	800455e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044c2:	2308      	movs	r3, #8
 80044c4:	425b      	negs	r3, r3
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4413      	add	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	4b24      	ldr	r3, [pc, #144]	; (8004568 <vPortFree+0xb8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <vPortFree+0x44>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	60fb      	str	r3, [r7, #12]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <vPortFree+0x62>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60bb      	str	r3, [r7, #8]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <vPortFree+0xb8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01e      	beq.n	800455e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11a      	bne.n	800455e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <vPortFree+0xb8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004538:	f7fe ff0c 	bl	8003354 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <vPortFree+0xbc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4413      	add	r3, r2
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <vPortFree+0xbc>)
 8004548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800454a:	6938      	ldr	r0, [r7, #16]
 800454c:	f000 f874 	bl	8004638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <vPortFree+0xc0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	4a06      	ldr	r2, [pc, #24]	; (8004570 <vPortFree+0xc0>)
 8004558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800455a:	f7fe ff09 	bl	8003370 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20004098 	.word	0x20004098
 800456c:	20004088 	.word	0x20004088
 8004570:	20004094 	.word	0x20004094

08004574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800457a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800457e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <prvHeapInit+0xac>)
 8004582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3307      	adds	r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <prvHeapInit+0xac>)
 80045a4:	4413      	add	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <prvHeapInit+0xb0>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <prvHeapInit+0xb0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045c0:	2208      	movs	r2, #8
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <prvHeapInit+0xb4>)
 80045d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <prvHeapInit+0xb4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <prvHeapInit+0xb4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <prvHeapInit+0xb4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a0a      	ldr	r2, [pc, #40]	; (800462c <prvHeapInit+0xb8>)
 8004602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a09      	ldr	r2, [pc, #36]	; (8004630 <prvHeapInit+0xbc>)
 800460a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <prvHeapInit+0xc0>)
 800460e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	2000047c 	.word	0x2000047c
 8004624:	2000407c 	.word	0x2000407c
 8004628:	20004084 	.word	0x20004084
 800462c:	2000408c 	.word	0x2000408c
 8004630:	20004088 	.word	0x20004088
 8004634:	20004098 	.word	0x20004098

08004638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <prvInsertBlockIntoFreeList+0xac>)
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e002      	b.n	800464c <prvInsertBlockIntoFreeList+0x14>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	d8f7      	bhi.n	8004646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4413      	add	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d108      	bne.n	800467a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	441a      	add	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	441a      	add	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d118      	bne.n	80046c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d00d      	beq.n	80046b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e008      	b.n	80046c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046b6:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <prvInsertBlockIntoFreeList+0xb0>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e003      	b.n	80046c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d002      	beq.n	80046d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000407c 	.word	0x2000407c
 80046e8:	20004084 	.word	0x20004084

080046ec <__errno>:
 80046ec:	4b01      	ldr	r3, [pc, #4]	; (80046f4 <__errno+0x8>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000010 	.word	0x20000010

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4d0d      	ldr	r5, [pc, #52]	; (8004730 <__libc_init_array+0x38>)
 80046fc:	4c0d      	ldr	r4, [pc, #52]	; (8004734 <__libc_init_array+0x3c>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	2600      	movs	r6, #0
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	4d0b      	ldr	r5, [pc, #44]	; (8004738 <__libc_init_array+0x40>)
 800470a:	4c0c      	ldr	r4, [pc, #48]	; (800473c <__libc_init_array+0x44>)
 800470c:	f000 fc8e 	bl	800502c <_init>
 8004710:	1b64      	subs	r4, r4, r5
 8004712:	10a4      	asrs	r4, r4, #2
 8004714:	2600      	movs	r6, #0
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	f855 3b04 	ldr.w	r3, [r5], #4
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	08005254 	.word	0x08005254
 8004734:	08005254 	.word	0x08005254
 8004738:	08005254 	.word	0x08005254
 800473c:	08005258 	.word	0x08005258

08004740 <memcpy>:
 8004740:	440a      	add	r2, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004748:	d100      	bne.n	800474c <memcpy+0xc>
 800474a:	4770      	bx	lr
 800474c:	b510      	push	{r4, lr}
 800474e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004756:	4291      	cmp	r1, r2
 8004758:	d1f9      	bne.n	800474e <memcpy+0xe>
 800475a:	bd10      	pop	{r4, pc}

0800475c <memset>:
 800475c:	4402      	add	r2, r0
 800475e:	4603      	mov	r3, r0
 8004760:	4293      	cmp	r3, r2
 8004762:	d100      	bne.n	8004766 <memset+0xa>
 8004764:	4770      	bx	lr
 8004766:	f803 1b01 	strb.w	r1, [r3], #1
 800476a:	e7f9      	b.n	8004760 <memset+0x4>

0800476c <siprintf>:
 800476c:	b40e      	push	{r1, r2, r3}
 800476e:	b500      	push	{lr}
 8004770:	b09c      	sub	sp, #112	; 0x70
 8004772:	ab1d      	add	r3, sp, #116	; 0x74
 8004774:	9002      	str	r0, [sp, #8]
 8004776:	9006      	str	r0, [sp, #24]
 8004778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800477c:	4809      	ldr	r0, [pc, #36]	; (80047a4 <siprintf+0x38>)
 800477e:	9107      	str	r1, [sp, #28]
 8004780:	9104      	str	r1, [sp, #16]
 8004782:	4909      	ldr	r1, [pc, #36]	; (80047a8 <siprintf+0x3c>)
 8004784:	f853 2b04 	ldr.w	r2, [r3], #4
 8004788:	9105      	str	r1, [sp, #20]
 800478a:	6800      	ldr	r0, [r0, #0]
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	a902      	add	r1, sp, #8
 8004790:	f000 f868 	bl	8004864 <_svfiprintf_r>
 8004794:	9b02      	ldr	r3, [sp, #8]
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	b01c      	add	sp, #112	; 0x70
 800479c:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a0:	b003      	add	sp, #12
 80047a2:	4770      	bx	lr
 80047a4:	20000010 	.word	0x20000010
 80047a8:	ffff0208 	.word	0xffff0208

080047ac <__ssputs_r>:
 80047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	688e      	ldr	r6, [r1, #8]
 80047b2:	429e      	cmp	r6, r3
 80047b4:	4682      	mov	sl, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	4690      	mov	r8, r2
 80047ba:	461f      	mov	r7, r3
 80047bc:	d838      	bhi.n	8004830 <__ssputs_r+0x84>
 80047be:	898a      	ldrh	r2, [r1, #12]
 80047c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047c4:	d032      	beq.n	800482c <__ssputs_r+0x80>
 80047c6:	6825      	ldr	r5, [r4, #0]
 80047c8:	6909      	ldr	r1, [r1, #16]
 80047ca:	eba5 0901 	sub.w	r9, r5, r1
 80047ce:	6965      	ldr	r5, [r4, #20]
 80047d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047d8:	3301      	adds	r3, #1
 80047da:	444b      	add	r3, r9
 80047dc:	106d      	asrs	r5, r5, #1
 80047de:	429d      	cmp	r5, r3
 80047e0:	bf38      	it	cc
 80047e2:	461d      	movcc	r5, r3
 80047e4:	0553      	lsls	r3, r2, #21
 80047e6:	d531      	bpl.n	800484c <__ssputs_r+0xa0>
 80047e8:	4629      	mov	r1, r5
 80047ea:	f000 fb55 	bl	8004e98 <_malloc_r>
 80047ee:	4606      	mov	r6, r0
 80047f0:	b950      	cbnz	r0, 8004808 <__ssputs_r+0x5c>
 80047f2:	230c      	movs	r3, #12
 80047f4:	f8ca 3000 	str.w	r3, [sl]
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	6921      	ldr	r1, [r4, #16]
 800480a:	464a      	mov	r2, r9
 800480c:	f7ff ff98 	bl	8004740 <memcpy>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	81a3      	strh	r3, [r4, #12]
 800481c:	6126      	str	r6, [r4, #16]
 800481e:	6165      	str	r5, [r4, #20]
 8004820:	444e      	add	r6, r9
 8004822:	eba5 0509 	sub.w	r5, r5, r9
 8004826:	6026      	str	r6, [r4, #0]
 8004828:	60a5      	str	r5, [r4, #8]
 800482a:	463e      	mov	r6, r7
 800482c:	42be      	cmp	r6, r7
 800482e:	d900      	bls.n	8004832 <__ssputs_r+0x86>
 8004830:	463e      	mov	r6, r7
 8004832:	6820      	ldr	r0, [r4, #0]
 8004834:	4632      	mov	r2, r6
 8004836:	4641      	mov	r1, r8
 8004838:	f000 faa8 	bl	8004d8c <memmove>
 800483c:	68a3      	ldr	r3, [r4, #8]
 800483e:	1b9b      	subs	r3, r3, r6
 8004840:	60a3      	str	r3, [r4, #8]
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	4433      	add	r3, r6
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	2000      	movs	r0, #0
 800484a:	e7db      	b.n	8004804 <__ssputs_r+0x58>
 800484c:	462a      	mov	r2, r5
 800484e:	f000 fb97 	bl	8004f80 <_realloc_r>
 8004852:	4606      	mov	r6, r0
 8004854:	2800      	cmp	r0, #0
 8004856:	d1e1      	bne.n	800481c <__ssputs_r+0x70>
 8004858:	6921      	ldr	r1, [r4, #16]
 800485a:	4650      	mov	r0, sl
 800485c:	f000 fab0 	bl	8004dc0 <_free_r>
 8004860:	e7c7      	b.n	80047f2 <__ssputs_r+0x46>
	...

08004864 <_svfiprintf_r>:
 8004864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	4698      	mov	r8, r3
 800486a:	898b      	ldrh	r3, [r1, #12]
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	b09d      	sub	sp, #116	; 0x74
 8004870:	4607      	mov	r7, r0
 8004872:	460d      	mov	r5, r1
 8004874:	4614      	mov	r4, r2
 8004876:	d50e      	bpl.n	8004896 <_svfiprintf_r+0x32>
 8004878:	690b      	ldr	r3, [r1, #16]
 800487a:	b963      	cbnz	r3, 8004896 <_svfiprintf_r+0x32>
 800487c:	2140      	movs	r1, #64	; 0x40
 800487e:	f000 fb0b 	bl	8004e98 <_malloc_r>
 8004882:	6028      	str	r0, [r5, #0]
 8004884:	6128      	str	r0, [r5, #16]
 8004886:	b920      	cbnz	r0, 8004892 <_svfiprintf_r+0x2e>
 8004888:	230c      	movs	r3, #12
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004890:	e0d1      	b.n	8004a36 <_svfiprintf_r+0x1d2>
 8004892:	2340      	movs	r3, #64	; 0x40
 8004894:	616b      	str	r3, [r5, #20]
 8004896:	2300      	movs	r3, #0
 8004898:	9309      	str	r3, [sp, #36]	; 0x24
 800489a:	2320      	movs	r3, #32
 800489c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048a4:	2330      	movs	r3, #48	; 0x30
 80048a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a50 <_svfiprintf_r+0x1ec>
 80048aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ae:	f04f 0901 	mov.w	r9, #1
 80048b2:	4623      	mov	r3, r4
 80048b4:	469a      	mov	sl, r3
 80048b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ba:	b10a      	cbz	r2, 80048c0 <_svfiprintf_r+0x5c>
 80048bc:	2a25      	cmp	r2, #37	; 0x25
 80048be:	d1f9      	bne.n	80048b4 <_svfiprintf_r+0x50>
 80048c0:	ebba 0b04 	subs.w	fp, sl, r4
 80048c4:	d00b      	beq.n	80048de <_svfiprintf_r+0x7a>
 80048c6:	465b      	mov	r3, fp
 80048c8:	4622      	mov	r2, r4
 80048ca:	4629      	mov	r1, r5
 80048cc:	4638      	mov	r0, r7
 80048ce:	f7ff ff6d 	bl	80047ac <__ssputs_r>
 80048d2:	3001      	adds	r0, #1
 80048d4:	f000 80aa 	beq.w	8004a2c <_svfiprintf_r+0x1c8>
 80048d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048da:	445a      	add	r2, fp
 80048dc:	9209      	str	r2, [sp, #36]	; 0x24
 80048de:	f89a 3000 	ldrb.w	r3, [sl]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80a2 	beq.w	8004a2c <_svfiprintf_r+0x1c8>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048f2:	f10a 0a01 	add.w	sl, sl, #1
 80048f6:	9304      	str	r3, [sp, #16]
 80048f8:	9307      	str	r3, [sp, #28]
 80048fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004900:	4654      	mov	r4, sl
 8004902:	2205      	movs	r2, #5
 8004904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004908:	4851      	ldr	r0, [pc, #324]	; (8004a50 <_svfiprintf_r+0x1ec>)
 800490a:	f7fb fc79 	bl	8000200 <memchr>
 800490e:	9a04      	ldr	r2, [sp, #16]
 8004910:	b9d8      	cbnz	r0, 800494a <_svfiprintf_r+0xe6>
 8004912:	06d0      	lsls	r0, r2, #27
 8004914:	bf44      	itt	mi
 8004916:	2320      	movmi	r3, #32
 8004918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800491c:	0711      	lsls	r1, r2, #28
 800491e:	bf44      	itt	mi
 8004920:	232b      	movmi	r3, #43	; 0x2b
 8004922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004926:	f89a 3000 	ldrb.w	r3, [sl]
 800492a:	2b2a      	cmp	r3, #42	; 0x2a
 800492c:	d015      	beq.n	800495a <_svfiprintf_r+0xf6>
 800492e:	9a07      	ldr	r2, [sp, #28]
 8004930:	4654      	mov	r4, sl
 8004932:	2000      	movs	r0, #0
 8004934:	f04f 0c0a 	mov.w	ip, #10
 8004938:	4621      	mov	r1, r4
 800493a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800493e:	3b30      	subs	r3, #48	; 0x30
 8004940:	2b09      	cmp	r3, #9
 8004942:	d94e      	bls.n	80049e2 <_svfiprintf_r+0x17e>
 8004944:	b1b0      	cbz	r0, 8004974 <_svfiprintf_r+0x110>
 8004946:	9207      	str	r2, [sp, #28]
 8004948:	e014      	b.n	8004974 <_svfiprintf_r+0x110>
 800494a:	eba0 0308 	sub.w	r3, r0, r8
 800494e:	fa09 f303 	lsl.w	r3, r9, r3
 8004952:	4313      	orrs	r3, r2
 8004954:	9304      	str	r3, [sp, #16]
 8004956:	46a2      	mov	sl, r4
 8004958:	e7d2      	b.n	8004900 <_svfiprintf_r+0x9c>
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	1d19      	adds	r1, r3, #4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	9103      	str	r1, [sp, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	bfbb      	ittet	lt
 8004966:	425b      	neglt	r3, r3
 8004968:	f042 0202 	orrlt.w	r2, r2, #2
 800496c:	9307      	strge	r3, [sp, #28]
 800496e:	9307      	strlt	r3, [sp, #28]
 8004970:	bfb8      	it	lt
 8004972:	9204      	strlt	r2, [sp, #16]
 8004974:	7823      	ldrb	r3, [r4, #0]
 8004976:	2b2e      	cmp	r3, #46	; 0x2e
 8004978:	d10c      	bne.n	8004994 <_svfiprintf_r+0x130>
 800497a:	7863      	ldrb	r3, [r4, #1]
 800497c:	2b2a      	cmp	r3, #42	; 0x2a
 800497e:	d135      	bne.n	80049ec <_svfiprintf_r+0x188>
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9203      	str	r2, [sp, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfb8      	it	lt
 800498c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004990:	3402      	adds	r4, #2
 8004992:	9305      	str	r3, [sp, #20]
 8004994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a60 <_svfiprintf_r+0x1fc>
 8004998:	7821      	ldrb	r1, [r4, #0]
 800499a:	2203      	movs	r2, #3
 800499c:	4650      	mov	r0, sl
 800499e:	f7fb fc2f 	bl	8000200 <memchr>
 80049a2:	b140      	cbz	r0, 80049b6 <_svfiprintf_r+0x152>
 80049a4:	2340      	movs	r3, #64	; 0x40
 80049a6:	eba0 000a 	sub.w	r0, r0, sl
 80049aa:	fa03 f000 	lsl.w	r0, r3, r0
 80049ae:	9b04      	ldr	r3, [sp, #16]
 80049b0:	4303      	orrs	r3, r0
 80049b2:	3401      	adds	r4, #1
 80049b4:	9304      	str	r3, [sp, #16]
 80049b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ba:	4826      	ldr	r0, [pc, #152]	; (8004a54 <_svfiprintf_r+0x1f0>)
 80049bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049c0:	2206      	movs	r2, #6
 80049c2:	f7fb fc1d 	bl	8000200 <memchr>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d038      	beq.n	8004a3c <_svfiprintf_r+0x1d8>
 80049ca:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <_svfiprintf_r+0x1f4>)
 80049cc:	bb1b      	cbnz	r3, 8004a16 <_svfiprintf_r+0x1b2>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	3307      	adds	r3, #7
 80049d2:	f023 0307 	bic.w	r3, r3, #7
 80049d6:	3308      	adds	r3, #8
 80049d8:	9303      	str	r3, [sp, #12]
 80049da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049dc:	4433      	add	r3, r6
 80049de:	9309      	str	r3, [sp, #36]	; 0x24
 80049e0:	e767      	b.n	80048b2 <_svfiprintf_r+0x4e>
 80049e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80049e6:	460c      	mov	r4, r1
 80049e8:	2001      	movs	r0, #1
 80049ea:	e7a5      	b.n	8004938 <_svfiprintf_r+0xd4>
 80049ec:	2300      	movs	r3, #0
 80049ee:	3401      	adds	r4, #1
 80049f0:	9305      	str	r3, [sp, #20]
 80049f2:	4619      	mov	r1, r3
 80049f4:	f04f 0c0a 	mov.w	ip, #10
 80049f8:	4620      	mov	r0, r4
 80049fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049fe:	3a30      	subs	r2, #48	; 0x30
 8004a00:	2a09      	cmp	r2, #9
 8004a02:	d903      	bls.n	8004a0c <_svfiprintf_r+0x1a8>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0c5      	beq.n	8004994 <_svfiprintf_r+0x130>
 8004a08:	9105      	str	r1, [sp, #20]
 8004a0a:	e7c3      	b.n	8004994 <_svfiprintf_r+0x130>
 8004a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a10:	4604      	mov	r4, r0
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7f0      	b.n	80049f8 <_svfiprintf_r+0x194>
 8004a16:	ab03      	add	r3, sp, #12
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <_svfiprintf_r+0x1f8>)
 8004a1e:	a904      	add	r1, sp, #16
 8004a20:	4638      	mov	r0, r7
 8004a22:	f3af 8000 	nop.w
 8004a26:	1c42      	adds	r2, r0, #1
 8004a28:	4606      	mov	r6, r0
 8004a2a:	d1d6      	bne.n	80049da <_svfiprintf_r+0x176>
 8004a2c:	89ab      	ldrh	r3, [r5, #12]
 8004a2e:	065b      	lsls	r3, r3, #25
 8004a30:	f53f af2c 	bmi.w	800488c <_svfiprintf_r+0x28>
 8004a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a36:	b01d      	add	sp, #116	; 0x74
 8004a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3c:	ab03      	add	r3, sp, #12
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	462a      	mov	r2, r5
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <_svfiprintf_r+0x1f8>)
 8004a44:	a904      	add	r1, sp, #16
 8004a46:	4638      	mov	r0, r7
 8004a48:	f000 f87a 	bl	8004b40 <_printf_i>
 8004a4c:	e7eb      	b.n	8004a26 <_svfiprintf_r+0x1c2>
 8004a4e:	bf00      	nop
 8004a50:	08005218 	.word	0x08005218
 8004a54:	08005222 	.word	0x08005222
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	080047ad 	.word	0x080047ad
 8004a60:	0800521e 	.word	0x0800521e

08004a64 <_printf_common>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	4616      	mov	r6, r2
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	688a      	ldr	r2, [r1, #8]
 8004a6e:	690b      	ldr	r3, [r1, #16]
 8004a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a74:	4293      	cmp	r3, r2
 8004a76:	bfb8      	it	lt
 8004a78:	4613      	movlt	r3, r2
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a80:	4607      	mov	r7, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	b10a      	cbz	r2, 8004a8a <_printf_common+0x26>
 8004a86:	3301      	adds	r3, #1
 8004a88:	6033      	str	r3, [r6, #0]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	0699      	lsls	r1, r3, #26
 8004a8e:	bf42      	ittt	mi
 8004a90:	6833      	ldrmi	r3, [r6, #0]
 8004a92:	3302      	addmi	r3, #2
 8004a94:	6033      	strmi	r3, [r6, #0]
 8004a96:	6825      	ldr	r5, [r4, #0]
 8004a98:	f015 0506 	ands.w	r5, r5, #6
 8004a9c:	d106      	bne.n	8004aac <_printf_common+0x48>
 8004a9e:	f104 0a19 	add.w	sl, r4, #25
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	6832      	ldr	r2, [r6, #0]
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	dc26      	bgt.n	8004afa <_printf_common+0x96>
 8004aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab0:	1e13      	subs	r3, r2, #0
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	bf18      	it	ne
 8004ab6:	2301      	movne	r3, #1
 8004ab8:	0692      	lsls	r2, r2, #26
 8004aba:	d42b      	bmi.n	8004b14 <_printf_common+0xb0>
 8004abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	47c0      	blx	r8
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d01e      	beq.n	8004b08 <_printf_common+0xa4>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	68e5      	ldr	r5, [r4, #12]
 8004ace:	6832      	ldr	r2, [r6, #0]
 8004ad0:	f003 0306 	and.w	r3, r3, #6
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	bf08      	it	eq
 8004ad8:	1aad      	subeq	r5, r5, r2
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	6922      	ldr	r2, [r4, #16]
 8004ade:	bf0c      	ite	eq
 8004ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae4:	2500      	movne	r5, #0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bfc4      	itt	gt
 8004aea:	1a9b      	subgt	r3, r3, r2
 8004aec:	18ed      	addgt	r5, r5, r3
 8004aee:	2600      	movs	r6, #0
 8004af0:	341a      	adds	r4, #26
 8004af2:	42b5      	cmp	r5, r6
 8004af4:	d11a      	bne.n	8004b2c <_printf_common+0xc8>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e008      	b.n	8004b0c <_printf_common+0xa8>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4652      	mov	r2, sl
 8004afe:	4649      	mov	r1, r9
 8004b00:	4638      	mov	r0, r7
 8004b02:	47c0      	blx	r8
 8004b04:	3001      	adds	r0, #1
 8004b06:	d103      	bne.n	8004b10 <_printf_common+0xac>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	3501      	adds	r5, #1
 8004b12:	e7c6      	b.n	8004aa2 <_printf_common+0x3e>
 8004b14:	18e1      	adds	r1, r4, r3
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	2030      	movs	r0, #48	; 0x30
 8004b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b1e:	4422      	add	r2, r4
 8004b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b28:	3302      	adds	r3, #2
 8004b2a:	e7c7      	b.n	8004abc <_printf_common+0x58>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4622      	mov	r2, r4
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d0e6      	beq.n	8004b08 <_printf_common+0xa4>
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7d9      	b.n	8004af2 <_printf_common+0x8e>
	...

08004b40 <_printf_i>:
 8004b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	7e0f      	ldrb	r7, [r1, #24]
 8004b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b48:	2f78      	cmp	r7, #120	; 0x78
 8004b4a:	4691      	mov	r9, r2
 8004b4c:	4680      	mov	r8, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	469a      	mov	sl, r3
 8004b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b56:	d807      	bhi.n	8004b68 <_printf_i+0x28>
 8004b58:	2f62      	cmp	r7, #98	; 0x62
 8004b5a:	d80a      	bhi.n	8004b72 <_printf_i+0x32>
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	f000 80d8 	beq.w	8004d12 <_printf_i+0x1d2>
 8004b62:	2f58      	cmp	r7, #88	; 0x58
 8004b64:	f000 80a3 	beq.w	8004cae <_printf_i+0x16e>
 8004b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b70:	e03a      	b.n	8004be8 <_printf_i+0xa8>
 8004b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b76:	2b15      	cmp	r3, #21
 8004b78:	d8f6      	bhi.n	8004b68 <_printf_i+0x28>
 8004b7a:	a101      	add	r1, pc, #4	; (adr r1, 8004b80 <_printf_i+0x40>)
 8004b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b80:	08004bd9 	.word	0x08004bd9
 8004b84:	08004bed 	.word	0x08004bed
 8004b88:	08004b69 	.word	0x08004b69
 8004b8c:	08004b69 	.word	0x08004b69
 8004b90:	08004b69 	.word	0x08004b69
 8004b94:	08004b69 	.word	0x08004b69
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004b69 	.word	0x08004b69
 8004ba0:	08004b69 	.word	0x08004b69
 8004ba4:	08004b69 	.word	0x08004b69
 8004ba8:	08004b69 	.word	0x08004b69
 8004bac:	08004cf9 	.word	0x08004cf9
 8004bb0:	08004c1d 	.word	0x08004c1d
 8004bb4:	08004cdb 	.word	0x08004cdb
 8004bb8:	08004b69 	.word	0x08004b69
 8004bbc:	08004b69 	.word	0x08004b69
 8004bc0:	08004d1b 	.word	0x08004d1b
 8004bc4:	08004b69 	.word	0x08004b69
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b69 	.word	0x08004b69
 8004bd0:	08004b69 	.word	0x08004b69
 8004bd4:	08004ce3 	.word	0x08004ce3
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	602a      	str	r2, [r5, #0]
 8004be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0a3      	b.n	8004d34 <_printf_i+0x1f4>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	6829      	ldr	r1, [r5, #0]
 8004bf0:	0606      	lsls	r6, r0, #24
 8004bf2:	f101 0304 	add.w	r3, r1, #4
 8004bf6:	d50a      	bpl.n	8004c0e <_printf_i+0xce>
 8004bf8:	680e      	ldr	r6, [r1, #0]
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	da03      	bge.n	8004c08 <_printf_i+0xc8>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	4276      	negs	r6, r6
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c08:	485e      	ldr	r0, [pc, #376]	; (8004d84 <_printf_i+0x244>)
 8004c0a:	230a      	movs	r3, #10
 8004c0c:	e019      	b.n	8004c42 <_printf_i+0x102>
 8004c0e:	680e      	ldr	r6, [r1, #0]
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c16:	bf18      	it	ne
 8004c18:	b236      	sxthne	r6, r6
 8004c1a:	e7ef      	b.n	8004bfc <_printf_i+0xbc>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	6029      	str	r1, [r5, #0]
 8004c24:	0601      	lsls	r1, r0, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xec>
 8004c28:	681e      	ldr	r6, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0xf2>
 8004c2c:	0646      	lsls	r6, r0, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xe8>
 8004c30:	881e      	ldrh	r6, [r3, #0]
 8004c32:	4854      	ldr	r0, [pc, #336]	; (8004d84 <_printf_i+0x244>)
 8004c34:	2f6f      	cmp	r7, #111	; 0x6f
 8004c36:	bf0c      	ite	eq
 8004c38:	2308      	moveq	r3, #8
 8004c3a:	230a      	movne	r3, #10
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c42:	6865      	ldr	r5, [r4, #4]
 8004c44:	60a5      	str	r5, [r4, #8]
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	bfa2      	ittt	ge
 8004c4a:	6821      	ldrge	r1, [r4, #0]
 8004c4c:	f021 0104 	bicge.w	r1, r1, #4
 8004c50:	6021      	strge	r1, [r4, #0]
 8004c52:	b90e      	cbnz	r6, 8004c58 <_printf_i+0x118>
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	d04d      	beq.n	8004cf4 <_printf_i+0x1b4>
 8004c58:	4615      	mov	r5, r2
 8004c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c62:	5dc7      	ldrb	r7, [r0, r7]
 8004c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c68:	4637      	mov	r7, r6
 8004c6a:	42bb      	cmp	r3, r7
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	d9f4      	bls.n	8004c5a <_printf_i+0x11a>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10b      	bne.n	8004c8c <_printf_i+0x14c>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	07de      	lsls	r6, r3, #31
 8004c78:	d508      	bpl.n	8004c8c <_printf_i+0x14c>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6861      	ldr	r1, [r4, #4]
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	bfde      	ittt	le
 8004c82:	2330      	movle	r3, #48	; 0x30
 8004c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c8c:	1b52      	subs	r2, r2, r5
 8004c8e:	6122      	str	r2, [r4, #16]
 8004c90:	f8cd a000 	str.w	sl, [sp]
 8004c94:	464b      	mov	r3, r9
 8004c96:	aa03      	add	r2, sp, #12
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fee2 	bl	8004a64 <_printf_common>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d14c      	bne.n	8004d3e <_printf_i+0x1fe>
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca8:	b004      	add	sp, #16
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	4835      	ldr	r0, [pc, #212]	; (8004d84 <_printf_i+0x244>)
 8004cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cb4:	6829      	ldr	r1, [r5, #0]
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cbc:	6029      	str	r1, [r5, #0]
 8004cbe:	061d      	lsls	r5, r3, #24
 8004cc0:	d514      	bpl.n	8004cec <_printf_i+0x1ac>
 8004cc2:	07df      	lsls	r7, r3, #31
 8004cc4:	bf44      	itt	mi
 8004cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cca:	6023      	strmi	r3, [r4, #0]
 8004ccc:	b91e      	cbnz	r6, 8004cd6 <_printf_i+0x196>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	f023 0320 	bic.w	r3, r3, #32
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	e7b0      	b.n	8004c3c <_printf_i+0xfc>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f043 0320 	orr.w	r3, r3, #32
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	2378      	movs	r3, #120	; 0x78
 8004ce4:	4828      	ldr	r0, [pc, #160]	; (8004d88 <_printf_i+0x248>)
 8004ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cea:	e7e3      	b.n	8004cb4 <_printf_i+0x174>
 8004cec:	0659      	lsls	r1, r3, #25
 8004cee:	bf48      	it	mi
 8004cf0:	b2b6      	uxthmi	r6, r6
 8004cf2:	e7e6      	b.n	8004cc2 <_printf_i+0x182>
 8004cf4:	4615      	mov	r5, r2
 8004cf6:	e7bb      	b.n	8004c70 <_printf_i+0x130>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	6826      	ldr	r6, [r4, #0]
 8004cfc:	6961      	ldr	r1, [r4, #20]
 8004cfe:	1d18      	adds	r0, r3, #4
 8004d00:	6028      	str	r0, [r5, #0]
 8004d02:	0635      	lsls	r5, r6, #24
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0x1cc>
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <_printf_i+0x1d2>
 8004d0c:	0670      	lsls	r0, r6, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0x1c8>
 8004d10:	8019      	strh	r1, [r3, #0]
 8004d12:	2300      	movs	r3, #0
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	4615      	mov	r5, r2
 8004d18:	e7ba      	b.n	8004c90 <_printf_i+0x150>
 8004d1a:	682b      	ldr	r3, [r5, #0]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	602a      	str	r2, [r5, #0]
 8004d20:	681d      	ldr	r5, [r3, #0]
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4628      	mov	r0, r5
 8004d28:	f7fb fa6a 	bl	8000200 <memchr>
 8004d2c:	b108      	cbz	r0, 8004d32 <_printf_i+0x1f2>
 8004d2e:	1b40      	subs	r0, r0, r5
 8004d30:	6060      	str	r0, [r4, #4]
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	2300      	movs	r3, #0
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3c:	e7a8      	b.n	8004c90 <_printf_i+0x150>
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	462a      	mov	r2, r5
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	47d0      	blx	sl
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d0ab      	beq.n	8004ca4 <_printf_i+0x164>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	079b      	lsls	r3, r3, #30
 8004d50:	d413      	bmi.n	8004d7a <_printf_i+0x23a>
 8004d52:	68e0      	ldr	r0, [r4, #12]
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	4298      	cmp	r0, r3
 8004d58:	bfb8      	it	lt
 8004d5a:	4618      	movlt	r0, r3
 8004d5c:	e7a4      	b.n	8004ca8 <_printf_i+0x168>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4632      	mov	r2, r6
 8004d62:	4649      	mov	r1, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	47d0      	blx	sl
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d09b      	beq.n	8004ca4 <_printf_i+0x164>
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	68e3      	ldr	r3, [r4, #12]
 8004d70:	9903      	ldr	r1, [sp, #12]
 8004d72:	1a5b      	subs	r3, r3, r1
 8004d74:	42ab      	cmp	r3, r5
 8004d76:	dcf2      	bgt.n	8004d5e <_printf_i+0x21e>
 8004d78:	e7eb      	b.n	8004d52 <_printf_i+0x212>
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	f104 0619 	add.w	r6, r4, #25
 8004d80:	e7f5      	b.n	8004d6e <_printf_i+0x22e>
 8004d82:	bf00      	nop
 8004d84:	08005229 	.word	0x08005229
 8004d88:	0800523a 	.word	0x0800523a

08004d8c <memmove>:
 8004d8c:	4288      	cmp	r0, r1
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	eb01 0402 	add.w	r4, r1, r2
 8004d94:	d902      	bls.n	8004d9c <memmove+0x10>
 8004d96:	4284      	cmp	r4, r0
 8004d98:	4623      	mov	r3, r4
 8004d9a:	d807      	bhi.n	8004dac <memmove+0x20>
 8004d9c:	1e43      	subs	r3, r0, #1
 8004d9e:	42a1      	cmp	r1, r4
 8004da0:	d008      	beq.n	8004db4 <memmove+0x28>
 8004da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004daa:	e7f8      	b.n	8004d9e <memmove+0x12>
 8004dac:	4402      	add	r2, r0
 8004dae:	4601      	mov	r1, r0
 8004db0:	428a      	cmp	r2, r1
 8004db2:	d100      	bne.n	8004db6 <memmove+0x2a>
 8004db4:	bd10      	pop	{r4, pc}
 8004db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dbe:	e7f7      	b.n	8004db0 <memmove+0x24>

08004dc0 <_free_r>:
 8004dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	d044      	beq.n	8004e50 <_free_r+0x90>
 8004dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dca:	9001      	str	r0, [sp, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f1a1 0404 	sub.w	r4, r1, #4
 8004dd2:	bfb8      	it	lt
 8004dd4:	18e4      	addlt	r4, r4, r3
 8004dd6:	f000 f913 	bl	8005000 <__malloc_lock>
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <_free_r+0x94>)
 8004ddc:	9801      	ldr	r0, [sp, #4]
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	b933      	cbnz	r3, 8004df0 <_free_r+0x30>
 8004de2:	6063      	str	r3, [r4, #4]
 8004de4:	6014      	str	r4, [r2, #0]
 8004de6:	b003      	add	sp, #12
 8004de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dec:	f000 b90e 	b.w	800500c <__malloc_unlock>
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	d908      	bls.n	8004e06 <_free_r+0x46>
 8004df4:	6825      	ldr	r5, [r4, #0]
 8004df6:	1961      	adds	r1, r4, r5
 8004df8:	428b      	cmp	r3, r1
 8004dfa:	bf01      	itttt	eq
 8004dfc:	6819      	ldreq	r1, [r3, #0]
 8004dfe:	685b      	ldreq	r3, [r3, #4]
 8004e00:	1949      	addeq	r1, r1, r5
 8004e02:	6021      	streq	r1, [r4, #0]
 8004e04:	e7ed      	b.n	8004de2 <_free_r+0x22>
 8004e06:	461a      	mov	r2, r3
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	b10b      	cbz	r3, 8004e10 <_free_r+0x50>
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	d9fa      	bls.n	8004e06 <_free_r+0x46>
 8004e10:	6811      	ldr	r1, [r2, #0]
 8004e12:	1855      	adds	r5, r2, r1
 8004e14:	42a5      	cmp	r5, r4
 8004e16:	d10b      	bne.n	8004e30 <_free_r+0x70>
 8004e18:	6824      	ldr	r4, [r4, #0]
 8004e1a:	4421      	add	r1, r4
 8004e1c:	1854      	adds	r4, r2, r1
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	6011      	str	r1, [r2, #0]
 8004e22:	d1e0      	bne.n	8004de6 <_free_r+0x26>
 8004e24:	681c      	ldr	r4, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	6053      	str	r3, [r2, #4]
 8004e2a:	4421      	add	r1, r4
 8004e2c:	6011      	str	r1, [r2, #0]
 8004e2e:	e7da      	b.n	8004de6 <_free_r+0x26>
 8004e30:	d902      	bls.n	8004e38 <_free_r+0x78>
 8004e32:	230c      	movs	r3, #12
 8004e34:	6003      	str	r3, [r0, #0]
 8004e36:	e7d6      	b.n	8004de6 <_free_r+0x26>
 8004e38:	6825      	ldr	r5, [r4, #0]
 8004e3a:	1961      	adds	r1, r4, r5
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	bf04      	itt	eq
 8004e40:	6819      	ldreq	r1, [r3, #0]
 8004e42:	685b      	ldreq	r3, [r3, #4]
 8004e44:	6063      	str	r3, [r4, #4]
 8004e46:	bf04      	itt	eq
 8004e48:	1949      	addeq	r1, r1, r5
 8004e4a:	6021      	streq	r1, [r4, #0]
 8004e4c:	6054      	str	r4, [r2, #4]
 8004e4e:	e7ca      	b.n	8004de6 <_free_r+0x26>
 8004e50:	b003      	add	sp, #12
 8004e52:	bd30      	pop	{r4, r5, pc}
 8004e54:	2000409c 	.word	0x2000409c

08004e58 <sbrk_aligned>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	4e0e      	ldr	r6, [pc, #56]	; (8004e94 <sbrk_aligned+0x3c>)
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	6831      	ldr	r1, [r6, #0]
 8004e60:	4605      	mov	r5, r0
 8004e62:	b911      	cbnz	r1, 8004e6a <sbrk_aligned+0x12>
 8004e64:	f000 f8bc 	bl	8004fe0 <_sbrk_r>
 8004e68:	6030      	str	r0, [r6, #0]
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 f8b7 	bl	8004fe0 <_sbrk_r>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	d00a      	beq.n	8004e8c <sbrk_aligned+0x34>
 8004e76:	1cc4      	adds	r4, r0, #3
 8004e78:	f024 0403 	bic.w	r4, r4, #3
 8004e7c:	42a0      	cmp	r0, r4
 8004e7e:	d007      	beq.n	8004e90 <sbrk_aligned+0x38>
 8004e80:	1a21      	subs	r1, r4, r0
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 f8ac 	bl	8004fe0 <_sbrk_r>
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d101      	bne.n	8004e90 <sbrk_aligned+0x38>
 8004e8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004e90:	4620      	mov	r0, r4
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	200040a0 	.word	0x200040a0

08004e98 <_malloc_r>:
 8004e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9c:	1ccd      	adds	r5, r1, #3
 8004e9e:	f025 0503 	bic.w	r5, r5, #3
 8004ea2:	3508      	adds	r5, #8
 8004ea4:	2d0c      	cmp	r5, #12
 8004ea6:	bf38      	it	cc
 8004ea8:	250c      	movcc	r5, #12
 8004eaa:	2d00      	cmp	r5, #0
 8004eac:	4607      	mov	r7, r0
 8004eae:	db01      	blt.n	8004eb4 <_malloc_r+0x1c>
 8004eb0:	42a9      	cmp	r1, r5
 8004eb2:	d905      	bls.n	8004ec0 <_malloc_r+0x28>
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	2600      	movs	r6, #0
 8004eba:	4630      	mov	r0, r6
 8004ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec0:	4e2e      	ldr	r6, [pc, #184]	; (8004f7c <_malloc_r+0xe4>)
 8004ec2:	f000 f89d 	bl	8005000 <__malloc_lock>
 8004ec6:	6833      	ldr	r3, [r6, #0]
 8004ec8:	461c      	mov	r4, r3
 8004eca:	bb34      	cbnz	r4, 8004f1a <_malloc_r+0x82>
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4638      	mov	r0, r7
 8004ed0:	f7ff ffc2 	bl	8004e58 <sbrk_aligned>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	d14d      	bne.n	8004f76 <_malloc_r+0xde>
 8004eda:	6834      	ldr	r4, [r6, #0]
 8004edc:	4626      	mov	r6, r4
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	d140      	bne.n	8004f64 <_malloc_r+0xcc>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	eb04 0803 	add.w	r8, r4, r3
 8004eec:	f000 f878 	bl	8004fe0 <_sbrk_r>
 8004ef0:	4580      	cmp	r8, r0
 8004ef2:	d13a      	bne.n	8004f6a <_malloc_r+0xd2>
 8004ef4:	6821      	ldr	r1, [r4, #0]
 8004ef6:	3503      	adds	r5, #3
 8004ef8:	1a6d      	subs	r5, r5, r1
 8004efa:	f025 0503 	bic.w	r5, r5, #3
 8004efe:	3508      	adds	r5, #8
 8004f00:	2d0c      	cmp	r5, #12
 8004f02:	bf38      	it	cc
 8004f04:	250c      	movcc	r5, #12
 8004f06:	4629      	mov	r1, r5
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff ffa5 	bl	8004e58 <sbrk_aligned>
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d02b      	beq.n	8004f6a <_malloc_r+0xd2>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	442b      	add	r3, r5
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	e00e      	b.n	8004f38 <_malloc_r+0xa0>
 8004f1a:	6822      	ldr	r2, [r4, #0]
 8004f1c:	1b52      	subs	r2, r2, r5
 8004f1e:	d41e      	bmi.n	8004f5e <_malloc_r+0xc6>
 8004f20:	2a0b      	cmp	r2, #11
 8004f22:	d916      	bls.n	8004f52 <_malloc_r+0xba>
 8004f24:	1961      	adds	r1, r4, r5
 8004f26:	42a3      	cmp	r3, r4
 8004f28:	6025      	str	r5, [r4, #0]
 8004f2a:	bf18      	it	ne
 8004f2c:	6059      	strne	r1, [r3, #4]
 8004f2e:	6863      	ldr	r3, [r4, #4]
 8004f30:	bf08      	it	eq
 8004f32:	6031      	streq	r1, [r6, #0]
 8004f34:	5162      	str	r2, [r4, r5]
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	4638      	mov	r0, r7
 8004f3a:	f104 060b 	add.w	r6, r4, #11
 8004f3e:	f000 f865 	bl	800500c <__malloc_unlock>
 8004f42:	f026 0607 	bic.w	r6, r6, #7
 8004f46:	1d23      	adds	r3, r4, #4
 8004f48:	1af2      	subs	r2, r6, r3
 8004f4a:	d0b6      	beq.n	8004eba <_malloc_r+0x22>
 8004f4c:	1b9b      	subs	r3, r3, r6
 8004f4e:	50a3      	str	r3, [r4, r2]
 8004f50:	e7b3      	b.n	8004eba <_malloc_r+0x22>
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	bf0c      	ite	eq
 8004f58:	6032      	streq	r2, [r6, #0]
 8004f5a:	605a      	strne	r2, [r3, #4]
 8004f5c:	e7ec      	b.n	8004f38 <_malloc_r+0xa0>
 8004f5e:	4623      	mov	r3, r4
 8004f60:	6864      	ldr	r4, [r4, #4]
 8004f62:	e7b2      	b.n	8004eca <_malloc_r+0x32>
 8004f64:	4634      	mov	r4, r6
 8004f66:	6876      	ldr	r6, [r6, #4]
 8004f68:	e7b9      	b.n	8004ede <_malloc_r+0x46>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f000 f84c 	bl	800500c <__malloc_unlock>
 8004f74:	e7a1      	b.n	8004eba <_malloc_r+0x22>
 8004f76:	6025      	str	r5, [r4, #0]
 8004f78:	e7de      	b.n	8004f38 <_malloc_r+0xa0>
 8004f7a:	bf00      	nop
 8004f7c:	2000409c 	.word	0x2000409c

08004f80 <_realloc_r>:
 8004f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f84:	4680      	mov	r8, r0
 8004f86:	4614      	mov	r4, r2
 8004f88:	460e      	mov	r6, r1
 8004f8a:	b921      	cbnz	r1, 8004f96 <_realloc_r+0x16>
 8004f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f90:	4611      	mov	r1, r2
 8004f92:	f7ff bf81 	b.w	8004e98 <_malloc_r>
 8004f96:	b92a      	cbnz	r2, 8004fa4 <_realloc_r+0x24>
 8004f98:	f7ff ff12 	bl	8004dc0 <_free_r>
 8004f9c:	4625      	mov	r5, r4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa4:	f000 f838 	bl	8005018 <_malloc_usable_size_r>
 8004fa8:	4284      	cmp	r4, r0
 8004faa:	4607      	mov	r7, r0
 8004fac:	d802      	bhi.n	8004fb4 <_realloc_r+0x34>
 8004fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fb2:	d812      	bhi.n	8004fda <_realloc_r+0x5a>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	f7ff ff6e 	bl	8004e98 <_malloc_r>
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d0ed      	beq.n	8004f9e <_realloc_r+0x1e>
 8004fc2:	42bc      	cmp	r4, r7
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	bf28      	it	cs
 8004fca:	463a      	movcs	r2, r7
 8004fcc:	f7ff fbb8 	bl	8004740 <memcpy>
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f7ff fef4 	bl	8004dc0 <_free_r>
 8004fd8:	e7e1      	b.n	8004f9e <_realloc_r+0x1e>
 8004fda:	4635      	mov	r5, r6
 8004fdc:	e7df      	b.n	8004f9e <_realloc_r+0x1e>
	...

08004fe0 <_sbrk_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4d06      	ldr	r5, [pc, #24]	; (8004ffc <_sbrk_r+0x1c>)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	602b      	str	r3, [r5, #0]
 8004fec:	f7fb fe7e 	bl	8000cec <_sbrk>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_sbrk_r+0x1a>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_sbrk_r+0x1a>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	200040a4 	.word	0x200040a4

08005000 <__malloc_lock>:
 8005000:	4801      	ldr	r0, [pc, #4]	; (8005008 <__malloc_lock+0x8>)
 8005002:	f000 b811 	b.w	8005028 <__retarget_lock_acquire_recursive>
 8005006:	bf00      	nop
 8005008:	200040a8 	.word	0x200040a8

0800500c <__malloc_unlock>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__malloc_unlock+0x8>)
 800500e:	f000 b80c 	b.w	800502a <__retarget_lock_release_recursive>
 8005012:	bf00      	nop
 8005014:	200040a8 	.word	0x200040a8

08005018 <_malloc_usable_size_r>:
 8005018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800501c:	1f18      	subs	r0, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	bfbc      	itt	lt
 8005022:	580b      	ldrlt	r3, [r1, r0]
 8005024:	18c0      	addlt	r0, r0, r3
 8005026:	4770      	bx	lr

08005028 <__retarget_lock_acquire_recursive>:
 8005028:	4770      	bx	lr

0800502a <__retarget_lock_release_recursive>:
 800502a:	4770      	bx	lr

0800502c <_init>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr

08005038 <_fini>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr
